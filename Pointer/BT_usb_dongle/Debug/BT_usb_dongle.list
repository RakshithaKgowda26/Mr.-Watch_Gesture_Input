
BT_usb_dongle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800425c  0800425c  000201c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800425c  0800425c  000201c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800425c  0800425c  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001048  200001c8  0800442c  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001210  0800442c  00021210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010db8  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036aa  00000000  00000000  00030fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000083a5  00000000  00000000  00034653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0003c9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001330  00000000  00000000  0003d498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019770  00000000  00000000  0003e7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000120a9  00000000  00000000  00057f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000849ef  00000000  00000000  00069fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ee9d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002200  00000000  00000000  000eea20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c8 	.word	0x200001c8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800403c 	.word	0x0800403c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001cc 	.word	0x200001cc
 8000148:	0800403c 	.word	0x0800403c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000160:	2214      	movs	r2, #20
 8000162:	2100      	movs	r1, #0
 8000164:	a80c      	add	r0, sp, #48	; 0x30
 8000166:	f003 f95f 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800016a:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800016c:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800016e:	2100      	movs	r1, #0
 8000170:	eb0d 0002 	add.w	r0, sp, r2
 8000174:	f003 f958 	bl	8003428 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000178:	462a      	mov	r2, r5
 800017a:	2100      	movs	r1, #0
 800017c:	a801      	add	r0, sp, #4
 800017e:	f003 f953 	bl	8003428 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000182:	2401      	movs	r4, #1
 8000184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000188:	2602      	movs	r6, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800018a:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800018e:	e9cd 6311 	strd	r6, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000192:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000196:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000198:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800019a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800019c:	f001 f972 	bl	8001484 <HAL_RCC_OscConfig>
 80001a0:	b108      	cbz	r0, 80001a6 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001a2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80001a4:	e7fe      	b.n	80001a4 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001a8:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001b0:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001b2:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80001b6:	4621      	mov	r1, r4
 80001b8:	a805      	add	r0, sp, #20
 80001ba:	f001 fb39 	bl	8001830 <HAL_RCC_ClockConfig>
 80001be:	b108      	cbz	r0, 80001c4 <SystemClock_Config+0x68>
 80001c0:	b672      	cpsid	i
  while (1)
 80001c2:	e7fe      	b.n	80001c2 <SystemClock_Config+0x66>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80001c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001c8:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80001ca:	9501      	str	r5, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80001cc:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80001ce:	f001 fbeb 	bl	80019a8 <HAL_RCCEx_PeriphCLKConfig>
 80001d2:	b108      	cbz	r0, 80001d8 <SystemClock_Config+0x7c>
 80001d4:	b672      	cpsid	i
  while (1)
 80001d6:	e7fe      	b.n	80001d6 <SystemClock_Config+0x7a>
}
 80001d8:	b014      	add	sp, #80	; 0x50
 80001da:	bd70      	pop	{r4, r5, r6, pc}

080001dc <main>:
{
 80001dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001e0:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80001e2:	2702      	movs	r7, #2
{
 80001e4:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80001e6:	f000 f9a3 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 80001ea:	f7ff ffb7 	bl	800015c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ee:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f2:	4c53      	ldr	r4, [pc, #332]	; (8000340 <main+0x164>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f4:	960b      	str	r6, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001f8:	f10d 0820 	add.w	r8, sp, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	61a3      	str	r3, [r4, #24]
 8000202:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000204:	4641      	mov	r1, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000206:	f003 0320 	and.w	r3, r3, #32
 800020a:	9306      	str	r3, [sp, #24]
 800020c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000210:	484c      	ldr	r0, [pc, #304]	; (8000344 <main+0x168>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	61a3      	str	r3, [r4, #24]
 8000218:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800021a:	9708      	str	r7, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021c:	f003 0304 	and.w	r3, r3, #4
 8000220:	9307      	str	r3, [sp, #28]
 8000222:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000224:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000226:	f000 fa65 	bl	80006f4 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 9600;
 800022a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart2.Instance = USART2;
 800022e:	4d46      	ldr	r5, [pc, #280]	; (8000348 <main+0x16c>)
  huart2.Init.BaudRate = 9600;
 8000230:	4946      	ldr	r1, [pc, #280]	; (800034c <main+0x170>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000232:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 9600;
 8000234:	e9c5 1300 	strd	r1, r3, [r5]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000238:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800023a:	e9c5 6602 	strd	r6, r6, [r5, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023e:	e9c5 3605 	strd	r3, r6, [r5, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000242:	612e      	str	r6, [r5, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000244:	61ee      	str	r6, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000246:	f001 fcaf 	bl	8001ba8 <HAL_UART_Init>
 800024a:	4606      	mov	r6, r0
 800024c:	b108      	cbz	r0, 8000252 <main+0x76>
 800024e:	b672      	cpsid	i
  while (1)
 8000250:	e7fe      	b.n	8000250 <main+0x74>
  huart2.Instance->CR1 |= USART_CR1_RXNEIE;
 8000252:	682a      	ldr	r2, [r5, #0]
 8000254:	68d3      	ldr	r3, [r2, #12]
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	60d3      	str	r3, [r2, #12]
  MX_USB_DEVICE_Init();
 800025c:	f002 ff22 	bl	80030a4 <MX_USB_DEVICE_Init>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000260:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(BT_STATE_PORT, BT_STATE_PIN, GPIO_PIN_RESET);
 8000262:	4632      	mov	r2, r6
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000264:	f043 0304 	orr.w	r3, r3, #4
 8000268:	61a3      	str	r3, [r4, #24]
 800026a:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(BT_STATE_PORT, BT_STATE_PIN, GPIO_PIN_RESET);
 800026c:	4639      	mov	r1, r7
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800026e:	f003 0304 	and.w	r3, r3, #4
	HAL_GPIO_WritePin(BT_STATE_PORT, BT_STATE_PIN, GPIO_PIN_RESET);
 8000272:	4834      	ldr	r0, [pc, #208]	; (8000344 <main+0x168>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000274:	9305      	str	r3, [sp, #20]
 8000276:	9b05      	ldr	r3, [sp, #20]
	HAL_GPIO_WritePin(BT_STATE_PORT, BT_STATE_PIN, GPIO_PIN_RESET);
 8000278:	f000 fb18 	bl	80008ac <HAL_GPIO_WritePin>
	HAL_GPIO_Init(BT_STATE_PORT, &GPIO_InitStruct);
 800027c:	4641      	mov	r1, r8
 800027e:	4831      	ldr	r0, [pc, #196]	; (8000344 <main+0x168>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000280:	e9cd 7608 	strd	r7, r6, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000284:	e9cd 770a 	strd	r7, r7, [sp, #40]	; 0x28
	HAL_GPIO_Init(BT_STATE_PORT, &GPIO_InitStruct);
 8000288:	f000 fa34 	bl	80006f4 <HAL_GPIO_Init>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800028c:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(DIAG_LED_PORT, DIAG_LED_PIN, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000290:	f043 0310 	orr.w	r3, r3, #16
 8000294:	61a3      	str	r3, [r4, #24]
 8000296:	69a3      	ldr	r3, [r4, #24]
	HAL_GPIO_WritePin(DIAG_LED_PORT, DIAG_LED_PIN, GPIO_PIN_SET);
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800029c:	f003 0310 	and.w	r3, r3, #16
	HAL_GPIO_WritePin(DIAG_LED_PORT, DIAG_LED_PIN, GPIO_PIN_SET);
 80002a0:	482b      	ldr	r0, [pc, #172]	; (8000350 <main+0x174>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80002a2:	9304      	str	r3, [sp, #16]
 80002a4:	9b04      	ldr	r3, [sp, #16]
	HAL_GPIO_WritePin(DIAG_LED_PORT, DIAG_LED_PIN, GPIO_PIN_SET);
 80002a6:	f000 fb01 	bl	80008ac <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002ae:	2301      	movs	r3, #1
	HAL_GPIO_Init(DIAG_LED_PORT, &GPIO_InitStruct);
 80002b0:	4641      	mov	r1, r8
 80002b2:	4827      	ldr	r0, [pc, #156]	; (8000350 <main+0x174>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	HAL_GPIO_Init(DIAG_LED_PORT, &GPIO_InitStruct);
 80002bc:	f000 fa1a 	bl	80006f4 <HAL_GPIO_Init>
	  if (HAL_GPIO_ReadPin(BT_STATE_PORT, BT_STATE_PIN) == GPIO_PIN_SET)
 80002c0:	4c20      	ldr	r4, [pc, #128]	; (8000344 <main+0x168>)
 80002c2:	2102      	movs	r1, #2
 80002c4:	4620      	mov	r0, r4
 80002c6:	f000 faeb 	bl	80008a0 <HAL_GPIO_ReadPin>
 80002ca:	2801      	cmp	r0, #1
 80002cc:	d1f9      	bne.n	80002c2 <main+0xe6>
		  HAL_Delay(2000);
 80002ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002d2:	f000 f951 	bl	8000578 <HAL_Delay>
	pdata = HAL_UART_Receive_gets(&huart2);
 80002d6:	4e1c      	ldr	r6, [pc, #112]	; (8000348 <main+0x16c>)
			report.x_disp = deltax;
 80002d8:	4c1e      	ldr	r4, [pc, #120]	; (8000354 <main+0x178>)
	pdata = HAL_UART_Receive_gets(&huart2);
 80002da:	4630      	mov	r0, r6
 80002dc:	f001 fca4 	bl	8001c28 <HAL_UART_Receive_gets>
	if (pdata)
 80002e0:	4605      	mov	r5, r0
 80002e2:	2800      	cmp	r0, #0
 80002e4:	d0f9      	beq.n	80002da <main+0xfe>
		if (sscanf((char *)pdata, "x:%d,y:%d,z:%d\r\n", &deltax, &deltay, &deltaz) == 3)
 80002e6:	491c      	ldr	r1, [pc, #112]	; (8000358 <main+0x17c>)
 80002e8:	f8cd 8000 	str.w	r8, [sp]
 80002ec:	ab03      	add	r3, sp, #12
 80002ee:	aa02      	add	r2, sp, #8
 80002f0:	f003 f8a2 	bl	8003438 <siscanf>
 80002f4:	2803      	cmp	r0, #3
 80002f6:	d119      	bne.n	800032c <main+0x150>
			report.x_disp = deltax;
 80002f8:	9b02      	ldr	r3, [sp, #8]
			USBD_HID_SendReport(&hUsbDeviceFS, (unsigned char *)&report, sizeof(struct mouse_report));
 80002fa:	2204      	movs	r2, #4
			report.x_disp = deltax;
 80002fc:	7063      	strb	r3, [r4, #1]
			report.y_disp = deltay;
 80002fe:	9b03      	ldr	r3, [sp, #12]
			USBD_HID_SendReport(&hUsbDeviceFS, (unsigned char *)&report, sizeof(struct mouse_report));
 8000300:	4621      	mov	r1, r4
			report.y_disp = deltay;
 8000302:	70a3      	strb	r3, [r4, #2]
			if (deltaz > 10)
 8000304:	9b08      	ldr	r3, [sp, #32]
			USBD_HID_SendReport(&hUsbDeviceFS, (unsigned char *)&report, sizeof(struct mouse_report));
 8000306:	4815      	ldr	r0, [pc, #84]	; (800035c <main+0x180>)
			if (deltaz > 10)
 8000308:	2b0a      	cmp	r3, #10
				report.buttons = 1;
 800030a:	bfc4      	itt	gt
 800030c:	2301      	movgt	r3, #1
 800030e:	7023      	strbgt	r3, [r4, #0]
			USBD_HID_SendReport(&hUsbDeviceFS, (unsigned char *)&report, sizeof(struct mouse_report));
 8000310:	f002 fb27 	bl	8002962 <USBD_HID_SendReport>
			if (report.buttons)
 8000314:	7823      	ldrb	r3, [r4, #0]
 8000316:	b14b      	cbz	r3, 800032c <main+0x150>
				HAL_Delay(100);
 8000318:	2064      	movs	r0, #100	; 0x64
 800031a:	f000 f92d 	bl	8000578 <HAL_Delay>
				report.buttons = 0;
 800031e:	2300      	movs	r3, #0
				USBD_HID_SendReport(&hUsbDeviceFS, (unsigned char *)&report, sizeof(struct mouse_report));
 8000320:	2204      	movs	r2, #4
 8000322:	4621      	mov	r1, r4
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <main+0x180>)
				report.buttons = 0;
 8000326:	7023      	strb	r3, [r4, #0]
				USBD_HID_SendReport(&hUsbDeviceFS, (unsigned char *)&report, sizeof(struct mouse_report));
 8000328:	f002 fb1b 	bl	8002962 <USBD_HID_SendReport>
		HAL_UART_Free_Receive_buf(&huart2, pdata);
 800032c:	4629      	mov	r1, r5
 800032e:	4630      	mov	r0, r6
 8000330:	f001 fc87 	bl	8001c42 <HAL_UART_Free_Receive_buf>
		HAL_GPIO_TogglePin(DIAG_LED_PORT, DIAG_LED_PIN);
 8000334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <main+0x174>)
 800033a:	f000 fabc 	bl	80008b6 <HAL_GPIO_TogglePin>
 800033e:	e7cc      	b.n	80002da <main+0xfe>
 8000340:	40021000 	.word	0x40021000
 8000344:	40010800 	.word	0x40010800
 8000348:	200001e4 	.word	0x200001e4
 800034c:	40004400 	.word	0x40004400
 8000350:	40011000 	.word	0x40011000
 8000354:	20000a2c 	.word	0x20000a2c
 8000358:	08004060 	.word	0x08004060
 800035c:	20000a3c 	.word	0x20000a3c

08000360 <Error_Handler>:
 8000360:	b672      	cpsid	i
  while (1)
 8000362:	e7fe      	b.n	8000362 <Error_Handler+0x2>

08000364 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <HAL_MspInit+0x3c>)
{
 8000366:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000368:	699a      	ldr	r2, [r3, #24]
 800036a:	f042 0201 	orr.w	r2, r2, #1
 800036e:	619a      	str	r2, [r3, #24]
 8000370:	699a      	ldr	r2, [r3, #24]
 8000372:	f002 0201 	and.w	r2, r2, #1
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	69da      	ldr	r2, [r3, #28]
 800037c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000380:	61da      	str	r2, [r3, #28]
 8000382:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038e:	6853      	ldr	r3, [r2, #4]
 8000390:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000394:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	b002      	add	sp, #8
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010000 	.word	0x40010000

080003a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003a8:	b510      	push	{r4, lr}
 80003aa:	4604      	mov	r4, r0
 80003ac:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	2210      	movs	r2, #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	a802      	add	r0, sp, #8
 80003b4:	f003 f838 	bl	8003428 <memset>
  if(huart->Instance==USART2)
 80003b8:	6822      	ldr	r2, [r4, #0]
 80003ba:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <HAL_UART_MspInit+0x7c>)
 80003bc:	429a      	cmp	r2, r3
 80003be:	d12f      	bne.n	8000420 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003c0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80003c4:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	4818      	ldr	r0, [pc, #96]	; (8000428 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80003c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80003cc:	61da      	str	r2, [r3, #28]
 80003ce:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 80003d2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80003d6:	9200      	str	r2, [sp, #0]
 80003d8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003dc:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003de:	f042 0204 	orr.w	r2, r2, #4
 80003e2:	619a      	str	r2, [r3, #24]
 80003e4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e6:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	9301      	str	r3, [sp, #4]
 80003ee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f0:	2302      	movs	r3, #2
 80003f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f6:	2303      	movs	r3, #3
 80003f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	f000 f97b 	bl	80006f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003fe:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <HAL_UART_MspInit+0x80>)
 8000402:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000406:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040c:	f000 f972 	bl	80006f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000410:	2026      	movs	r0, #38	; 0x26
 8000412:	4622      	mov	r2, r4
 8000414:	4621      	mov	r1, r4
 8000416:	f000 f8d3 	bl	80005c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800041a:	2026      	movs	r0, #38	; 0x26
 800041c:	f000 f902 	bl	8000624 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000420:	b006      	add	sp, #24
 8000422:	bd10      	pop	{r4, pc}
 8000424:	40004400 	.word	0x40004400
 8000428:	40010800 	.word	0x40010800

0800042c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800042c:	e7fe      	b.n	800042c <NMI_Handler>

0800042e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800042e:	e7fe      	b.n	800042e <HardFault_Handler>

08000430 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	e7fe      	b.n	8000430 <MemManage_Handler>

08000432 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler>

08000434 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000434:	e7fe      	b.n	8000434 <UsageFault_Handler>

08000436 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000436:	4770      	bx	lr

08000438 <DebugMon_Handler>:
 8000438:	4770      	bx	lr

0800043a <PendSV_Handler>:
 800043a:	4770      	bx	lr

0800043c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043c:	f000 b88a 	b.w	8000554 <HAL_IncTick>

08000440 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000440:	4801      	ldr	r0, [pc, #4]	; (8000448 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8000442:	f000 bae7 	b.w	8000a14 <HAL_PCD_IRQHandler>
 8000446:	bf00      	nop
 8000448:	20000f00 	.word	0x20000f00

0800044c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800044c:	4801      	ldr	r0, [pc, #4]	; (8000454 <USART2_IRQHandler+0x8>)
 800044e:	f001 bc13 	b.w	8001c78 <HAL_UART_IRQHandler>
 8000452:	bf00      	nop
 8000454:	200001e4 	.word	0x200001e4

08000458 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <_sbrk+0x30>)
{
 800045a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800045c:	6811      	ldr	r1, [r2, #0]
{
 800045e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000460:	b909      	cbnz	r1, 8000466 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000462:	490a      	ldr	r1, [pc, #40]	; (800048c <_sbrk+0x34>)
 8000464:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	6810      	ldr	r0, [r2, #0]
 8000468:	4909      	ldr	r1, [pc, #36]	; (8000490 <_sbrk+0x38>)
 800046a:	4c0a      	ldr	r4, [pc, #40]	; (8000494 <_sbrk+0x3c>)
 800046c:	4403      	add	r3, r0
 800046e:	1b09      	subs	r1, r1, r4
 8000470:	428b      	cmp	r3, r1
 8000472:	d906      	bls.n	8000482 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000474:	f002 ffae 	bl	80033d4 <__errno>
 8000478:	230c      	movs	r3, #12
 800047a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800047c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000480:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000482:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000484:	e7fc      	b.n	8000480 <_sbrk+0x28>
 8000486:	bf00      	nop
 8000488:	20000a30 	.word	0x20000a30
 800048c:	20001210 	.word	0x20001210
 8000490:	20002800 	.word	0x20002800
 8000494:	00000400 	.word	0x00000400

08000498 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	4770      	bx	lr
	...

0800049c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800049c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800049e:	e003      	b.n	80004a8 <LoopCopyDataInit>

080004a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004a6:	3104      	adds	r1, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004a8:	480a      	ldr	r0, [pc, #40]	; (80004d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004b0:	d3f6      	bcc.n	80004a0 <CopyDataInit>
  ldr r2, =_sbss
 80004b2:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004b4:	e002      	b.n	80004bc <LoopFillZerobss>

080004b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004b8:	f842 3b04 	str.w	r3, [r2], #4

080004bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004c0:	d3f9      	bcc.n	80004b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004c2:	f7ff ffe9 	bl	8000498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004c6:	f002 ff8b 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff fe87 	bl	80001dc <main>
  bx lr
 80004ce:	4770      	bx	lr
  ldr r3, =_sidata
 80004d0:	08004264 	.word	0x08004264
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004d8:	200001c8 	.word	0x200001c8
  ldr r2, =_sbss
 80004dc:	200001c8 	.word	0x200001c8
  ldr r3, = _ebss
 80004e0:	20001210 	.word	0x20001210

080004e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e4:	e7fe      	b.n	80004e4 <ADC1_2_IRQHandler>
	...

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
{
 80004ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ee:	7818      	ldrb	r0, [r3, #0]
 80004f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f4:	fbb3 f3f0 	udiv	r3, r3, r0
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_InitTick+0x40>)
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 f89e 	bl	8000640 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 f854 	bl	80005c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4620      	mov	r0, r4
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
 8000522:	e7fc      	b.n	800051e <HAL_InitTick+0x36>
 8000524:	20000004 	.word	0x20000004
 8000528:	20000000 	.word	0x20000000
 800052c:	20000008 	.word	0x20000008

08000530 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_Init+0x20>)
{
 8000532:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000536:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000538:	f043 0310 	orr.w	r3, r3, #16
 800053c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053e:	f000 f82d 	bl	800059c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffd0 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f7ff ff0c 	bl	8000364 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40022000 	.word	0x40022000

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000a34 	.word	0x20000a34
 8000568:	20000004 	.word	0x20000004

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000a34 	.word	0x20000a34

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
 8000580:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000582:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000584:	bf1e      	ittt	ne
 8000586:	4b04      	ldrne	r3, [pc, #16]	; (8000598 <HAL_Delay+0x20>)
 8000588:	781b      	ldrbne	r3, [r3, #0]
 800058a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058c:	f7ff ffee 	bl	800056c <HAL_GetTick>
 8000590:	1b43      	subs	r3, r0, r5
 8000592:	42a3      	cmp	r3, r4
 8000594:	d3fa      	bcc.n	800058c <HAL_Delay+0x14>
  {
  }
}
 8000596:	bd38      	pop	{r3, r4, r5, pc}
 8000598:	20000004 	.word	0x20000004

0800059c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800059e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80005aa:	0412      	lsls	r2, r2, #16
 80005ac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	68dc      	ldr	r4, [r3, #12]
 80005c6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	bf28      	it	cs
 80005d4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005dc:	bf98      	it	ls
 80005de:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e4:	bf88      	it	hi
 80005e6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005e8:	ea21 0303 	bic.w	r3, r1, r3
 80005ec:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ee:	fa05 f404 	lsl.w	r4, r5, r4
 80005f2:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80005f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fc:	bfac      	ite	ge
 80005fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000602:	4a07      	ldrlt	r2, [pc, #28]	; (8000620 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000608:	b2db      	uxtb	r3, r3
 800060a:	bfab      	itete	ge
 800060c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	e000ed00 	.word	0xe000ed00
 8000620:	e000ed14 	.word	0xe000ed14

08000624 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000624:	2800      	cmp	r0, #0
 8000626:	db08      	blt.n	800063a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000628:	2301      	movs	r3, #1
 800062a:	0942      	lsrs	r2, r0, #5
 800062c:	f000 001f 	and.w	r0, r0, #31
 8000630:	fa03 f000 	lsl.w	r0, r3, r0
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_NVIC_EnableIRQ+0x18>)
 8000636:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800063a:	4770      	bx	lr
 800063c:	e000e100 	.word	0xe000e100

08000640 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000640:	3801      	subs	r0, #1
 8000642:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000646:	d20b      	bcs.n	8000660 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000648:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064c:	21f0      	movs	r1, #240	; 0xf0
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000656:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000658:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800065e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000660:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000662:	4770      	bx	lr
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000668:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800066a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800066e:	2b02      	cmp	r3, #2
 8000670:	d003      	beq.n	800067a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000672:	2304      	movs	r3, #4
 8000674:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000676:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000678:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800067a:	6803      	ldr	r3, [r0, #0]
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	f022 020e 	bic.w	r2, r2, #14
 8000682:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	f022 0201 	bic.w	r2, r2, #1
 800068a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800068c:	4a17      	ldr	r2, [pc, #92]	; (80006ec <HAL_DMA_Abort_IT+0x84>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d01c      	beq.n	80006cc <HAL_DMA_Abort_IT+0x64>
 8000692:	3214      	adds	r2, #20
 8000694:	4293      	cmp	r3, r2
 8000696:	d01b      	beq.n	80006d0 <HAL_DMA_Abort_IT+0x68>
 8000698:	3214      	adds	r2, #20
 800069a:	4293      	cmp	r3, r2
 800069c:	d01a      	beq.n	80006d4 <HAL_DMA_Abort_IT+0x6c>
 800069e:	3214      	adds	r2, #20
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d01a      	beq.n	80006da <HAL_DMA_Abort_IT+0x72>
 80006a4:	3214      	adds	r2, #20
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d01a      	beq.n	80006e0 <HAL_DMA_Abort_IT+0x78>
 80006aa:	3214      	adds	r2, #20
 80006ac:	4293      	cmp	r3, r2
 80006ae:	bf0c      	ite	eq
 80006b0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80006b4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <HAL_DMA_Abort_IT+0x88>)
 80006ba:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80006bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006c0:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80006c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80006c4:	b17b      	cbz	r3, 80006e6 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 80006c6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80006c8:	2000      	movs	r0, #0
 80006ca:	e7d5      	b.n	8000678 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80006cc:	2301      	movs	r3, #1
 80006ce:	e7f3      	b.n	80006b8 <HAL_DMA_Abort_IT+0x50>
 80006d0:	2310      	movs	r3, #16
 80006d2:	e7f1      	b.n	80006b8 <HAL_DMA_Abort_IT+0x50>
 80006d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d8:	e7ee      	b.n	80006b8 <HAL_DMA_Abort_IT+0x50>
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	e7eb      	b.n	80006b8 <HAL_DMA_Abort_IT+0x50>
 80006e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e4:	e7e8      	b.n	80006b8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 80006e6:	4618      	mov	r0, r3
 80006e8:	e7c6      	b.n	8000678 <HAL_DMA_Abort_IT+0x10>
 80006ea:	bf00      	nop
 80006ec:	40020008 	.word	0x40020008
 80006f0:	40020000 	.word	0x40020000

080006f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006f8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80006fa:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006fc:	4f61      	ldr	r7, [pc, #388]	; (8000884 <HAL_GPIO_Init+0x190>)
 80006fe:	4b62      	ldr	r3, [pc, #392]	; (8000888 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8000700:	f8df c188 	ldr.w	ip, [pc, #392]	; 800088c <HAL_GPIO_Init+0x198>
 8000704:	f8df e188 	ldr.w	lr, [pc, #392]	; 8000890 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000708:	680d      	ldr	r5, [r1, #0]
 800070a:	fa35 f406 	lsrs.w	r4, r5, r6
 800070e:	d102      	bne.n	8000716 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000710:	b003      	add	sp, #12
 8000712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000716:	f04f 0801 	mov.w	r8, #1
 800071a:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071e:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000722:	ea38 0505 	bics.w	r5, r8, r5
 8000726:	d177      	bne.n	8000818 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000728:	684d      	ldr	r5, [r1, #4]
 800072a:	2d03      	cmp	r5, #3
 800072c:	d807      	bhi.n	800073e <HAL_GPIO_Init+0x4a>
 800072e:	3d01      	subs	r5, #1
 8000730:	2d02      	cmp	r5, #2
 8000732:	f200 8082 	bhi.w	800083a <HAL_GPIO_Init+0x146>
 8000736:	e8df f005 	tbb	[pc, r5]
 800073a:	9792      	.short	0x9792
 800073c:	9d          	.byte	0x9d
 800073d:	00          	.byte	0x00
 800073e:	2d12      	cmp	r5, #18
 8000740:	f000 8095 	beq.w	800086e <HAL_GPIO_Init+0x17a>
 8000744:	d86a      	bhi.n	800081c <HAL_GPIO_Init+0x128>
 8000746:	2d11      	cmp	r5, #17
 8000748:	f000 808b 	beq.w	8000862 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800074c:	2cff      	cmp	r4, #255	; 0xff
 800074e:	bf98      	it	ls
 8000750:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000752:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000756:	bf88      	it	hi
 8000758:	f100 0a04 	addhi.w	sl, r0, #4
 800075c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000760:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000764:	bf88      	it	hi
 8000766:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000768:	fa09 fb05 	lsl.w	fp, r9, r5
 800076c:	ea28 080b 	bic.w	r8, r8, fp
 8000770:	fa02 f505 	lsl.w	r5, r2, r5
 8000774:	ea48 0505 	orr.w	r5, r8, r5
 8000778:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800077c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000780:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000784:	d048      	beq.n	8000818 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000786:	69bd      	ldr	r5, [r7, #24]
 8000788:	f026 0803 	bic.w	r8, r6, #3
 800078c:	f045 0501 	orr.w	r5, r5, #1
 8000790:	61bd      	str	r5, [r7, #24]
 8000792:	69bd      	ldr	r5, [r7, #24]
 8000794:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000798:	f005 0501 	and.w	r5, r5, #1
 800079c:	9501      	str	r5, [sp, #4]
 800079e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007a2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80007a6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80007ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80007b0:	fa09 f90b 	lsl.w	r9, r9, fp
 80007b4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80007b8:	4d36      	ldr	r5, [pc, #216]	; (8000894 <HAL_GPIO_Init+0x1a0>)
 80007ba:	42a8      	cmp	r0, r5
 80007bc:	d05e      	beq.n	800087c <HAL_GPIO_Init+0x188>
 80007be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c2:	42a8      	cmp	r0, r5
 80007c4:	d05c      	beq.n	8000880 <HAL_GPIO_Init+0x18c>
 80007c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007ca:	42a8      	cmp	r0, r5
 80007cc:	bf0c      	ite	eq
 80007ce:	2502      	moveq	r5, #2
 80007d0:	2503      	movne	r5, #3
 80007d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80007d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80007da:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80007de:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80007e4:	bf14      	ite	ne
 80007e6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80007e8:	43a5      	biceq	r5, r4
 80007ea:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80007ec:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80007f2:	bf14      	ite	ne
 80007f4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80007f6:	43a5      	biceq	r5, r4
 80007f8:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80007fa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000800:	bf14      	ite	ne
 8000802:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000804:	43a5      	biceq	r5, r4
 8000806:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000808:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800080a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800080e:	bf14      	ite	ne
 8000810:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000812:	ea25 0404 	biceq.w	r4, r5, r4
 8000816:	60dc      	str	r4, [r3, #12]
	position++;
 8000818:	3601      	adds	r6, #1
 800081a:	e775      	b.n	8000708 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 800081c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000898 <HAL_GPIO_Init+0x1a4>
 8000820:	454d      	cmp	r5, r9
 8000822:	d00a      	beq.n	800083a <HAL_GPIO_Init+0x146>
 8000824:	d815      	bhi.n	8000852 <HAL_GPIO_Init+0x15e>
 8000826:	4575      	cmp	r5, lr
 8000828:	d007      	beq.n	800083a <HAL_GPIO_Init+0x146>
 800082a:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 800082e:	454d      	cmp	r5, r9
 8000830:	d003      	beq.n	800083a <HAL_GPIO_Init+0x146>
 8000832:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000836:	454d      	cmp	r5, r9
 8000838:	d188      	bne.n	800074c <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800083a:	688a      	ldr	r2, [r1, #8]
 800083c:	b1e2      	cbz	r2, 8000878 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800083e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000840:	bf08      	it	eq
 8000842:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000846:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800084a:	bf18      	it	ne
 800084c:	f8c0 8014 	strne.w	r8, [r0, #20]
 8000850:	e77c      	b.n	800074c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000852:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800089c <HAL_GPIO_Init+0x1a8>
 8000856:	454d      	cmp	r5, r9
 8000858:	d0ef      	beq.n	800083a <HAL_GPIO_Init+0x146>
 800085a:	4565      	cmp	r5, ip
 800085c:	e7ec      	b.n	8000838 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800085e:	68ca      	ldr	r2, [r1, #12]
          break;
 8000860:	e774      	b.n	800074c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000862:	68ca      	ldr	r2, [r1, #12]
 8000864:	3204      	adds	r2, #4
          break;
 8000866:	e771      	b.n	800074c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000868:	68ca      	ldr	r2, [r1, #12]
 800086a:	3208      	adds	r2, #8
          break;
 800086c:	e76e      	b.n	800074c <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800086e:	68ca      	ldr	r2, [r1, #12]
 8000870:	320c      	adds	r2, #12
          break;
 8000872:	e76b      	b.n	800074c <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8000874:	2200      	movs	r2, #0
 8000876:	e769      	b.n	800074c <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000878:	2204      	movs	r2, #4
 800087a:	e767      	b.n	800074c <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800087c:	2500      	movs	r5, #0
 800087e:	e7a8      	b.n	80007d2 <HAL_GPIO_Init+0xde>
 8000880:	2501      	movs	r5, #1
 8000882:	e7a6      	b.n	80007d2 <HAL_GPIO_Init+0xde>
 8000884:	40021000 	.word	0x40021000
 8000888:	40010400 	.word	0x40010400
 800088c:	10320000 	.word	0x10320000
 8000890:	10120000 	.word	0x10120000
 8000894:	40010800 	.word	0x40010800
 8000898:	10220000 	.word	0x10220000
 800089c:	10310000 	.word	0x10310000

080008a0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008a0:	6883      	ldr	r3, [r0, #8]
 80008a2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008a4:	bf14      	ite	ne
 80008a6:	2001      	movne	r0, #1
 80008a8:	2000      	moveq	r0, #0
 80008aa:	4770      	bx	lr

080008ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008ac:	b10a      	cbz	r2, 80008b2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008ae:	6101      	str	r1, [r0, #16]
  }
}
 80008b0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80008b2:	0409      	lsls	r1, r1, #16
 80008b4:	e7fb      	b.n	80008ae <HAL_GPIO_WritePin+0x2>

080008b6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80008b6:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80008b8:	ea01 0203 	and.w	r2, r1, r3
 80008bc:	ea21 0103 	bic.w	r1, r1, r3
 80008c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80008c4:	6101      	str	r1, [r0, #16]
}
 80008c6:	4770      	bx	lr

080008c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80008c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80008ca:	4604      	mov	r4, r0
{
 80008cc:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80008ce:	b310      	cbz	r0, 8000916 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80008d0:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80008d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008d8:	b91b      	cbnz	r3, 80008e2 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80008da:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80008de:	f002 fc81 	bl	80031e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80008e2:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80008e4:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008e6:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 80008e8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80008ec:	f855 0b10 	ldr.w	r0, [r5], #16
 80008f0:	f001 fa7c 	bl	8001dec <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80008f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	1d27      	adds	r7, r4, #4
 80008fc:	6033      	str	r3, [r6, #0]
 80008fe:	4626      	mov	r6, r4
 8000900:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000904:	f856 0b10 	ldr.w	r0, [r6], #16
 8000908:	f001 fa60 	bl	8001dcc <USB_CoreInit>
 800090c:	4605      	mov	r5, r0
 800090e:	b120      	cbz	r0, 800091a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000910:	2302      	movs	r3, #2
 8000912:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000916:	2501      	movs	r5, #1
 8000918:	e04c      	b.n	80009b4 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800091a:	4601      	mov	r1, r0
 800091c:	6820      	ldr	r0, [r4, #0]
 800091e:	f001 fa6f 	bl	8001e00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000922:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000924:	f04f 0e01 	mov.w	lr, #1
 8000928:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800092a:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800092c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000930:	b2ca      	uxtb	r2, r1
 8000932:	4594      	cmp	ip, r2
 8000934:	f101 0101 	add.w	r1, r1, #1
 8000938:	d81b      	bhi.n	8000972 <HAL_PCD_Init+0xaa>
 800093a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800093c:	2528      	movs	r5, #40	; 0x28
 800093e:	4619      	mov	r1, r3
 8000940:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000942:	4584      	cmp	ip, r0
 8000944:	f103 0301 	add.w	r3, r3, #1
 8000948:	d820      	bhi.n	800098c <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800094a:	46ec      	mov	ip, sp
 800094c:	4635      	mov	r5, r6
 800094e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000950:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	f8cc 3000 	str.w	r3, [ip]
 800095a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800095e:	6820      	ldr	r0, [r4, #0]
 8000960:	f001 fa50 	bl	8001e04 <USB_DevInit>
 8000964:	2301      	movs	r3, #1
 8000966:	4605      	mov	r5, r0
 8000968:	b1e8      	cbz	r0, 80009a6 <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800096a:	2202      	movs	r2, #2
 800096c:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8000970:	e7d1      	b.n	8000916 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8000972:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000976:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 800097a:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800097e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000982:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000984:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8000988:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800098a:	e7d1      	b.n	8000930 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 800098c:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000990:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 8000994:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8000998:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800099c:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80009a0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80009a4:	e7cc      	b.n	8000940 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80009a6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80009aa:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80009ac:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80009b0:	f001 fcba 	bl	8002328 <USB_DevDisconnect>

  return HAL_OK;
}
 80009b4:	4628      	mov	r0, r5
 80009b6:	b007      	add	sp, #28
 80009b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80009ba:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80009bc:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80009c0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d010      	beq.n	80009e8 <HAL_PCD_Start+0x2e>
 80009c6:	2501      	movs	r5, #1
 80009c8:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80009cc:	6800      	ldr	r0, [r0, #0]
 80009ce:	f001 fa04 	bl	8001dda <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80009d2:	4629      	mov	r1, r5
 80009d4:	4620      	mov	r0, r4
 80009d6:	f002 fcfc 	bl	80033d2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80009da:	6820      	ldr	r0, [r4, #0]
 80009dc:	f001 fca2 	bl	8002324 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80009e6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80009e8:	2002      	movs	r0, #2
 80009ea:	e7fc      	b.n	80009e6 <HAL_PCD_Start+0x2c>

080009ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80009ec:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80009ee:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 80009f2:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80009f4:	2a01      	cmp	r2, #1
 80009f6:	d00b      	beq.n	8000a10 <HAL_PCD_SetAddress+0x24>
 80009f8:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80009fa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80009fe:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000a02:	6800      	ldr	r0, [r0, #0]
 8000a04:	f001 fc88 	bl	8002318 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8000a0e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000a10:	2002      	movs	r0, #2
 8000a12:	e7fc      	b.n	8000a0e <HAL_PCD_SetAddress+0x22>

08000a14 <HAL_PCD_IRQHandler>:
{
 8000a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a18:	4604      	mov	r4, r0
 8000a1a:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000a1c:	6800      	ldr	r0, [r0, #0]
 8000a1e:	f001 fc85 	bl	800232c <USB_ReadInterrupts>
 8000a22:	0402      	lsls	r2, r0, #16
 8000a24:	d509      	bpl.n	8000a3a <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a26:	f8df 9314 	ldr.w	r9, [pc, #788]	; 8000d3c <HAL_PCD_IRQHandler+0x328>
 8000a2a:	f8df 8314 	ldr.w	r8, [pc, #788]	; 8000d40 <HAL_PCD_IRQHandler+0x32c>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000a2e:	6820      	ldr	r0, [r4, #0]
 8000a30:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000a34:	041d      	lsls	r5, r3, #16
 8000a36:	f100 80c1 	bmi.w	8000bbc <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000a3a:	6820      	ldr	r0, [r4, #0]
 8000a3c:	f001 fc76 	bl	800232c <USB_ReadInterrupts>
 8000a40:	0543      	lsls	r3, r0, #21
 8000a42:	d50f      	bpl.n	8000a64 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a44:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8000a46:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000a48:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a50:	041b      	lsls	r3, r3, #16
 8000a52:	0c1b      	lsrs	r3, r3, #16
 8000a54:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000a58:	f002 fbff 	bl	800325a <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4620      	mov	r0, r4
 8000a60:	f7ff ffc4 	bl	80009ec <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000a64:	6820      	ldr	r0, [r4, #0]
 8000a66:	f001 fc61 	bl	800232c <USB_ReadInterrupts>
 8000a6a:	0441      	lsls	r1, r0, #17
 8000a6c:	d508      	bpl.n	8000a80 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000a6e:	6822      	ldr	r2, [r4, #0]
 8000a70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	0c1b      	lsrs	r3, r3, #16
 8000a7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000a80:	6820      	ldr	r0, [r4, #0]
 8000a82:	f001 fc53 	bl	800232c <USB_ReadInterrupts>
 8000a86:	0482      	lsls	r2, r0, #18
 8000a88:	d508      	bpl.n	8000a9c <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000a8a:	6822      	ldr	r2, [r4, #0]
 8000a8c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000a90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000a9c:	6820      	ldr	r0, [r4, #0]
 8000a9e:	f001 fc45 	bl	800232c <USB_ReadInterrupts>
 8000aa2:	04c3      	lsls	r3, r0, #19
 8000aa4:	d51c      	bpl.n	8000ae0 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000aa6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000aa8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000aaa:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000aae:	f023 0304 	bic.w	r3, r3, #4
 8000ab2:	041b      	lsls	r3, r3, #16
 8000ab4:	0c1b      	lsrs	r3, r3, #16
 8000ab6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000aba:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8000abe:	f023 0308 	bic.w	r3, r3, #8
 8000ac2:	041b      	lsls	r3, r3, #16
 8000ac4:	0c1b      	lsrs	r3, r3, #16
 8000ac6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000aca:	f002 fbe9 	bl	80032a0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ace:	6822      	ldr	r2, [r4, #0]
 8000ad0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000ad4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ad8:	041b      	lsls	r3, r3, #16
 8000ada:	0c1b      	lsrs	r3, r3, #16
 8000adc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ae0:	6820      	ldr	r0, [r4, #0]
 8000ae2:	f001 fc23 	bl	800232c <USB_ReadInterrupts>
 8000ae6:	0507      	lsls	r7, r0, #20
 8000ae8:	d546      	bpl.n	8000b78 <HAL_PCD_IRQHandler+0x164>
 8000aea:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	4606      	mov	r6, r0
 8000af0:	4619      	mov	r1, r3
 8000af2:	461a      	mov	r2, r3
 8000af4:	f103 0520 	add.w	r5, r3, #32
 8000af8:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8000afc:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000afe:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8000b02:	d1f9      	bne.n	8000af8 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000b04:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000b08:	b292      	uxth	r2, r2
 8000b0a:	f042 0201 	orr.w	r2, r2, #1
 8000b0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000b12:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000b16:	f022 0201 	bic.w	r2, r2, #1
 8000b1a:	0412      	lsls	r2, r2, #16
 8000b1c:	0c12      	lsrs	r2, r2, #16
 8000b1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000b22:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000b26:	0556      	lsls	r6, r2, #21
 8000b28:	d5fb      	bpl.n	8000b22 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b2a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b32:	0412      	lsls	r2, r2, #16
 8000b34:	0c12      	lsrs	r2, r2, #16
 8000b36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000b3a:	f830 2b02 	ldrh.w	r2, [r0], #2
 8000b3e:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8000b42:	428d      	cmp	r5, r1
 8000b44:	d1f9      	bne.n	8000b3a <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b46:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000b4a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000b4c:	b292      	uxth	r2, r2
 8000b4e:	f042 0208 	orr.w	r2, r2, #8
 8000b52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000b56:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b5e:	0412      	lsls	r2, r2, #16
 8000b60:	0c12      	lsrs	r2, r2, #16
 8000b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000b66:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000b6a:	b292      	uxth	r2, r2
 8000b6c:	f042 0204 	orr.w	r2, r2, #4
 8000b70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8000b74:	f002 fb84 	bl	8003280 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	f001 fbd7 	bl	800232c <USB_ReadInterrupts>
 8000b7e:	0582      	lsls	r2, r0, #22
 8000b80:	d50b      	bpl.n	8000b9a <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b82:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000b84:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000b86:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000b8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b8e:	041b      	lsls	r3, r3, #16
 8000b90:	0c1b      	lsrs	r3, r3, #16
 8000b92:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000b96:	f002 fb5c 	bl	8003252 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000b9a:	6820      	ldr	r0, [r4, #0]
 8000b9c:	f001 fbc6 	bl	800232c <USB_ReadInterrupts>
 8000ba0:	05c3      	lsls	r3, r0, #23
 8000ba2:	d508      	bpl.n	8000bb6 <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000ba4:	6822      	ldr	r2, [r4, #0]
 8000ba6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bae:	041b      	lsls	r3, r3, #16
 8000bb0:	0c1b      	lsrs	r3, r3, #16
 8000bb2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000bb6:	b005      	add	sp, #20
 8000bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8000bbc:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8000bc0:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8000bc2:	f016 060f 	ands.w	r6, r6, #15
 8000bc6:	f040 80bd 	bne.w	8000d44 <HAL_PCD_IRQHandler+0x330>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000bca:	f011 0110 	ands.w	r1, r1, #16
 8000bce:	d12d      	bne.n	8000c2c <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000bd0:	8803      	ldrh	r3, [r0, #0]
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	ea03 0309 	and.w	r3, r3, r9
 8000bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bdc:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bde:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000be2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000bec:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8000bf0:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000bf4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000bfa:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000bfc:	4413      	add	r3, r2
 8000bfe:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000c00:	4620      	mov	r0, r4
 8000c02:	f002 fb1e 	bl	8003242 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000c06:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f43f af0f 	beq.w	8000a2e <HAL_PCD_IRQHandler+0x1a>
 8000c10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f47f af0b 	bne.w	8000a2e <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000c18:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000c1c:	6821      	ldr	r1, [r4, #0]
 8000c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c22:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000c26:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000c2a:	e700      	b.n	8000a2e <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000c2c:	8805      	ldrh	r5, [r0, #0]
 8000c2e:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000c30:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8000c34:	d021      	beq.n	8000c7a <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c36:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c3a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c44:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000c48:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000c4c:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000c50:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c54:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000c58:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8000c5c:	f001 fdb8 	bl	80027d0 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c60:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000c62:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c64:	8813      	ldrh	r3, [r2, #0]
 8000c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c6a:	051b      	lsls	r3, r3, #20
 8000c6c:	0d1b      	lsrs	r3, r3, #20
 8000c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c72:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000c74:	f002 fad6 	bl	8003224 <HAL_PCD_SetupStageCallback>
 8000c78:	e6d9      	b.n	8000a2e <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000c7a:	041f      	lsls	r7, r3, #16
 8000c7c:	f57f aed7 	bpl.w	8000a2e <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000c80:	8803      	ldrh	r3, [r0, #0]
 8000c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c86:	051b      	lsls	r3, r3, #20
 8000c88:	0d1b      	lsrs	r3, r3, #20
 8000c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8e:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000c90:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000c94:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000c9e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000ca2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8000ca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000caa:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000cae:	b18b      	cbz	r3, 8000cd4 <HAL_PCD_IRQHandler+0x2c0>
 8000cb0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8000cb4:	b171      	cbz	r1, 8000cd4 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000cb6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8000cba:	f001 fd89 	bl	80027d0 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8000cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8000cc2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000cc6:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8000cc8:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000cca:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8000ccc:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000cd0:	f002 faae 	bl	8003230 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000cd4:	6821      	ldr	r1, [r4, #0]
 8000cd6:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8000cda:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8000cde:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	b9cd      	cbnz	r5, 8000d1a <HAL_PCD_IRQHandler+0x306>
 8000ce6:	5ac2      	ldrh	r2, [r0, r3]
 8000ce8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8000cec:	0412      	lsls	r2, r2, #16
 8000cee:	0c12      	lsrs	r2, r2, #16
 8000cf0:	52c2      	strh	r2, [r0, r3]
 8000cf2:	5ac2      	ldrh	r2, [r0, r3]
 8000cf4:	b292      	uxth	r2, r2
 8000cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cfa:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000cfc:	880b      	ldrh	r3, [r1, #0]
 8000cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d06:	041b      	lsls	r3, r3, #16
 8000d08:	0c1b      	lsrs	r3, r3, #16
 8000d0a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d16:	800b      	strh	r3, [r1, #0]
 8000d18:	e689      	b.n	8000a2e <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000d1a:	2d3e      	cmp	r5, #62	; 0x3e
 8000d1c:	d806      	bhi.n	8000d2c <HAL_PCD_IRQHandler+0x318>
 8000d1e:	086a      	lsrs	r2, r5, #1
 8000d20:	07ee      	lsls	r6, r5, #31
 8000d22:	bf48      	it	mi
 8000d24:	3201      	addmi	r2, #1
 8000d26:	0292      	lsls	r2, r2, #10
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	e7e6      	b.n	8000cfa <HAL_PCD_IRQHandler+0x2e6>
 8000d2c:	096a      	lsrs	r2, r5, #5
 8000d2e:	06ed      	lsls	r5, r5, #27
 8000d30:	bf08      	it	eq
 8000d32:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000d36:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8000d3a:	e7f5      	b.n	8000d28 <HAL_PCD_IRQHandler+0x314>
 8000d3c:	ffff8f0f 	.word	0xffff8f0f
 8000d40:	ffff8000 	.word	0xffff8000
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000d44:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d48:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000d4a:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000d4c:	f140 80ee 	bpl.w	8000f2c <HAL_PCD_IRQHandler+0x518>
        if (ep->doublebuffer == 0U)
 8000d50:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000d52:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000d56:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d5e:	051b      	lsls	r3, r3, #20
 8000d60:	0d1b      	lsrs	r3, r3, #20
 8000d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d66:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8000d6a:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8000d6e:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8000d72:	b9b3      	cbnz	r3, 8000da2 <HAL_PCD_IRQHandler+0x38e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000d74:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000d78:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	3306      	adds	r3, #6
 8000d80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000d84:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8000d88:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	f000 80b1 	beq.w	8000ef4 <HAL_PCD_IRQHandler+0x4e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000d92:	462b      	mov	r3, r5
 8000d94:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000d98:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8000d9c:	f001 fd18 	bl	80027d0 <USB_ReadPMA>
 8000da0:	e0a8      	b.n	8000ef4 <HAL_PCD_IRQHandler+0x4e0>
          if (ep->type == EP_TYPE_BULK)
 8000da2:	f891 216b 	ldrb.w	r2, [r1, #363]	; 0x16b
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000da6:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
          if (ep->type == EP_TYPE_BULK)
 8000daa:	2a02      	cmp	r2, #2
 8000dac:	f040 8081 	bne.w	8000eb2 <HAL_PCD_IRQHandler+0x49e>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000db0:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000db4:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000

    if (ep->xfer_len >= count)
 8000db8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000dbc:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000dc0:	b2ad      	uxth	r5, r5
 8000dc2:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8000dc6:	d03b      	beq.n	8000e40 <HAL_PCD_IRQHandler+0x42c>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000dc8:	44ab      	add	fp, r5
 8000dca:	f10b 0b02 	add.w	fp, fp, #2
 8000dce:	f83c 501b 	ldrh.w	r5, [ip, fp, lsl #1]
 8000dd2:	f3c5 0509 	ubfx	r5, r5, #0, #10
    if (ep->xfer_len >= count)
 8000dd6:	4295      	cmp	r5, r2
 8000dd8:	d913      	bls.n	8000e02 <HAL_PCD_IRQHandler+0x3ee>
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000de0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000de4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000de8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dec:	0412      	lsls	r2, r2, #16
 8000dee:	0c12      	lsrs	r2, r2, #16
 8000df0:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000df4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dfc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8000e00:	e004      	b.n	8000e0c <HAL_PCD_IRQHandler+0x3f8>
      ep->xfer_len -= count;
 8000e02:	1b52      	subs	r2, r2, r5
 8000e04:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8000e08:	2a00      	cmp	r2, #0
 8000e0a:	d0e9      	beq.n	8000de0 <HAL_PCD_IRQHandler+0x3cc>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000e0c:	f1be 0f00 	cmp.w	lr, #0
 8000e10:	d00d      	beq.n	8000e2e <HAL_PCD_IRQHandler+0x41a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000e12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000e16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000e1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e1e:	0412      	lsls	r2, r2, #16
 8000e20:	0c12      	lsrs	r2, r2, #16
 8000e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e26:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000e2a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8000e2e:	2d00      	cmp	r5, #0
 8000e30:	d060      	beq.n	8000ef4 <HAL_PCD_IRQHandler+0x4e0>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000e32:	2128      	movs	r1, #40	; 0x28
 8000e34:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000e38:	462b      	mov	r3, r5
 8000e3a:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8000e3e:	e7ab      	b.n	8000d98 <HAL_PCD_IRQHandler+0x384>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000e40:	445d      	add	r5, fp
 8000e42:	3506      	adds	r5, #6
 8000e44:	f83c 5015 	ldrh.w	r5, [ip, r5, lsl #1]
 8000e48:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8000e4c:	4295      	cmp	r5, r2
 8000e4e:	d912      	bls.n	8000e76 <HAL_PCD_IRQHandler+0x462>
 8000e50:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8000e54:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000e58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e60:	0412      	lsls	r2, r2, #16
 8000e62:	0c12      	lsrs	r2, r2, #16
 8000e64:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000e68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e70:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
 8000e74:	e004      	b.n	8000e80 <HAL_PCD_IRQHandler+0x46c>
      ep->xfer_len -= count;
 8000e76:	1b52      	subs	r2, r2, r5
 8000e78:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8000e7c:	2a00      	cmp	r2, #0
 8000e7e:	d0e9      	beq.n	8000e54 <HAL_PCD_IRQHandler+0x440>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8000e80:	f1be 0f00 	cmp.w	lr, #0
 8000e84:	d10d      	bne.n	8000ea2 <HAL_PCD_IRQHandler+0x48e>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000e86:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000e8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000e8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e92:	0412      	lsls	r2, r2, #16
 8000e94:	0c12      	lsrs	r2, r2, #16
 8000e96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e9a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000e9e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }

    if (count != 0U)
 8000ea2:	b33d      	cbz	r5, 8000ef4 <HAL_PCD_IRQHandler+0x4e0>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ea4:	2128      	movs	r1, #40	; 0x28
 8000ea6:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000eaa:	462b      	mov	r3, r5
 8000eac:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8000eb0:	e772      	b.n	8000d98 <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8000eb2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000eb6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000eba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ebe:	0412      	lsls	r2, r2, #16
 8000ec0:	0c12      	lsrs	r2, r2, #16
 8000ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ec6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8000eca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000ece:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8000ed2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000edc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000ee0:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8000ee2:	d053      	beq.n	8000f8c <HAL_PCD_IRQHandler+0x578>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000ee4:	3202      	adds	r2, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8000eec:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d1a1      	bne.n	8000e38 <HAL_PCD_IRQHandler+0x424>
        ep->xfer_count += count;
 8000ef4:	2128      	movs	r1, #40	; 0x28
 8000ef6:	4371      	muls	r1, r6
 8000ef8:	1863      	adds	r3, r4, r1
 8000efa:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8000efe:	442a      	add	r2, r5
 8000f00:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8000f04:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000f08:	442a      	add	r2, r5
 8000f0a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8000f0e:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000f12:	b11a      	cbz	r2, 8000f1c <HAL_PCD_IRQHandler+0x508>
 8000f14:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8000f18:	429d      	cmp	r5, r3
 8000f1a:	d240      	bcs.n	8000f9e <HAL_PCD_IRQHandler+0x58a>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	fb03 4306 	mla	r3, r3, r6, r4
 8000f22:	4620      	mov	r0, r4
 8000f24:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8000f28:	f002 f982 	bl	8003230 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000f2c:	063a      	lsls	r2, r7, #24
 8000f2e:	f57f ad7e 	bpl.w	8000a2e <HAL_PCD_IRQHandler+0x1a>
 8000f32:	2528      	movs	r5, #40	; 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000f34:	6820      	ldr	r0, [r4, #0]
 8000f36:	fb05 4506 	mla	r5, r5, r6, r4
 8000f3a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8000f3e:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	ea03 0309 	and.w	r3, r3, r9
 8000f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f4c:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8000f50:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8000f54:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d101      	bne.n	8000f60 <HAL_PCD_IRQHandler+0x54c>
 8000f5c:	05fb      	lsls	r3, r7, #23
 8000f5e:	d436      	bmi.n	8000fce <HAL_PCD_IRQHandler+0x5ba>
          if (ep->xfer_len > TxByteNbre)
 8000f60:	2528      	movs	r5, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f62:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8000f66:	fb05 4306 	mla	r3, r5, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000f6a:	b292      	uxth	r2, r2
 8000f6c:	3202      	adds	r2, #2
 8000f6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8000f72:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8000f76:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8000f78:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000f7c:	4567      	cmp	r7, ip
 8000f7e:	d815      	bhi.n	8000fac <HAL_PCD_IRQHandler+0x598>
 8000f80:	2200      	movs	r2, #0
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000f84:	4620      	mov	r0, r4
 8000f86:	f002 f95c 	bl	8003242 <HAL_PCD_DataInStageCallback>
 8000f8a:	e550      	b.n	8000a2e <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000f8c:	3206      	adds	r2, #6
 8000f8e:	4413      	add	r3, r2
 8000f90:	f83c 5013 	ldrh.w	r5, [ip, r3, lsl #1]
 8000f94:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8000f98:	2d00      	cmp	r5, #0
 8000f9a:	d0ab      	beq.n	8000ef4 <HAL_PCD_IRQHandler+0x4e0>
 8000f9c:	e785      	b.n	8000eaa <HAL_PCD_IRQHandler+0x496>
        ep = &hpcd->OUT_ep[epindex];
 8000f9e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8000fa2:	6820      	ldr	r0, [r4, #0]
 8000fa4:	4421      	add	r1, r4
 8000fa6:	f001 f9d7 	bl	8002358 <USB_EPStartXfer>
 8000faa:	e7bf      	b.n	8000f2c <HAL_PCD_IRQHandler+0x518>
            ep->xfer_len -= TxByteNbre;
 8000fac:	eba7 070c 	sub.w	r7, r7, ip
 8000fb0:	641f      	str	r7, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8000fb2:	2f00      	cmp	r7, #0
 8000fb4:	d0e6      	beq.n	8000f84 <HAL_PCD_IRQHandler+0x570>
        ep = &hpcd->IN_ep[epindex];
 8000fb6:	fb06 5505 	mla	r5, r6, r5, r5
            ep->xfer_buff += TxByteNbre;
 8000fba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8000fbe:	4461      	add	r1, ip
            ep->xfer_count += TxByteNbre;
 8000fc0:	4462      	add	r2, ip
            ep->xfer_buff += TxByteNbre;
 8000fc2:	63d9      	str	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000fc6:	1961      	adds	r1, r4, r5
 8000fc8:	f001 f9c6 	bl	8002358 <USB_EPStartXfer>
 8000fcc:	e52f      	b.n	8000a2e <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000fd2:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8000fd6:	b292      	uxth	r2, r2
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000fd8:	f017 0e40 	ands.w	lr, r7, #64	; 0x40

    if (ep->xfer_len > TxByteNbre)
 8000fdc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fde:	4452      	add	r2, sl
 8000fe0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8000fe4:	f000 80a7 	beq.w	8001136 <HAL_PCD_IRQHandler+0x722>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000fe8:	3202      	adds	r2, #2
 8000fea:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
 8000fee:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len > TxByteNbre)
 8000ff0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8000ff4:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8000ff6:	bf28      	it	cs
 8000ff8:	2300      	movcs	r3, #0
 8000ffa:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8000ffe:	bf38      	it	cc
 8001000:	eba3 030c 	subcc.w	r3, r3, ip
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001006:	b2bf      	uxth	r7, r7
 8001008:	b9bb      	cbnz	r3, 800103a <HAL_PCD_IRQHandler+0x626>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800100a:	4620      	mov	r0, r4
 800100c:	f002 f919 	bl	8003242 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001010:	2f00      	cmp	r7, #0
 8001012:	f000 80a7 	beq.w	8001164 <HAL_PCD_IRQHandler+0x750>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001016:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001034:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001038:	e094      	b.n	8001164 <HAL_PCD_IRQHandler+0x750>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800103a:	b16f      	cbz	r7, 8001058 <HAL_PCD_IRQHandler+0x644>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800103c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001048:	041b      	lsls	r3, r3, #16
 800104a:	0c1b      	lsrs	r3, r3, #16
 800104c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001058:	2328      	movs	r3, #40	; 0x28
 800105a:	fb03 4306 	mla	r3, r3, r6, r4
 800105e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8001062:	2a01      	cmp	r2, #1
 8001064:	d17e      	bne.n	8001164 <HAL_PCD_IRQHandler+0x750>
        ep->xfer_buff += TxByteNbre;
 8001066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8001068:	f8d3 e048 	ldr.w	lr, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 800106c:	eb02 070c 	add.w	r7, r2, ip
        ep->xfer_count += TxByteNbre;
 8001070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8001072:	63df      	str	r7, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8001074:	4462      	add	r2, ip
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800107a:	4596      	cmp	lr, r2
 800107c:	d329      	bcc.n	80010d2 <HAL_PCD_IRQHandler+0x6be>
          ep->xfer_len_db -= len;
 800107e:	ebae 0e02 	sub.w	lr, lr, r2
 8001082:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001086:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 800108a:	b293      	uxth	r3, r2
 800108c:	f1bc 0f00 	cmp.w	ip, #0
 8001090:	d144      	bne.n	800111c <HAL_PCD_IRQHandler+0x708>
 8001092:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8001096:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 800109a:	fa1f fc8c 	uxth.w	ip, ip
 800109e:	44f4      	add	ip, lr
 80010a0:	0109      	lsls	r1, r1, #4
 80010a2:	bb1a      	cbnz	r2, 80010ec <HAL_PCD_IRQHandler+0x6d8>
 80010a4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80010a8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80010ac:	0412      	lsls	r2, r2, #16
 80010ae:	0c12      	lsrs	r2, r2, #16
 80010b0:	f82c 2001 	strh.w	r2, [ip, r1]
 80010b4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80010b8:	b292      	uxth	r2, r2
 80010ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010be:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80010c2:	2128      	movs	r1, #40	; 0x28
 80010c4:	fb01 4606 	mla	r6, r1, r6, r4
 80010c8:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80010ca:	4639      	mov	r1, r7
 80010cc:	f001 f934 	bl	8002338 <USB_WritePMA>
 80010d0:	e048      	b.n	8001164 <HAL_PCD_IRQHandler+0x750>
        else if (ep->xfer_len_db == 0U)
 80010d2:	f1be 0f00 	cmp.w	lr, #0
 80010d6:	d103      	bne.n	80010e0 <HAL_PCD_IRQHandler+0x6cc>
    if (ep->xfer_len > TxByteNbre)
 80010d8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80010da:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
 80010de:	e7d2      	b.n	8001086 <HAL_PCD_IRQHandler+0x672>
          ep->xfer_fill_db = 0U;
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 80010e6:	649a      	str	r2, [r3, #72]	; 0x48
 80010e8:	4672      	mov	r2, lr
 80010ea:	e7cc      	b.n	8001086 <HAL_PCD_IRQHandler+0x672>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80010ec:	2a3e      	cmp	r2, #62	; 0x3e
 80010ee:	d80c      	bhi.n	800110a <HAL_PCD_IRQHandler+0x6f6>
 80010f0:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80010f4:	07d2      	lsls	r2, r2, #31
 80010f6:	bf48      	it	mi
 80010f8:	f10e 0e01 	addmi.w	lr, lr, #1
 80010fc:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8001100:	fa1f fe8e 	uxth.w	lr, lr
 8001104:	f82c e001 	strh.w	lr, [ip, r1]
 8001108:	e7db      	b.n	80010c2 <HAL_PCD_IRQHandler+0x6ae>
 800110a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800110e:	06d2      	lsls	r2, r2, #27
 8001110:	bf08      	it	eq
 8001112:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8001116:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800111a:	e7f1      	b.n	8001100 <HAL_PCD_IRQHandler+0x6ec>
 800111c:	f1bc 0f01 	cmp.w	ip, #1
 8001120:	d1cf      	bne.n	80010c2 <HAL_PCD_IRQHandler+0x6ae>
 8001122:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001126:	0109      	lsls	r1, r1, #4
 8001128:	fa1f fc82 	uxth.w	ip, r2
 800112c:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8001130:	4462      	add	r2, ip
 8001132:	5253      	strh	r3, [r2, r1]
 8001134:	e7c5      	b.n	80010c2 <HAL_PCD_IRQHandler+0x6ae>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001136:	3206      	adds	r2, #6
 8001138:	f83c c012 	ldrh.w	ip, [ip, r2, lsl #1]
 800113c:	2228      	movs	r2, #40	; 0x28
    if (ep->xfer_len >= TxByteNbre)
 800113e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001142:	459c      	cmp	ip, r3
      ep->xfer_len = 0U;
 8001144:	bf88      	it	hi
 8001146:	4673      	movhi	r3, lr
 8001148:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 800114c:	bf98      	it	ls
 800114e:	eba3 030c 	subls.w	r3, r3, ip
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001154:	b2bf      	uxth	r7, r7
 8001156:	b9c3      	cbnz	r3, 800118a <HAL_PCD_IRQHandler+0x776>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001158:	4620      	mov	r0, r4
 800115a:	f002 f872 	bl	8003242 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800115e:	2f00      	cmp	r7, #0
 8001160:	f43f af59 	beq.w	8001016 <HAL_PCD_IRQHandler+0x602>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001164:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001168:	6822      	ldr	r2, [r4, #0]
 800116a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001178:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800117c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001184:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001188:	e451      	b.n	8000a2e <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800118a:	b96f      	cbnz	r7, 80011a8 <HAL_PCD_IRQHandler+0x794>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800118c:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001198:	041b      	lsls	r3, r3, #16
 800119a:	0c1b      	lsrs	r3, r3, #16
 800119c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80011a8:	2228      	movs	r2, #40	; 0x28
 80011aa:	fb02 4206 	mla	r2, r2, r6, r4
 80011ae:	f892 304c 	ldrb.w	r3, [r2, #76]	; 0x4c
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d1d6      	bne.n	8001164 <HAL_PCD_IRQHandler+0x750>
        ep->xfer_count += TxByteNbre;
 80011b6:	6c53      	ldr	r3, [r2, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80011b8:	6bd7      	ldr	r7, [r2, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80011ba:	4463      	add	r3, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80011bc:	f8d2 e048 	ldr.w	lr, [r2, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80011c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80011c4:	4467      	add	r7, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 80011c6:	459e      	cmp	lr, r3
        ep->xfer_buff += TxByteNbre;
 80011c8:	63d7      	str	r7, [r2, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 80011ca:	d322      	bcc.n	8001212 <HAL_PCD_IRQHandler+0x7fe>
          ep->xfer_len_db -= len;
 80011cc:	ebae 0e03 	sub.w	lr, lr, r3
 80011d0:	f8c2 e048 	str.w	lr, [r2, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80011d4:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 80011d8:	fa1f fc83 	uxth.w	ip, r3
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d13d      	bne.n	800125c <HAL_PCD_IRQHandler+0x848>
 80011e0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80011e4:	f200 4e0c 	addw	lr, r0, #1036	; 0x40c
 80011e8:	b292      	uxth	r2, r2
 80011ea:	4472      	add	r2, lr
 80011ec:	0109      	lsls	r1, r1, #4
 80011ee:	b9eb      	cbnz	r3, 800122c <HAL_PCD_IRQHandler+0x818>
 80011f0:	5a53      	ldrh	r3, [r2, r1]
 80011f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80011f6:	041b      	lsls	r3, r3, #16
 80011f8:	0c1b      	lsrs	r3, r3, #16
 80011fa:	5253      	strh	r3, [r2, r1]
 80011fc:	5a53      	ldrh	r3, [r2, r1]
 80011fe:	b29b      	uxth	r3, r3
 8001200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001204:	5253      	strh	r3, [r2, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8001206:	2128      	movs	r1, #40	; 0x28
 8001208:	fb01 4606 	mla	r6, r1, r6, r4
 800120c:	4663      	mov	r3, ip
 800120e:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8001210:	e75b      	b.n	80010ca <HAL_PCD_IRQHandler+0x6b6>
        else if (ep->xfer_len_db == 0U)
 8001212:	f1be 0f00 	cmp.w	lr, #0
 8001216:	d103      	bne.n	8001220 <HAL_PCD_IRQHandler+0x80c>
    if (ep->xfer_len >= TxByteNbre)
 8001218:	4663      	mov	r3, ip
          ep->xfer_fill_db = 0U;
 800121a:	f882 e04c 	strb.w	lr, [r2, #76]	; 0x4c
 800121e:	e7d9      	b.n	80011d4 <HAL_PCD_IRQHandler+0x7c0>
          ep->xfer_len_db = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	6493      	str	r3, [r2, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8001224:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
 8001228:	4673      	mov	r3, lr
 800122a:	e7d3      	b.n	80011d4 <HAL_PCD_IRQHandler+0x7c0>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800122c:	2b3e      	cmp	r3, #62	; 0x3e
 800122e:	d80c      	bhi.n	800124a <HAL_PCD_IRQHandler+0x836>
 8001230:	ea4f 0e53 	mov.w	lr, r3, lsr #1
 8001234:	07db      	lsls	r3, r3, #31
 8001236:	bf48      	it	mi
 8001238:	f10e 0e01 	addmi.w	lr, lr, #1
 800123c:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8001240:	fa1f fe8e 	uxth.w	lr, lr
 8001244:	f822 e001 	strh.w	lr, [r2, r1]
 8001248:	e7dd      	b.n	8001206 <HAL_PCD_IRQHandler+0x7f2>
 800124a:	ea4f 1e53 	mov.w	lr, r3, lsr #5
 800124e:	06db      	lsls	r3, r3, #27
 8001250:	bf08      	it	eq
 8001252:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8001256:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800125a:	e7f1      	b.n	8001240 <HAL_PCD_IRQHandler+0x82c>
 800125c:	2a01      	cmp	r2, #1
 800125e:	d1d2      	bne.n	8001206 <HAL_PCD_IRQHandler+0x7f2>
 8001260:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001264:	b29a      	uxth	r2, r3
 8001266:	f200 430c 	addw	r3, r0, #1036	; 0x40c
 800126a:	4413      	add	r3, r2
 800126c:	010a      	lsls	r2, r1, #4
 800126e:	f823 c002 	strh.w	ip, [r3, r2]
 8001272:	e7c8      	b.n	8001206 <HAL_PCD_IRQHandler+0x7f2>

08001274 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8001274:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	4605      	mov	r5, r0
 800127c:	f04f 0428 	mov.w	r4, #40	; 0x28
 8001280:	f001 0007 	and.w	r0, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 8001284:	d01c      	beq.n	80012c0 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8001286:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001288:	fb00 4104 	mla	r1, r0, r4, r4
 800128c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800128e:	704e      	strb	r6, [r1, #1]
  ep->maxpacket = ep_mps;
 8001290:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8001292:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001294:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001296:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001298:	b102      	cbz	r2, 800129c <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 800129a:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800129c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800129e:	bf04      	itt	eq
 80012a0:	2300      	moveq	r3, #0
 80012a2:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80012a4:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d012      	beq.n	80012d2 <HAL_PCD_EP_Open+0x5e>
 80012ac:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012ae:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80012b0:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80012b4:	f000 fdba 	bl	8001e2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012b8:	2000      	movs	r0, #0
 80012ba:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80012be:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 80012c0:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012c2:	4344      	muls	r4, r0
 80012c4:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 80012c8:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012ca:	4429      	add	r1, r5
    ep->is_in = 0U;
 80012cc:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 80012d0:	e7de      	b.n	8001290 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 80012d2:	2002      	movs	r0, #2
 80012d4:	e7f3      	b.n	80012be <HAL_PCD_EP_Open+0x4a>

080012d6 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80012d6:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80012da:	b510      	push	{r4, lr}
 80012dc:	f04f 0328 	mov.w	r3, #40	; 0x28
 80012e0:	4604      	mov	r4, r0
 80012e2:	f001 0207 	and.w	r2, r1, #7
  if ((ep_addr & 0x80U) == 0x80U)
 80012e6:	d013      	beq.n	8001310 <HAL_PCD_EP_Close+0x3a>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012e8:	fb02 3103 	mla	r1, r2, r3, r3
 80012ec:	4401      	add	r1, r0
    ep->is_in = 1U;
 80012ee:	2001      	movs	r0, #1
 80012f0:	7048      	strb	r0, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012f2:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80012f4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d012      	beq.n	8001322 <HAL_PCD_EP_Close+0x4c>
 80012fc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012fe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001300:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001304:	f000 fece 	bl	80020a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001308:	2000      	movs	r0, #0
 800130a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800130e:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001310:	4353      	muls	r3, r2
 8001312:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8001316:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001318:	4403      	add	r3, r0
 800131a:	2000      	movs	r0, #0
 800131c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001320:	e7e7      	b.n	80012f2 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8001322:	2002      	movs	r0, #2
 8001324:	e7f3      	b.n	800130e <HAL_PCD_EP_Close+0x38>

08001326 <HAL_PCD_EP_Receive>:
{
 8001326:	b570      	push	{r4, r5, r6, lr}
 8001328:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800132c:	2128      	movs	r1, #40	; 0x28
  ep->xfer_count = 0U;
 800132e:	2600      	movs	r6, #0
  ep->xfer_buff = pBuf;
 8001330:	4369      	muls	r1, r5
 8001332:	1844      	adds	r4, r0, r1
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001334:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001338:	4401      	add	r1, r0
  ep->xfer_len = len;
 800133a:	e9c4 235f 	strd	r2, r3, [r4, #380]	; 0x17c
  ep->xfer_count = 0U;
 800133e:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
  ep->is_in = 0U;
 8001342:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8001346:	f884 5168 	strb.w	r5, [r4, #360]	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800134a:	6800      	ldr	r0, [r0, #0]
 800134c:	f001 f804 	bl	8002358 <USB_EPStartXfer>
}
 8001350:	4630      	mov	r0, r6
 8001352:	bd70      	pop	{r4, r5, r6, pc}

08001354 <HAL_PCD_EP_Transmit>:
{
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 800135a:	2128      	movs	r1, #40	; 0x28
 800135c:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8001360:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8001362:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8001366:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001368:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 800136c:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001370:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8001372:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8001374:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001376:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800137a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800137e:	6800      	ldr	r0, [r0, #0]
 8001380:	f000 ffea 	bl	8002358 <USB_EPStartXfer>
}
 8001384:	4630      	mov	r0, r6
 8001386:	bd70      	pop	{r4, r5, r6, pc}

08001388 <HAL_PCD_EP_SetStall>:
{
 8001388:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800138a:	6843      	ldr	r3, [r0, #4]
 800138c:	f001 0507 	and.w	r5, r1, #7
 8001390:	429d      	cmp	r5, r3
{
 8001392:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001394:	d828      	bhi.n	80013e8 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8001396:	f011 0f80 	tst.w	r1, #128	; 0x80
 800139a:	f04f 0328 	mov.w	r3, #40	; 0x28
 800139e:	d01a      	beq.n	80013d6 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 80013a0:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013a2:	fb05 3103 	mla	r1, r5, r3, r3
 80013a6:	4401      	add	r1, r0
    ep->is_in = 1U;
 80013a8:	704a      	strb	r2, [r1, #1]
  ep->is_stall = 1U;
 80013aa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80013ac:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80013ae:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80013b0:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d019      	beq.n	80013ec <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013b8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80013ba:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013be:	f000 ff42 	bl	8002246 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013c2:	b925      	cbnz	r5, 80013ce <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013c4:	6820      	ldr	r0, [r4, #0]
 80013c6:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 80013ca:	f000 ffb3 	bl	8002334 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80013d4:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80013d6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80013d8:	434b      	muls	r3, r1
 80013da:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 80013de:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80013e0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80013e2:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 80013e6:	e7e0      	b.n	80013aa <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
 80013ea:	e7f3      	b.n	80013d4 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 80013ec:	2002      	movs	r0, #2
 80013ee:	e7f1      	b.n	80013d4 <HAL_PCD_EP_SetStall+0x4c>

080013f0 <HAL_PCD_EP_ClrStall>:
{
 80013f0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013f2:	6843      	ldr	r3, [r0, #4]
 80013f4:	f001 020f 	and.w	r2, r1, #15
 80013f8:	429a      	cmp	r2, r3
{
 80013fa:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013fc:	d825      	bhi.n	800144a <HAL_PCD_EP_ClrStall+0x5a>
  if ((0x80U & ep_addr) == 0x80U)
 80013fe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001402:	f04f 0328 	mov.w	r3, #40	; 0x28
 8001406:	f001 0207 	and.w	r2, r1, #7
 800140a:	d015      	beq.n	8001438 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800140c:	fb02 3103 	mla	r1, r2, r3, r3
 8001410:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001412:	2001      	movs	r0, #1
 8001414:	7048      	strb	r0, [r1, #1]
  ep->is_stall = 0U;
 8001416:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8001418:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800141a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800141c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8001420:	2b01      	cmp	r3, #1
 8001422:	d014      	beq.n	800144e <HAL_PCD_EP_ClrStall+0x5e>
 8001424:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001426:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8001428:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800142c:	f000 ff2b 	bl	8002286 <USB_EPClearStall>
  return HAL_OK;
 8001430:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8001432:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8001436:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001438:	4353      	muls	r3, r2
 800143a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 800143e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001440:	4403      	add	r3, r0
 8001442:	2000      	movs	r0, #0
 8001444:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8001448:	e7e5      	b.n	8001416 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 800144a:	2001      	movs	r0, #1
 800144c:	e7f3      	b.n	8001436 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 800144e:	2002      	movs	r0, #2
 8001450:	e7f1      	b.n	8001436 <HAL_PCD_EP_ClrStall+0x46>

08001452 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001452:	b510      	push	{r4, lr}
 8001454:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001456:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800145a:	bf1b      	ittet	ne
 800145c:	f001 0107 	andne.w	r1, r1, #7
 8001460:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001464:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001468:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 800146a:	bf08      	it	eq
 800146c:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001470:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8001472:	b91a      	cbnz	r2, 800147c <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8001474:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8001476:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001478:	2000      	movs	r0, #0
 800147a:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 800147c:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800147e:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8001480:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001482:	e7f9      	b.n	8001478 <HAL_PCDEx_PMAConfig+0x26>

08001484 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001488:	4605      	mov	r5, r0
 800148a:	b338      	cbz	r0, 80014dc <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148c:	6803      	ldr	r3, [r0, #0]
 800148e:	07db      	lsls	r3, r3, #31
 8001490:	d410      	bmi.n	80014b4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	682b      	ldr	r3, [r5, #0]
 8001494:	079f      	lsls	r7, r3, #30
 8001496:	d45e      	bmi.n	8001556 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001498:	682b      	ldr	r3, [r5, #0]
 800149a:	0719      	lsls	r1, r3, #28
 800149c:	f100 8095 	bmi.w	80015ca <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a0:	682b      	ldr	r3, [r5, #0]
 80014a2:	075a      	lsls	r2, r3, #29
 80014a4:	f100 80c1 	bmi.w	800162a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a8:	69e8      	ldr	r0, [r5, #28]
 80014aa:	2800      	cmp	r0, #0
 80014ac:	f040 812c 	bne.w	8001708 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80014b0:	2000      	movs	r0, #0
 80014b2:	e029      	b.n	8001508 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b4:	4c90      	ldr	r4, [pc, #576]	; (80016f8 <HAL_RCC_OscConfig+0x274>)
 80014b6:	6863      	ldr	r3, [r4, #4]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d007      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c0:	6863      	ldr	r3, [r4, #4]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d10a      	bne.n	80014e0 <HAL_RCC_OscConfig+0x5c>
 80014ca:	6863      	ldr	r3, [r4, #4]
 80014cc:	03de      	lsls	r6, r3, #15
 80014ce:	d507      	bpl.n	80014e0 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	039c      	lsls	r4, r3, #14
 80014d4:	d5dd      	bpl.n	8001492 <HAL_RCC_OscConfig+0xe>
 80014d6:	686b      	ldr	r3, [r5, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1da      	bne.n	8001492 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80014dc:	2001      	movs	r0, #1
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014e0:	686b      	ldr	r3, [r5, #4]
 80014e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e6:	d112      	bne.n	800150e <HAL_RCC_OscConfig+0x8a>
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80014f0:	f7ff f83c 	bl	800056c <HAL_GetTick>
 80014f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	0398      	lsls	r0, r3, #14
 80014fa:	d4ca      	bmi.n	8001492 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff f836 	bl	800056c <HAL_GetTick>
 8001500:	1b80      	subs	r0, r0, r6
 8001502:	2864      	cmp	r0, #100	; 0x64
 8001504:	d9f7      	bls.n	80014f6 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001506:	2003      	movs	r0, #3
}
 8001508:	b002      	add	sp, #8
 800150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	b99b      	cbnz	r3, 8001538 <HAL_RCC_OscConfig+0xb4>
 8001510:	6823      	ldr	r3, [r4, #0]
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6023      	str	r3, [r4, #0]
 8001518:	6823      	ldr	r3, [r4, #0]
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001520:	f7ff f824 	bl	800056c <HAL_GetTick>
 8001524:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	0399      	lsls	r1, r3, #14
 800152a:	d5b2      	bpl.n	8001492 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800152c:	f7ff f81e 	bl	800056c <HAL_GetTick>
 8001530:	1b80      	subs	r0, r0, r6
 8001532:	2864      	cmp	r0, #100	; 0x64
 8001534:	d9f7      	bls.n	8001526 <HAL_RCC_OscConfig+0xa2>
 8001536:	e7e6      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	d103      	bne.n	8001548 <HAL_RCC_OscConfig+0xc4>
 8001540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001544:	6023      	str	r3, [r4, #0]
 8001546:	e7cf      	b.n	80014e8 <HAL_RCC_OscConfig+0x64>
 8001548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001554:	e7cb      	b.n	80014ee <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001556:	4c68      	ldr	r4, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x274>)
 8001558:	6863      	ldr	r3, [r4, #4]
 800155a:	f013 0f0c 	tst.w	r3, #12
 800155e:	d007      	beq.n	8001570 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001560:	6863      	ldr	r3, [r4, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b08      	cmp	r3, #8
 8001568:	d110      	bne.n	800158c <HAL_RCC_OscConfig+0x108>
 800156a:	6863      	ldr	r3, [r4, #4]
 800156c:	03da      	lsls	r2, r3, #15
 800156e:	d40d      	bmi.n	800158c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	079b      	lsls	r3, r3, #30
 8001574:	d502      	bpl.n	800157c <HAL_RCC_OscConfig+0xf8>
 8001576:	692b      	ldr	r3, [r5, #16]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d1af      	bne.n	80014dc <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	696a      	ldr	r2, [r5, #20]
 8001580:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001584:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001588:	6023      	str	r3, [r4, #0]
 800158a:	e785      	b.n	8001498 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158c:	692a      	ldr	r2, [r5, #16]
 800158e:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <HAL_RCC_OscConfig+0x278>)
 8001590:	b16a      	cbz	r2, 80015ae <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001596:	f7fe ffe9 	bl	800056c <HAL_GetTick>
 800159a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	079f      	lsls	r7, r3, #30
 80015a0:	d4ec      	bmi.n	800157c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7fe ffe3 	bl	800056c <HAL_GetTick>
 80015a6:	1b80      	subs	r0, r0, r6
 80015a8:	2802      	cmp	r0, #2
 80015aa:	d9f7      	bls.n	800159c <HAL_RCC_OscConfig+0x118>
 80015ac:	e7ab      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80015ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015b0:	f7fe ffdc 	bl	800056c <HAL_GetTick>
 80015b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	0798      	lsls	r0, r3, #30
 80015ba:	f57f af6d 	bpl.w	8001498 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015be:	f7fe ffd5 	bl	800056c <HAL_GetTick>
 80015c2:	1b80      	subs	r0, r0, r6
 80015c4:	2802      	cmp	r0, #2
 80015c6:	d9f6      	bls.n	80015b6 <HAL_RCC_OscConfig+0x132>
 80015c8:	e79d      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ca:	69aa      	ldr	r2, [r5, #24]
 80015cc:	4e4a      	ldr	r6, [pc, #296]	; (80016f8 <HAL_RCC_OscConfig+0x274>)
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <HAL_RCC_OscConfig+0x278>)
 80015d0:	b1e2      	cbz	r2, 800160c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80015d2:	2201      	movs	r2, #1
 80015d4:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80015d8:	f7fe ffc8 	bl	800056c <HAL_GetTick>
 80015dc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80015e0:	079b      	lsls	r3, r3, #30
 80015e2:	d50d      	bpl.n	8001600 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80015f0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80015f2:	bf00      	nop
  }
  while (Delay --);
 80015f4:	9b01      	ldr	r3, [sp, #4]
 80015f6:	1e5a      	subs	r2, r3, #1
 80015f8:	9201      	str	r2, [sp, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f9      	bne.n	80015f2 <HAL_RCC_OscConfig+0x16e>
 80015fe:	e74f      	b.n	80014a0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001600:	f7fe ffb4 	bl	800056c <HAL_GetTick>
 8001604:	1b00      	subs	r0, r0, r4
 8001606:	2802      	cmp	r0, #2
 8001608:	d9e9      	bls.n	80015de <HAL_RCC_OscConfig+0x15a>
 800160a:	e77c      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800160c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001610:	f7fe ffac 	bl	800056c <HAL_GetTick>
 8001614:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001618:	079f      	lsls	r7, r3, #30
 800161a:	f57f af41 	bpl.w	80014a0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161e:	f7fe ffa5 	bl	800056c <HAL_GetTick>
 8001622:	1b00      	subs	r0, r0, r4
 8001624:	2802      	cmp	r0, #2
 8001626:	d9f6      	bls.n	8001616 <HAL_RCC_OscConfig+0x192>
 8001628:	e76d      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4c33      	ldr	r4, [pc, #204]	; (80016f8 <HAL_RCC_OscConfig+0x274>)
 800162c:	69e3      	ldr	r3, [r4, #28]
 800162e:	00d8      	lsls	r0, r3, #3
 8001630:	d424      	bmi.n	800167c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001632:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	69e3      	ldr	r3, [r4, #28]
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163a:	61e3      	str	r3, [r4, #28]
 800163c:	69e3      	ldr	r3, [r4, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	4e2f      	ldr	r6, [pc, #188]	; (8001704 <HAL_RCC_OscConfig+0x280>)
 8001648:	6833      	ldr	r3, [r6, #0]
 800164a:	05d9      	lsls	r1, r3, #23
 800164c:	d518      	bpl.n	8001680 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164e:	68eb      	ldr	r3, [r5, #12]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d126      	bne.n	80016a2 <HAL_RCC_OscConfig+0x21e>
 8001654:	6a23      	ldr	r3, [r4, #32]
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800165c:	f7fe ff86 	bl	800056c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001660:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001664:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001666:	6a23      	ldr	r3, [r4, #32]
 8001668:	079b      	lsls	r3, r3, #30
 800166a:	d53f      	bpl.n	80016ec <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 800166c:	2f00      	cmp	r7, #0
 800166e:	f43f af1b 	beq.w	80014a8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001672:	69e3      	ldr	r3, [r4, #28]
 8001674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001678:	61e3      	str	r3, [r4, #28]
 800167a:	e715      	b.n	80014a8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800167c:	2700      	movs	r7, #0
 800167e:	e7e2      	b.n	8001646 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001680:	6833      	ldr	r3, [r6, #0]
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001688:	f7fe ff70 	bl	800056c <HAL_GetTick>
 800168c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	6833      	ldr	r3, [r6, #0]
 8001690:	05da      	lsls	r2, r3, #23
 8001692:	d4dc      	bmi.n	800164e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001694:	f7fe ff6a 	bl	800056c <HAL_GetTick>
 8001698:	eba0 0008 	sub.w	r0, r0, r8
 800169c:	2864      	cmp	r0, #100	; 0x64
 800169e:	d9f6      	bls.n	800168e <HAL_RCC_OscConfig+0x20a>
 80016a0:	e731      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a2:	b9ab      	cbnz	r3, 80016d0 <HAL_RCC_OscConfig+0x24c>
 80016a4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	6223      	str	r3, [r4, #32]
 80016b0:	6a23      	ldr	r3, [r4, #32]
 80016b2:	f023 0304 	bic.w	r3, r3, #4
 80016b6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016b8:	f7fe ff58 	bl	800056c <HAL_GetTick>
 80016bc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016be:	6a23      	ldr	r3, [r4, #32]
 80016c0:	0798      	lsls	r0, r3, #30
 80016c2:	d5d3      	bpl.n	800166c <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c4:	f7fe ff52 	bl	800056c <HAL_GetTick>
 80016c8:	1b80      	subs	r0, r0, r6
 80016ca:	4540      	cmp	r0, r8
 80016cc:	d9f7      	bls.n	80016be <HAL_RCC_OscConfig+0x23a>
 80016ce:	e71a      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	6a23      	ldr	r3, [r4, #32]
 80016d4:	d103      	bne.n	80016de <HAL_RCC_OscConfig+0x25a>
 80016d6:	f043 0304 	orr.w	r3, r3, #4
 80016da:	6223      	str	r3, [r4, #32]
 80016dc:	e7ba      	b.n	8001654 <HAL_RCC_OscConfig+0x1d0>
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6223      	str	r3, [r4, #32]
 80016e4:	6a23      	ldr	r3, [r4, #32]
 80016e6:	f023 0304 	bic.w	r3, r3, #4
 80016ea:	e7b6      	b.n	800165a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ec:	f7fe ff3e 	bl	800056c <HAL_GetTick>
 80016f0:	1b80      	subs	r0, r0, r6
 80016f2:	4540      	cmp	r0, r8
 80016f4:	d9b7      	bls.n	8001666 <HAL_RCC_OscConfig+0x1e2>
 80016f6:	e706      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	42420000 	.word	0x42420000
 8001700:	20000000 	.word	0x20000000
 8001704:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001708:	4c2a      	ldr	r4, [pc, #168]	; (80017b4 <HAL_RCC_OscConfig+0x330>)
 800170a:	6863      	ldr	r3, [r4, #4]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d03e      	beq.n	8001792 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001714:	2200      	movs	r2, #0
 8001716:	4b28      	ldr	r3, [pc, #160]	; (80017b8 <HAL_RCC_OscConfig+0x334>)
 8001718:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800171a:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171c:	d12c      	bne.n	8001778 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800171e:	f7fe ff25 	bl	800056c <HAL_GetTick>
 8001722:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	0199      	lsls	r1, r3, #6
 8001728:	d420      	bmi.n	800176c <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800172a:	6a2b      	ldr	r3, [r5, #32]
 800172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001730:	d105      	bne.n	800173e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001732:	6862      	ldr	r2, [r4, #4]
 8001734:	68a9      	ldr	r1, [r5, #8]
 8001736:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800173a:	430a      	orrs	r2, r1
 800173c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173e:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001740:	6862      	ldr	r2, [r4, #4]
 8001742:	430b      	orrs	r3, r1
 8001744:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001748:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800174a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800174c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <HAL_RCC_OscConfig+0x334>)
 8001750:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001752:	f7fe ff0b 	bl	800056c <HAL_GetTick>
 8001756:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	019a      	lsls	r2, r3, #6
 800175c:	f53f aea8 	bmi.w	80014b0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7fe ff04 	bl	800056c <HAL_GetTick>
 8001764:	1b40      	subs	r0, r0, r5
 8001766:	2802      	cmp	r0, #2
 8001768:	d9f6      	bls.n	8001758 <HAL_RCC_OscConfig+0x2d4>
 800176a:	e6cc      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7fe fefe 	bl	800056c <HAL_GetTick>
 8001770:	1b80      	subs	r0, r0, r6
 8001772:	2802      	cmp	r0, #2
 8001774:	d9d6      	bls.n	8001724 <HAL_RCC_OscConfig+0x2a0>
 8001776:	e6c6      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001778:	f7fe fef8 	bl	800056c <HAL_GetTick>
 800177c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	019b      	lsls	r3, r3, #6
 8001782:	f57f ae95 	bpl.w	80014b0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001786:	f7fe fef1 	bl	800056c <HAL_GetTick>
 800178a:	1b40      	subs	r0, r0, r5
 800178c:	2802      	cmp	r0, #2
 800178e:	d9f6      	bls.n	800177e <HAL_RCC_OscConfig+0x2fa>
 8001790:	e6b9      	b.n	8001506 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001792:	2801      	cmp	r0, #1
 8001794:	f43f aeb8 	beq.w	8001508 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001798:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	6a2a      	ldr	r2, [r5, #32]
 800179c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80017a0:	4291      	cmp	r1, r2
 80017a2:	f47f ae9b 	bne.w	80014dc <HAL_RCC_OscConfig+0x58>
 80017a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	4293      	cmp	r3, r2
 80017ae:	f43f ae7f 	beq.w	80014b0 <HAL_RCC_OscConfig+0x2c>
 80017b2:	e693      	b.n	80014dc <HAL_RCC_OscConfig+0x58>
 80017b4:	40021000 	.word	0x40021000
 80017b8:	42420000 	.word	0x42420000

080017bc <HAL_RCC_GetSysClockFreq>:
{
 80017bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80017c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017c2:	ac02      	add	r4, sp, #8
 80017c4:	f103 0510 	add.w	r5, r3, #16
 80017c8:	4622      	mov	r2, r4
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	6859      	ldr	r1, [r3, #4]
 80017ce:	3308      	adds	r3, #8
 80017d0:	c203      	stmia	r2!, {r0, r1}
 80017d2:	42ab      	cmp	r3, r5
 80017d4:	4614      	mov	r4, r2
 80017d6:	d1f7      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017d8:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80017dc:	4911      	ldr	r1, [pc, #68]	; (8001824 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017de:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80017e2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80017e4:	f003 020c 	and.w	r2, r3, #12
 80017e8:	2a08      	cmp	r2, #8
 80017ea:	d117      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017ec:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80017f0:	3218      	adds	r2, #24
 80017f2:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017f4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017f6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017fa:	d50c      	bpl.n	8001816 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017fc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017fe:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001800:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001804:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001806:	3318      	adds	r3, #24
 8001808:	446b      	add	r3, sp
 800180a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800180e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001812:	b007      	add	sp, #28
 8001814:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetSysClockFreq+0x70>)
 8001818:	4358      	muls	r0, r3
 800181a:	e7fa      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800181e:	e7f8      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x56>
 8001820:	08004089 	.word	0x08004089
 8001824:	40021000 	.word	0x40021000
 8001828:	007a1200 	.word	0x007a1200
 800182c:	003d0900 	.word	0x003d0900

08001830 <HAL_RCC_ClockConfig>:
{
 8001830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001834:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001836:	4604      	mov	r4, r0
 8001838:	b910      	cbnz	r0, 8001840 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800183a:	2001      	movs	r0, #1
}
 800183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4a44      	ldr	r2, [pc, #272]	; (8001954 <HAL_RCC_ClockConfig+0x124>)
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	428b      	cmp	r3, r1
 800184a:	d328      	bcc.n	800189e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800184c:	6821      	ldr	r1, [r4, #0]
 800184e:	078e      	lsls	r6, r1, #30
 8001850:	d430      	bmi.n	80018b4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	07ca      	lsls	r2, r1, #31
 8001854:	d443      	bmi.n	80018de <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001856:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x124>)
 8001858:	6813      	ldr	r3, [r2, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	42ab      	cmp	r3, r5
 8001860:	d865      	bhi.n	800192e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	4d3c      	ldr	r5, [pc, #240]	; (8001958 <HAL_RCC_ClockConfig+0x128>)
 8001866:	f012 0f04 	tst.w	r2, #4
 800186a:	d16c      	bne.n	8001946 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	0713      	lsls	r3, r2, #28
 800186e:	d506      	bpl.n	800187e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001870:	686b      	ldr	r3, [r5, #4]
 8001872:	6922      	ldr	r2, [r4, #16]
 8001874:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001878:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800187c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800187e:	f7ff ff9d 	bl	80017bc <HAL_RCC_GetSysClockFreq>
 8001882:	686b      	ldr	r3, [r5, #4]
 8001884:	4a35      	ldr	r2, [pc, #212]	; (800195c <HAL_RCC_ClockConfig+0x12c>)
 8001886:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	40d8      	lsrs	r0, r3
 800188e:	4b34      	ldr	r3, [pc, #208]	; (8001960 <HAL_RCC_ClockConfig+0x130>)
 8001890:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001892:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_ClockConfig+0x134>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	f7fe fe27 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 800189a:	2000      	movs	r0, #0
 800189c:	e7ce      	b.n	800183c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	6813      	ldr	r3, [r2, #0]
 80018a0:	f023 0307 	bic.w	r3, r3, #7
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a8:	6813      	ldr	r3, [r2, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	428b      	cmp	r3, r1
 80018b0:	d1c3      	bne.n	800183a <HAL_RCC_ClockConfig+0xa>
 80018b2:	e7cb      	b.n	800184c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_RCC_ClockConfig+0x128>)
 80018b6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ba:	bf1e      	ittt	ne
 80018bc:	685a      	ldrne	r2, [r3, #4]
 80018be:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80018c2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c6:	bf42      	ittt	mi
 80018c8:	685a      	ldrmi	r2, [r3, #4]
 80018ca:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80018ce:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	68a0      	ldr	r0, [r4, #8]
 80018d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018d8:	4302      	orrs	r2, r0
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	e7b9      	b.n	8001852 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	6862      	ldr	r2, [r4, #4]
 80018e0:	4e1d      	ldr	r6, [pc, #116]	; (8001958 <HAL_RCC_ClockConfig+0x128>)
 80018e2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	d11a      	bne.n	800191e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ec:	d0a5      	beq.n	800183a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f4:	f023 0303 	bic.w	r3, r3, #3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80018fc:	f7fe fe36 	bl	800056c <HAL_GetTick>
 8001900:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	6873      	ldr	r3, [r6, #4]
 8001904:	6862      	ldr	r2, [r4, #4]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800190e:	d0a2      	beq.n	8001856 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7fe fe2c 	bl	800056c <HAL_GetTick>
 8001914:	1bc0      	subs	r0, r0, r7
 8001916:	4540      	cmp	r0, r8
 8001918:	d9f3      	bls.n	8001902 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3
 800191c:	e78e      	b.n	800183c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191e:	2a02      	cmp	r2, #2
 8001920:	d102      	bne.n	8001928 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001926:	e7e1      	b.n	80018ec <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	f013 0f02 	tst.w	r3, #2
 800192c:	e7de      	b.n	80018ec <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	6813      	ldr	r3, [r2, #0]
 8001930:	f023 0307 	bic.w	r3, r3, #7
 8001934:	432b      	orrs	r3, r5
 8001936:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	42ab      	cmp	r3, r5
 8001940:	f47f af7b 	bne.w	800183a <HAL_RCC_ClockConfig+0xa>
 8001944:	e78d      	b.n	8001862 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001946:	686b      	ldr	r3, [r5, #4]
 8001948:	68e1      	ldr	r1, [r4, #12]
 800194a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800194e:	430b      	orrs	r3, r1
 8001950:	606b      	str	r3, [r5, #4]
 8001952:	e78b      	b.n	800186c <HAL_RCC_ClockConfig+0x3c>
 8001954:	40022000 	.word	0x40022000
 8001958:	40021000 	.word	0x40021000
 800195c:	08004071 	.word	0x08004071
 8001960:	20000000 	.word	0x20000000
 8001964:	20000008 	.word	0x20000008

08001968 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <HAL_RCC_GetPCLK1Freq+0x14>)
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x18>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	4a03      	ldr	r2, [pc, #12]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001976:	6810      	ldr	r0, [r2, #0]
}
 8001978:	40d8      	lsrs	r0, r3
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000
 8001980:	08004081 	.word	0x08004081
 8001984:	20000000 	.word	0x20000000

08001988 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_RCC_GetPCLK2Freq+0x14>)
 800198a:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001996:	6810      	ldr	r0, [r2, #0]
}
 8001998:	40d8      	lsrs	r0, r3
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	08004081 	.word	0x08004081
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019a8:	6803      	ldr	r3, [r0, #0]
{
 80019aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019ae:	07d9      	lsls	r1, r3, #31
{
 80019b0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80019b2:	d520      	bpl.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b4:	4c36      	ldr	r4, [pc, #216]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80019b6:	69e3      	ldr	r3, [r4, #28]
 80019b8:	00da      	lsls	r2, r3, #3
 80019ba:	d432      	bmi.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80019bc:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	69e3      	ldr	r3, [r4, #28]
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61e3      	str	r3, [r4, #28]
 80019c6:	69e3      	ldr	r3, [r4, #28]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	4f30      	ldr	r7, [pc, #192]	; (8001a94 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	05db      	lsls	r3, r3, #23
 80019d6:	d526      	bpl.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019d8:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80019de:	d136      	bne.n	8001a4e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019e0:	6a23      	ldr	r3, [r4, #32]
 80019e2:	686a      	ldr	r2, [r5, #4]
 80019e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e8:	4313      	orrs	r3, r2
 80019ea:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ec:	b11e      	cbz	r6, 80019f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ee:	69e3      	ldr	r3, [r4, #28]
 80019f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019f6:	6828      	ldr	r0, [r5, #0]
 80019f8:	0783      	lsls	r3, r0, #30
 80019fa:	d506      	bpl.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019fc:	4924      	ldr	r1, [pc, #144]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80019fe:	68ab      	ldr	r3, [r5, #8]
 8001a00:	684a      	ldr	r2, [r1, #4]
 8001a02:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a06:	431a      	orrs	r2, r3
 8001a08:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a0a:	f010 0010 	ands.w	r0, r0, #16
 8001a0e:	d01b      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a10:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001a12:	68e9      	ldr	r1, [r5, #12]
 8001a14:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a16:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6053      	str	r3, [r2, #4]
 8001a20:	e012      	b.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001a22:	2600      	movs	r6, #0
 8001a24:	e7d4      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001a2e:	f7fe fd9d 	bl	800056c <HAL_GetTick>
 8001a32:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	05d8      	lsls	r0, r3, #23
 8001a38:	d4ce      	bmi.n	80019d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3a:	f7fe fd97 	bl	800056c <HAL_GetTick>
 8001a3e:	eba0 0008 	sub.w	r0, r0, r8
 8001a42:	2864      	cmp	r0, #100	; 0x64
 8001a44:	d9f6      	bls.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
}
 8001a48:	b002      	add	sp, #8
 8001a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a4e:	686a      	ldr	r2, [r5, #4]
 8001a50:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d0c3      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a58:	2001      	movs	r0, #1
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a5c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a5e:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a62:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a68:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 8001a6c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a6e:	07d9      	lsls	r1, r3, #31
 8001a70:	d5b6      	bpl.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001a72:	f7fe fd7b 	bl	800056c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a7a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	6a23      	ldr	r3, [r4, #32]
 8001a7e:	079a      	lsls	r2, r3, #30
 8001a80:	d4ae      	bmi.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7fe fd73 	bl	800056c <HAL_GetTick>
 8001a86:	1bc0      	subs	r0, r0, r7
 8001a88:	4540      	cmp	r0, r8
 8001a8a:	d9f7      	bls.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001a8c:	e7db      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42420000 	.word	0x42420000

08001a9c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a9c:	6803      	ldr	r3, [r0, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001aa4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001aae:	2320      	movs	r3, #32
 8001ab0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001ab4:	4770      	bx	lr
	...

08001ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001abc:	6803      	ldr	r3, [r0, #0]
 8001abe:	68c1      	ldr	r1, [r0, #12]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aca:	6882      	ldr	r2, [r0, #8]
 8001acc:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001ace:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ad0:	4302      	orrs	r2, r0
 8001ad2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001ad4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8001ad8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001adc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	69a1      	ldr	r1, [r4, #24]
 8001ae6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001aea:	430a      	orrs	r2, r1
 8001aec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001aee:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <UART_SetConfig+0x70>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d115      	bne.n	8001b20 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001af4:	f7ff ff48 	bl	8001988 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001af8:	2319      	movs	r3, #25
 8001afa:	4343      	muls	r3, r0
 8001afc:	6862      	ldr	r2, [r4, #4]
 8001afe:	6820      	ldr	r0, [r4, #0]
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b06:	2264      	movs	r2, #100	; 0x64
 8001b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b0c:	fb02 3311 	mls	r3, r2, r1, r3
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	3332      	adds	r3, #50	; 0x32
 8001b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b18:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001b1c:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b1e:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b20:	f7ff ff22 	bl	8001968 <HAL_RCC_GetPCLK1Freq>
 8001b24:	e7e8      	b.n	8001af8 <UART_SetConfig+0x40>
 8001b26:	bf00      	nop
 8001b28:	40013800 	.word	0x40013800

08001b2c <UART_Receive_IT.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8001b2c:	b510      	push	{r4, lr}
  if (huart->rx_count != NUM_RX_BUFS) {
 8001b2e:	f8b0 4046 	ldrh.w	r4, [r0, #70]	; 0x46
  data = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b32:	6803      	ldr	r3, [r0, #0]
  if (huart->rx_count != NUM_RX_BUFS) {
 8001b34:	2c08      	cmp	r4, #8
  data = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b36:	685b      	ldr	r3, [r3, #4]
  if (huart->rx_count != NUM_RX_BUFS) {
 8001b38:	d029      	beq.n	8001b8e <UART_Receive_IT.isra.0+0x62>
	  if (huart->rxbuf_idx != (RXBUF_SIZE - 1)) {
 8001b3a:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
  data = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b3e:	b2db      	uxtb	r3, r3
	  if (huart->rxbuf_idx != (RXBUF_SIZE - 1)) {
 8001b40:	2aff      	cmp	r2, #255	; 0xff
 8001b42:	d02f      	beq.n	8001ba4 <UART_Receive_IT.isra.0+0x78>
		  if (!huart->rxbuf_idx) {
 8001b44:	bb22      	cbnz	r2, 8001b90 <UART_Receive_IT.isra.0+0x64>
			  if ((data == '\r') || (data == '\n')) {
 8001b46:	2b0d      	cmp	r3, #13
 8001b48:	d021      	beq.n	8001b8e <UART_Receive_IT.isra.0+0x62>
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	d01f      	beq.n	8001b8e <UART_Receive_IT.isra.0+0x62>
			  huart->uart_rxbuffer[huart->rx_wr_index][huart->rxbuf_idx] = data;
 8001b4e:	f8b0 2042 	ldrh.w	r2, [r0, #66]	; 0x42
			  if (data == '>') {
 8001b52:	2b3e      	cmp	r3, #62	; 0x3e
			  huart->uart_rxbuffer[huart->rx_wr_index][huart->rxbuf_idx] = data;
 8001b54:	eb00 2202 	add.w	r2, r0, r2, lsl #8
 8001b58:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
			  huart->rxbuf_idx++;
 8001b5c:	f04f 0201 	mov.w	r2, #1
 8001b60:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
			  if (data == '>') {
 8001b64:	d113      	bne.n	8001b8e <UART_Receive_IT.isra.0+0x62>
		  huart->uart_rxbuffer[huart->rx_wr_index][huart->rxbuf_idx] = 0;
 8001b66:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
 8001b6a:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
 8001b6e:	eb00 2203 	add.w	r2, r0, r3, lsl #8
 8001b72:	440a      	add	r2, r1
 8001b74:	2100      	movs	r1, #0
		  huart->rx_wr_index++;
 8001b76:	3301      	adds	r3, #1
		  huart->rx_wr_index &= NUM_RX_BUFS_MASK;
 8001b78:	f003 0307 	and.w	r3, r3, #7
		  huart->rx_count++;
 8001b7c:	3401      	adds	r4, #1
		  huart->uart_rxbuffer[huart->rx_wr_index][huart->rxbuf_idx] = 0;
 8001b7e:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
		  huart->rx_wr_index &= NUM_RX_BUFS_MASK;
 8001b82:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
		  huart->rxbuf_idx = 0;
 8001b86:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
		  huart->rx_count++;
 8001b8a:	f8a0 4046 	strh.w	r4, [r0, #70]	; 0x46
}
 8001b8e:	bd10      	pop	{r4, pc}
			  huart->uart_rxbuffer[huart->rx_wr_index][huart->rxbuf_idx] = data;
 8001b90:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
 8001b94:	eb00 2101 	add.w	r1, r0, r1, lsl #8
 8001b98:	4411      	add	r1, r2
			  huart->rxbuf_idx++;
 8001b9a:	3201      	adds	r2, #1
			  huart->uart_rxbuffer[huart->rx_wr_index][huart->rxbuf_idx] = data;
 8001b9c:	f881 3048 	strb.w	r3, [r1, #72]	; 0x48
			  huart->rxbuf_idx++;
 8001ba0:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
	  if (data == '\n') {
 8001ba4:	2b0a      	cmp	r3, #10
 8001ba6:	e7dd      	b.n	8001b64 <UART_Receive_IT.isra.0+0x38>

08001ba8 <HAL_UART_Init>:
{
 8001ba8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001baa:	4604      	mov	r4, r0
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d039      	beq.n	8001c24 <HAL_UART_Init+0x7c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001bb0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001bb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bb8:	b91b      	cbnz	r3, 8001bc2 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8001bba:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001bbe:	f7fe fbf3 	bl	80003a8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001bc2:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001bc4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001bc6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001bca:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001bcc:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bd2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001bd4:	f7ff ff70 	bl	8001ab8 <UART_SetConfig>
  huart->rx_count = 0;
 8001bd8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001be2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bea:	615a      	str	r2, [r3, #20]
  huart->rxbuf_idx = 0;
 8001bec:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  __HAL_UART_ENABLE(huart);
 8001bf0:	68da      	ldr	r2, [r3, #12]
  huart->rx_count = 0;
 8001bf2:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
  __HAL_UART_ENABLE(huart);
 8001bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  huart->rx_rd_index = 0;
 8001bfa:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UART_ENABLE(huart);
 8001bfc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001bfe:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c00:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c02:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c06:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c10:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001c12:	695a      	ldr	r2, [r3, #20]
 8001c14:	f042 0201 	orr.w	r2, r2, #1
 8001c18:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	f042 0220 	orr.w	r2, r2, #32
 8001c20:	60da      	str	r2, [r3, #12]
}
 8001c22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c24:	2001      	movs	r0, #1
 8001c26:	e7fc      	b.n	8001c22 <HAL_UART_Init+0x7a>

08001c28 <HAL_UART_Receive_gets>:
	__asm("cpsid i");
 8001c28:	b672      	cpsid	i
	if (huart->rx_count) {
 8001c2a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8001c2e:	b133      	cbz	r3, 8001c3e <HAL_UART_Receive_gets+0x16>
		pData = &huart->uart_rxbuffer[huart->rx_rd_index][0];
 8001c30:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001c34:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001c38:	3048      	adds	r0, #72	; 0x48
	__asm("cpsie i");
 8001c3a:	b662      	cpsie	i
}
 8001c3c:	4770      	bx	lr
	pData = NULL;
 8001c3e:	4618      	mov	r0, r3
 8001c40:	e7fb      	b.n	8001c3a <HAL_UART_Receive_gets+0x12>

08001c42 <HAL_UART_Free_Receive_buf>:
	__asm("cpsid i");
 8001c42:	b672      	cpsid	i
	if (pData == &huart->uart_rxbuffer[huart->rx_rd_index][0]) {
 8001c44:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001c48:	eb00 2203 	add.w	r2, r0, r3, lsl #8
 8001c4c:	3248      	adds	r2, #72	; 0x48
 8001c4e:	4291      	cmp	r1, r2
		huart->rx_rd_index++;
 8001c50:	bf01      	itttt	eq
 8001c52:	3301      	addeq	r3, #1
		huart->rx_rd_index &= NUM_RX_BUFS_MASK;
 8001c54:	f003 0307 	andeq.w	r3, r3, #7
 8001c58:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
		huart->rx_count--;
 8001c5c:	f8b0 3046 	ldrheq.w	r3, [r0, #70]	; 0x46
		retval = HAL_ERROR;
 8001c60:	bf11      	iteee	ne
 8001c62:	2001      	movne	r0, #1
		huart->rx_count--;
 8001c64:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8001c68:	f8a0 3046 	strheq.w	r3, [r0, #70]	; 0x46
		retval = HAL_OK;
 8001c6c:	2000      	moveq	r0, #0
	__asm("cpsie i");
 8001c6e:	b662      	cpsie	i
}
 8001c70:	4770      	bx	lr

08001c72 <HAL_UART_TxCpltCallback>:
 8001c72:	4770      	bx	lr

08001c74 <HAL_UART_ErrorCallback>:
 8001c74:	4770      	bx	lr
	...

08001c78 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c78:	6803      	ldr	r3, [r0, #0]
{
 8001c7a:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c7c:	681a      	ldr	r2, [r3, #0]
{
 8001c7e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001c80:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c82:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c84:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001c86:	d107      	bne.n	8001c98 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c88:	0696      	lsls	r6, r2, #26
 8001c8a:	d55c      	bpl.n	8001d46 <HAL_UART_IRQHandler+0xce>
 8001c8c:	068d      	lsls	r5, r1, #26
 8001c8e:	d55a      	bpl.n	8001d46 <HAL_UART_IRQHandler+0xce>
}
 8001c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001c94:	f7ff bf4a 	b.w	8001b2c <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c98:	f005 0001 	and.w	r0, r5, #1
 8001c9c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8001ca0:	4305      	orrs	r5, r0
 8001ca2:	d050      	beq.n	8001d46 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ca4:	07d6      	lsls	r6, r2, #31
 8001ca6:	d505      	bpl.n	8001cb4 <HAL_UART_IRQHandler+0x3c>
 8001ca8:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001caa:	bf42      	ittt	mi
 8001cac:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001cae:	f043 0301 	orrmi.w	r3, r3, #1
 8001cb2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cb4:	0753      	lsls	r3, r2, #29
 8001cb6:	d504      	bpl.n	8001cc2 <HAL_UART_IRQHandler+0x4a>
 8001cb8:	b118      	cbz	r0, 8001cc2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cc2:	0796      	lsls	r6, r2, #30
 8001cc4:	d504      	bpl.n	8001cd0 <HAL_UART_IRQHandler+0x58>
 8001cc6:	b118      	cbz	r0, 8001cd0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cd0:	0715      	lsls	r5, r2, #28
 8001cd2:	d507      	bpl.n	8001ce4 <HAL_UART_IRQHandler+0x6c>
 8001cd4:	f001 0320 	and.w	r3, r1, #32
 8001cd8:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cda:	bf1e      	ittt	ne
 8001cdc:	6be3      	ldrne	r3, [r4, #60]	; 0x3c
 8001cde:	f043 0308 	orrne.w	r3, r3, #8
 8001ce2:	63e3      	strne	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ce4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ce6:	b34b      	cbz	r3, 8001d3c <HAL_UART_IRQHandler+0xc4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ce8:	0690      	lsls	r0, r2, #26
 8001cea:	d504      	bpl.n	8001cf6 <HAL_UART_IRQHandler+0x7e>
 8001cec:	0689      	lsls	r1, r1, #26
 8001cee:	d502      	bpl.n	8001cf6 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ff1b 	bl	8001b2c <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cf6:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8001cf8:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cfa:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cfc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d02:	f005 0508 	and.w	r5, r5, #8
 8001d06:	431d      	orrs	r5, r3
 8001d08:	d019      	beq.n	8001d3e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8001d0a:	f7ff fec7 	bl	8001a9c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	0652      	lsls	r2, r2, #25
 8001d14:	d50f      	bpl.n	8001d36 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d16:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001d18:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1e:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001d20:	b148      	cbz	r0, 8001d36 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <HAL_UART_IRQHandler+0x140>)
 8001d24:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d26:	f7fe fc9f 	bl	8000668 <HAL_DMA_Abort_IT>
 8001d2a:	b138      	cbz	r0, 8001d3c <HAL_UART_IRQHandler+0xc4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d2c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001d2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d34:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff ff9c 	bl	8001c74 <HAL_UART_ErrorCallback>
}
 8001d3c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001d3e:	f7ff ff99 	bl	8001c74 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d42:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001d44:	e7fa      	b.n	8001d3c <HAL_UART_IRQHandler+0xc4>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d46:	0616      	lsls	r6, r2, #24
 8001d48:	d526      	bpl.n	8001d98 <HAL_UART_IRQHandler+0x120>
 8001d4a:	060d      	lsls	r5, r1, #24
 8001d4c:	d524      	bpl.n	8001d98 <HAL_UART_IRQHandler+0x120>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d4e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001d52:	2a21      	cmp	r2, #33	; 0x21
 8001d54:	d1f2      	bne.n	8001d3c <HAL_UART_IRQHandler+0xc4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d56:	68a1      	ldr	r1, [r4, #8]
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d58:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d5a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001d5e:	d116      	bne.n	8001d8e <HAL_UART_IRQHandler+0x116>
 8001d60:	6921      	ldr	r1, [r4, #16]
 8001d62:	b9a1      	cbnz	r1, 8001d8e <HAL_UART_IRQHandler+0x116>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d64:	f832 1b02 	ldrh.w	r1, [r2], #2
 8001d68:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001d6c:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001d6e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001d70:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001d72:	3a01      	subs	r2, #1
 8001d74:	b292      	uxth	r2, r2
 8001d76:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	d1df      	bne.n	8001d3c <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d82:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	e7d6      	b.n	8001d3c <HAL_UART_IRQHandler+0xc4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d8e:	1c51      	adds	r1, r2, #1
 8001d90:	6221      	str	r1, [r4, #32]
 8001d92:	7812      	ldrb	r2, [r2, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	e7eb      	b.n	8001d70 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d98:	0650      	lsls	r0, r2, #25
 8001d9a:	d5cf      	bpl.n	8001d3c <HAL_UART_IRQHandler+0xc4>
 8001d9c:	064a      	lsls	r2, r1, #25
 8001d9e:	d5cd      	bpl.n	8001d3c <HAL_UART_IRQHandler+0xc4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001da0:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8001da2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001da8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001daa:	2320      	movs	r3, #32
 8001dac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001db0:	f7ff ff5f 	bl	8001c72 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8001db4:	e7c2      	b.n	8001d3c <HAL_UART_IRQHandler+0xc4>
 8001db6:	bf00      	nop
 8001db8:	08001dbd 	.word	0x08001dbd

08001dbc <UART_DMAAbortOnError>:
{
 8001dbc:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8001dbe:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001dc2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001dc4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001dc6:	f7ff ff55 	bl	8001c74 <HAL_UART_ErrorCallback>
}
 8001dca:	bd08      	pop	{r3, pc}

08001dcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001dcc:	b084      	sub	sp, #16
 8001dce:	a801      	add	r0, sp, #4
 8001dd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8001dd4:	b004      	add	sp, #16
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	4770      	bx	lr

08001dda <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8001dda:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8001ddc:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 8001de0:	2000      	movs	r0, #0
 8001de2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8001de6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8001dea:	4770      	bx	lr

08001dec <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8001dec:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001df0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001df4:	045b      	lsls	r3, r3, #17
 8001df6:	0c5b      	lsrs	r3, r3, #17
 8001df8:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	4770      	bx	lr

08001e00 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001e00:	2000      	movs	r0, #0
 8001e02:	4770      	bx	lr

08001e04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001e04:	b084      	sub	sp, #16
 8001e06:	b510      	push	{r4, lr}
 8001e08:	4604      	mov	r4, r0
 8001e0a:	a803      	add	r0, sp, #12
 8001e0c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8001e10:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8001e18:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8001e1c:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001e20:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8001e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e28:	b004      	add	sp, #16
 8001e2a:	4770      	bx	lr

08001e2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001e2e:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8001e30:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001e32:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8001e36:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8001e38:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8001e3c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8001e40:	0424      	lsls	r4, r4, #16
 8001e42:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8001e44:	2d03      	cmp	r5, #3
 8001e46:	d848      	bhi.n	8001eda <USB_ActivateEndpoint+0xae>
 8001e48:	e8df f005 	tbb	[pc, r5]
 8001e4c:	40424402 	.word	0x40424402
  HAL_StatusTypeDef ret = HAL_OK;
 8001e50:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8001e52:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8001e56:	f248 0680 	movw	r6, #32896	; 0x8080
 8001e5a:	4334      	orrs	r4, r6
 8001e5c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001e60:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8001e64:	4f8c      	ldr	r7, [pc, #560]	; (8002098 <USB_ActivateEndpoint+0x26c>)
 8001e66:	b2a4      	uxth	r4, r4
 8001e68:	403c      	ands	r4, r7
 8001e6a:	4314      	orrs	r4, r2
 8001e6c:	4334      	orrs	r4, r6
 8001e6e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8001e72:	7b0c      	ldrb	r4, [r1, #12]
 8001e74:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	d17b      	bne.n	8001f74 <USB_ActivateEndpoint+0x148>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e7c:	88ce      	ldrh	r6, [r1, #6]
    if (ep->is_in != 0U)
 8001e7e:	784c      	ldrb	r4, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e80:	0876      	lsrs	r6, r6, #1
 8001e82:	0076      	lsls	r6, r6, #1
    if (ep->is_in != 0U)
 8001e84:	b35c      	cbz	r4, 8001ede <USB_ActivateEndpoint+0xb2>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e86:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8001e8a:	b2a4      	uxth	r4, r4
 8001e8c:	4464      	add	r4, ip
 8001e8e:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e92:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001e96:	064e      	lsls	r6, r1, #25
 8001e98:	d509      	bpl.n	8001eae <USB_ActivateEndpoint+0x82>
 8001e9a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001e9e:	b289      	uxth	r1, r1
 8001ea0:	4039      	ands	r1, r7
 8001ea2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001ea6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8001eaa:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001eae:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001eb2:	4c7a      	ldr	r4, [pc, #488]	; (800209c <USB_ActivateEndpoint+0x270>)
 8001eb4:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8001eb6:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001eb8:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8001ebc:	d001      	beq.n	8001ec2 <USB_ActivateEndpoint+0x96>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8001ebe:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ec2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001ec6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001eca:	e0a9      	b.n	8002020 <USB_ActivateEndpoint+0x1f4>
      wEpRegVal |= USB_EP_INTERRUPT;
 8001ecc:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8001ed0:	2000      	movs	r0, #0
      break;
 8001ed2:	e7c0      	b.n	8001e56 <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8001ed4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      break;
 8001ed8:	e7fa      	b.n	8001ed0 <USB_ActivateEndpoint+0xa4>
  switch (ep->type)
 8001eda:	2001      	movs	r0, #1
 8001edc:	e7bb      	b.n	8001e56 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ede:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001ee2:	690d      	ldr	r5, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ee4:	b2a4      	uxth	r4, r4
 8001ee6:	4464      	add	r4, ip
 8001ee8:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001eec:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8001ef0:	b2a4      	uxth	r4, r4
 8001ef2:	4464      	add	r4, ip
 8001ef4:	bb6d      	cbnz	r5, 8001f52 <USB_ActivateEndpoint+0x126>
 8001ef6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8001efa:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8001efe:	0409      	lsls	r1, r1, #16
 8001f00:	0c09      	lsrs	r1, r1, #16
 8001f02:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
 8001f06:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	; 0x40c
 8001f0a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8001f0e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8001f12:	b289      	uxth	r1, r1
 8001f14:	f8a4 140c 	strh.w	r1, [r4, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f18:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001f1c:	044f      	lsls	r7, r1, #17
 8001f1e:	d50d      	bpl.n	8001f3c <USB_ActivateEndpoint+0x110>
 8001f20:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001f24:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001f28:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001f2c:	0409      	lsls	r1, r1, #16
 8001f2e:	0c09      	lsrs	r1, r1, #16
 8001f30:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001f34:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001f38:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f3c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001f40:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001f44:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001f48:	0409      	lsls	r1, r1, #16
 8001f4a:	0c09      	lsrs	r1, r1, #16
 8001f4c:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8001f50:	e7b7      	b.n	8001ec2 <USB_ActivateEndpoint+0x96>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001f52:	2d3e      	cmp	r5, #62	; 0x3e
 8001f54:	d805      	bhi.n	8001f62 <USB_ActivateEndpoint+0x136>
 8001f56:	0869      	lsrs	r1, r5, #1
 8001f58:	07ed      	lsls	r5, r5, #31
 8001f5a:	bf48      	it	mi
 8001f5c:	3101      	addmi	r1, #1
 8001f5e:	0289      	lsls	r1, r1, #10
 8001f60:	e7d7      	b.n	8001f12 <USB_ActivateEndpoint+0xe6>
 8001f62:	096e      	lsrs	r6, r5, #5
 8001f64:	06e9      	lsls	r1, r5, #27
 8001f66:	494e      	ldr	r1, [pc, #312]	; (80020a0 <USB_ActivateEndpoint+0x274>)
 8001f68:	bf08      	it	eq
 8001f6a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001f6e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8001f72:	e7ce      	b.n	8001f12 <USB_ActivateEndpoint+0xe6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001f74:	f833 6022 	ldrh.w	r6, [r3, r2, lsl #2]
 8001f78:	b2b6      	uxth	r6, r6
 8001f7a:	403e      	ands	r6, r7
 8001f7c:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 8001f80:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8001f84:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8001f88:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8001f8c:	890e      	ldrh	r6, [r1, #8]
 8001f8e:	b2a4      	uxth	r4, r4
 8001f90:	0876      	lsrs	r6, r6, #1
 8001f92:	4464      	add	r4, ip
 8001f94:	0076      	lsls	r6, r6, #1
 8001f96:	f8a4 6400 	strh.w	r6, [r4, #1024]	; 0x400
 8001f9a:	894e      	ldrh	r6, [r1, #10]
 8001f9c:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8001fa0:	0876      	lsrs	r6, r6, #1
 8001fa2:	b2a4      	uxth	r4, r4
 8001fa4:	4464      	add	r4, ip
 8001fa6:	0076      	lsls	r6, r6, #1
 8001fa8:	f8a4 6408 	strh.w	r6, [r4, #1032]	; 0x408
    if (ep->is_in == 0U)
 8001fac:	7849      	ldrb	r1, [r1, #1]
 8001fae:	bbd1      	cbnz	r1, 8002026 <USB_ActivateEndpoint+0x1fa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001fb0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001fb4:	044e      	lsls	r6, r1, #17
 8001fb6:	d509      	bpl.n	8001fcc <USB_ActivateEndpoint+0x1a0>
 8001fb8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001fbc:	b289      	uxth	r1, r1
 8001fbe:	4039      	ands	r1, r7
 8001fc0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001fc4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001fc8:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001fcc:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001fd0:	064d      	lsls	r5, r1, #25
 8001fd2:	d50d      	bpl.n	8001ff0 <USB_ActivateEndpoint+0x1c4>
 8001fd4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001fd8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001fdc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001fe0:	0409      	lsls	r1, r1, #16
 8001fe2:	0c09      	lsrs	r1, r1, #16
 8001fe4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001fe8:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8001fec:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ff0:	f248 0480 	movw	r4, #32896	; 0x8080
 8001ff4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8001ff8:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001ffc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002000:	0409      	lsls	r1, r1, #16
 8002002:	0c09      	lsrs	r1, r1, #16
 8002004:	f481 5140 	eor.w	r1, r1, #12288	; 0x3000
 8002008:	4321      	orrs	r1, r4
 800200a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800200e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002012:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002016:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800201a:	0409      	lsls	r1, r1, #16
 800201c:	0c09      	lsrs	r1, r1, #16
 800201e:	4321      	orrs	r1, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002020:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
    }
  }

  return ret;
}
 8002024:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002026:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800202a:	044c      	lsls	r4, r1, #17
 800202c:	d509      	bpl.n	8002042 <USB_ActivateEndpoint+0x216>
 800202e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002032:	b289      	uxth	r1, r1
 8002034:	4039      	ands	r1, r7
 8002036:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800203a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800203e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002042:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002046:	0649      	lsls	r1, r1, #25
 8002048:	d50d      	bpl.n	8002066 <USB_ActivateEndpoint+0x23a>
 800204a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800204e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002052:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002056:	0409      	lsls	r1, r1, #16
 8002058:	0c09      	lsrs	r1, r1, #16
 800205a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800205e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8002062:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002066:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800206a:	4c0c      	ldr	r4, [pc, #48]	; (800209c <USB_ActivateEndpoint+0x270>)
 800206c:	b289      	uxth	r1, r1
 800206e:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8002070:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002072:	bf18      	it	ne
 8002074:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002078:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800207c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002080:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002084:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8002088:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 800208c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002090:	0409      	lsls	r1, r1, #16
 8002092:	0c09      	lsrs	r1, r1, #16
 8002094:	e715      	b.n	8001ec2 <USB_ActivateEndpoint+0x96>
 8002096:	bf00      	nop
 8002098:	ffff8f8f 	.word	0xffff8f8f
 800209c:	ffff8fbf 	.word	0xffff8fbf
 80020a0:	ffff8000 	.word	0xffff8000

080020a4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 80020a4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020a6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80020a8:	7b09      	ldrb	r1, [r1, #12]
 80020aa:	bbd9      	cbnz	r1, 8002124 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 80020ac:	b30a      	cbz	r2, 80020f2 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020b2:	0651      	lsls	r1, r2, #25
 80020b4:	d50d      	bpl.n	80020d2 <USB_DeactivateEndpoint+0x2e>
 80020b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80020be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80020c2:	0412      	lsls	r2, r2, #16
 80020c4:	0c12      	lsrs	r2, r2, #16
 80020c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80020ce:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80020d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020d6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80020da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80020de:	0412      	lsls	r2, r2, #16
 80020e0:	0c12      	lsrs	r2, r2, #16
 80020e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80020ea:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }

  return HAL_OK;
}
 80020ee:	2000      	movs	r0, #0
 80020f0:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020f2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020f6:	0452      	lsls	r2, r2, #17
 80020f8:	d50d      	bpl.n	8002116 <USB_DeactivateEndpoint+0x72>
 80020fa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002102:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002106:	0412      	lsls	r2, r2, #16
 8002108:	0c12      	lsrs	r2, r2, #16
 800210a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800210e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002112:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002116:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800211a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800211e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002122:	e7dc      	b.n	80020de <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8002124:	2a00      	cmp	r2, #0
 8002126:	d148      	bne.n	80021ba <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002128:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800212c:	0451      	lsls	r1, r2, #17
 800212e:	d50d      	bpl.n	800214c <USB_DeactivateEndpoint+0xa8>
 8002130:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002134:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002138:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800213c:	0412      	lsls	r2, r2, #16
 800213e:	0c12      	lsrs	r2, r2, #16
 8002140:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002144:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002148:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800214c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002150:	0652      	lsls	r2, r2, #25
 8002152:	d50d      	bpl.n	8002170 <USB_DeactivateEndpoint+0xcc>
 8002154:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002158:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800215c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002160:	0412      	lsls	r2, r2, #16
 8002162:	0c12      	lsrs	r2, r2, #16
 8002164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002168:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800216c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002170:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8002174:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002178:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800217c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002180:	0412      	lsls	r2, r2, #16
 8002182:	0c12      	lsrs	r2, r2, #16
 8002184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002188:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800218c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002190:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002198:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800219c:	0412      	lsls	r2, r2, #16
 800219e:	0c12      	lsrs	r2, r2, #16
 80021a0:	430a      	orrs	r2, r1
 80021a2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80021a6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021aa:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80021b2:	0412      	lsls	r2, r2, #16
 80021b4:	0c12      	lsrs	r2, r2, #16
 80021b6:	430a      	orrs	r2, r1
 80021b8:	e797      	b.n	80020ea <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021ba:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021be:	0451      	lsls	r1, r2, #17
 80021c0:	d50d      	bpl.n	80021de <USB_DeactivateEndpoint+0x13a>
 80021c2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021c6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021ce:	0412      	lsls	r2, r2, #16
 80021d0:	0c12      	lsrs	r2, r2, #16
 80021d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021da:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021e2:	0652      	lsls	r2, r2, #25
 80021e4:	d50d      	bpl.n	8002202 <USB_DeactivateEndpoint+0x15e>
 80021e6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80021ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021f2:	0412      	lsls	r2, r2, #16
 80021f4:	0c12      	lsrs	r2, r2, #16
 80021f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80021fe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002202:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8002206:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800220a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800220e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	0c12      	lsrs	r2, r2, #16
 8002216:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800221a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800221e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002222:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002226:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800222a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800222e:	0412      	lsls	r2, r2, #16
 8002230:	0c12      	lsrs	r2, r2, #16
 8002232:	430a      	orrs	r2, r1
 8002234:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002238:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800223c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002240:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002244:	e7b5      	b.n	80021b2 <USB_DeactivateEndpoint+0x10e>

08002246 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8002246:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8002248:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800224a:	b18b      	cbz	r3, 8002270 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800224c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002268:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800226c:	2000      	movs	r0, #0
 800226e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8002270:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	0c1b      	lsrs	r3, r3, #16
 8002280:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002284:	e7ec      	b.n	8002260 <USB_EPSetStall+0x1a>

08002286 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8002286:	7b0b      	ldrb	r3, [r1, #12]
 8002288:	bb3b      	cbnz	r3, 80022da <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800228a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800228c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800228e:	b333      	cbz	r3, 80022de <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002290:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002294:	065b      	lsls	r3, r3, #25
 8002296:	d50d      	bpl.n	80022b4 <USB_EPClearStall+0x2e>
 8002298:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800229c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 80022b4:	78cb      	ldrb	r3, [r1, #3]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d00f      	beq.n	80022da <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80022ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c6:	041b      	lsls	r3, r3, #16
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80022da:	2000      	movs	r0, #0
 80022dc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022de:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022e2:	045b      	lsls	r3, r3, #17
 80022e4:	d50d      	bpl.n	8002302 <USB_EPClearStall+0x7c>
 80022e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f2:	041b      	lsls	r3, r3, #16
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002302:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800230e:	041b      	lsls	r3, r3, #16
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002316:	e7da      	b.n	80022ce <USB_EPClearStall+0x48>

08002318 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8002318:	b911      	cbnz	r1, 8002320 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8002320:	2000      	movs	r0, #0
 8002322:	4770      	bx	lr

08002324 <USB_DevConnect>:
 8002324:	2000      	movs	r0, #0
 8002326:	4770      	bx	lr

08002328 <USB_DevDisconnect>:
 8002328:	2000      	movs	r0, #0
 800232a:	4770      	bx	lr

0800232c <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800232c:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002330:	b280      	uxth	r0, r0
 8002332:	4770      	bx	lr

08002334 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002334:	2000      	movs	r0, #0
 8002336:	4770      	bx	lr

08002338 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8002338:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800233c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800233e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8002348:	429a      	cmp	r2, r3
 800234a:	d100      	bne.n	800234e <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 800234c:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800234e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8002352:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8002356:	e7f7      	b.n	8002348 <USB_WritePMA+0x10>

08002358 <USB_EPStartXfer>:
{
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800235c:	7849      	ldrb	r1, [r1, #1]
{
 800235e:	4605      	mov	r5, r0
  if (ep->is_in == 1U)
 8002360:	2901      	cmp	r1, #1
    if (ep->doublebuffer == 0U)
 8002362:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8002364:	f040 813d 	bne.w	80025e2 <USB_EPStartXfer+0x28a>
    if (ep->xfer_len > ep->maxpacket)
 8002368:	f8d4 e010 	ldr.w	lr, [r4, #16]
 800236c:	69a6      	ldr	r6, [r4, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800236e:	6961      	ldr	r1, [r4, #20]
 8002370:	4576      	cmp	r6, lr
 8002372:	bf28      	it	cs
 8002374:	4676      	movcs	r6, lr
    if (ep->doublebuffer == 0U)
 8002376:	bb02      	cbnz	r2, 80023ba <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002378:	b2b6      	uxth	r6, r6
 800237a:	88e2      	ldrh	r2, [r4, #6]
 800237c:	4633      	mov	r3, r6
 800237e:	f7ff ffdb 	bl	8002338 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002382:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002386:	7821      	ldrb	r1, [r4, #0]
 8002388:	b290      	uxth	r0, r2
 800238a:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800238e:	0109      	lsls	r1, r1, #4
 8002390:	4402      	add	r2, r0
 8002392:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002394:	7822      	ldrb	r2, [r4, #0]
 8002396:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800239a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800239e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	0c1b      	lsrs	r3, r3, #16
 80023a6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 80023aa:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80023b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 80023ba:	78e3      	ldrb	r3, [r4, #3]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80023bc:	7827      	ldrb	r7, [r4, #0]
      if (ep->type == EP_TYPE_BULK)
 80023be:	2b02      	cmp	r3, #2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80023c0:	ea4f 1c07 	mov.w	ip, r7, lsl #4
      if (ep->type == EP_TYPE_BULK)
 80023c4:	f040 80d2 	bne.w	800256c <USB_EPStartXfer+0x214>
        if (ep->xfer_len_db > ep->maxpacket)
 80023c8:	6a23      	ldr	r3, [r4, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 80023ca:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80023ce:	459e      	cmp	lr, r3
 80023d0:	f080 80b5 	bcs.w	800253e <USB_EPStartXfer+0x1e6>
          PCD_SET_EP_DBUF(USBx, ep->num);
 80023d4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80023d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80023dc:	0412      	lsls	r2, r2, #16
 80023de:	0c12      	lsrs	r2, r2, #16
 80023e0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80023e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023e8:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80023ec:	f830 7027 	ldrh.w	r7, [r0, r7, lsl #2]
          ep->xfer_len_db -= len;
 80023f0:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80023f2:	f017 0740 	ands.w	r7, r7, #64	; 0x40
          ep->xfer_len_db -= len;
 80023f6:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80023f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80023fc:	b2b3      	uxth	r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80023fe:	d050      	beq.n	80024a2 <USB_EPStartXfer+0x14a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002400:	b297      	uxth	r7, r2
 8002402:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 8002406:	443a      	add	r2, r7
 8002408:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800240c:	8962      	ldrh	r2, [r4, #10]
 800240e:	f7ff ff93 	bl	8002338 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8002412:	6a22      	ldr	r2, [r4, #32]
 8002414:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 8002416:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8002418:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800241a:	bf8a      	itet	hi
 800241c:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800241e:	2300      	movls	r3, #0
 8002420:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002422:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 8002424:	4431      	add	r1, r6
 8002426:	6223      	str	r3, [r4, #32]
 8002428:	6161      	str	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800242a:	b293      	uxth	r3, r2
 800242c:	bb68      	cbnz	r0, 800248a <USB_EPStartXfer+0x132>
 800242e:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 8002432:	7826      	ldrb	r6, [r4, #0]
 8002434:	b280      	uxth	r0, r0
 8002436:	f205 4704 	addw	r7, r5, #1028	; 0x404
 800243a:	0136      	lsls	r6, r6, #4
 800243c:	4438      	add	r0, r7
 800243e:	b96a      	cbnz	r2, 800245c <USB_EPStartXfer+0x104>
 8002440:	5a32      	ldrh	r2, [r6, r0]
 8002442:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8002446:	0412      	lsls	r2, r2, #16
 8002448:	0c12      	lsrs	r2, r2, #16
 800244a:	5232      	strh	r2, [r6, r0]
 800244c:	5a32      	ldrh	r2, [r6, r0]
 800244e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002452:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002456:	b292      	uxth	r2, r2
 8002458:	5232      	strh	r2, [r6, r0]
 800245a:	e008      	b.n	800246e <USB_EPStartXfer+0x116>
 800245c:	2a3e      	cmp	r2, #62	; 0x3e
 800245e:	d80b      	bhi.n	8002478 <USB_EPStartXfer+0x120>
 8002460:	0857      	lsrs	r7, r2, #1
 8002462:	07d2      	lsls	r2, r2, #31
 8002464:	bf48      	it	mi
 8002466:	3701      	addmi	r7, #1
 8002468:	02bf      	lsls	r7, r7, #10
 800246a:	b2bf      	uxth	r7, r7
 800246c:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800246e:	8922      	ldrh	r2, [r4, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002470:	4628      	mov	r0, r5
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002472:	f7ff ff61 	bl	8002338 <USB_WritePMA>
 8002476:	e78d      	b.n	8002394 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002478:	0957      	lsrs	r7, r2, #5
 800247a:	06d2      	lsls	r2, r2, #27
 800247c:	4aa7      	ldr	r2, [pc, #668]	; (800271c <USB_EPStartXfer+0x3c4>)
 800247e:	bf08      	it	eq
 8002480:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002484:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002488:	e7e5      	b.n	8002456 <USB_EPStartXfer+0xfe>
 800248a:	2801      	cmp	r0, #1
 800248c:	d1ef      	bne.n	800246e <USB_EPStartXfer+0x116>
 800248e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002492:	7820      	ldrb	r0, [r4, #0]
 8002494:	b296      	uxth	r6, r2
 8002496:	f205 4204 	addw	r2, r5, #1028	; 0x404
 800249a:	0100      	lsls	r0, r0, #4
 800249c:	4432      	add	r2, r6
 800249e:	5283      	strh	r3, [r0, r2]
 80024a0:	e7e5      	b.n	800246e <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80024a2:	fa1f fe82 	uxth.w	lr, r2
 80024a6:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80024aa:	4472      	add	r2, lr
 80024ac:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80024b0:	8922      	ldrh	r2, [r4, #8]
 80024b2:	f7ff ff41 	bl	8002338 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80024b6:	6a22      	ldr	r2, [r4, #32]
 80024b8:	6923      	ldr	r3, [r4, #16]
            ep->xfer_buff += len;
 80024ba:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80024bc:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80024be:	bf84      	itt	hi
 80024c0:	1b97      	subhi	r7, r2, r6
 80024c2:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80024c4:	7860      	ldrb	r0, [r4, #1]
            ep->xfer_buff += len;
 80024c6:	4431      	add	r1, r6
 80024c8:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db -= len;
 80024ca:	6227      	str	r7, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80024cc:	b293      	uxth	r3, r2
 80024ce:	bb50      	cbnz	r0, 8002526 <USB_EPStartXfer+0x1ce>
 80024d0:	f8b5 0050 	ldrh.w	r0, [r5, #80]	; 0x50
 80024d4:	7826      	ldrb	r6, [r4, #0]
 80024d6:	b280      	uxth	r0, r0
 80024d8:	f205 470c 	addw	r7, r5, #1036	; 0x40c
 80024dc:	0136      	lsls	r6, r6, #4
 80024de:	4438      	add	r0, r7
 80024e0:	b96a      	cbnz	r2, 80024fe <USB_EPStartXfer+0x1a6>
 80024e2:	5a32      	ldrh	r2, [r6, r0]
 80024e4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80024e8:	0412      	lsls	r2, r2, #16
 80024ea:	0c12      	lsrs	r2, r2, #16
 80024ec:	5232      	strh	r2, [r6, r0]
 80024ee:	5a32      	ldrh	r2, [r6, r0]
 80024f0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80024f4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80024f8:	b292      	uxth	r2, r2
 80024fa:	5232      	strh	r2, [r6, r0]
 80024fc:	e008      	b.n	8002510 <USB_EPStartXfer+0x1b8>
 80024fe:	2a3e      	cmp	r2, #62	; 0x3e
 8002500:	d808      	bhi.n	8002514 <USB_EPStartXfer+0x1bc>
 8002502:	0857      	lsrs	r7, r2, #1
 8002504:	07d2      	lsls	r2, r2, #31
 8002506:	bf48      	it	mi
 8002508:	3701      	addmi	r7, #1
 800250a:	02bf      	lsls	r7, r7, #10
 800250c:	b2bf      	uxth	r7, r7
 800250e:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002510:	8962      	ldrh	r2, [r4, #10]
 8002512:	e7ad      	b.n	8002470 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002514:	0957      	lsrs	r7, r2, #5
 8002516:	06d2      	lsls	r2, r2, #27
 8002518:	4a80      	ldr	r2, [pc, #512]	; (800271c <USB_EPStartXfer+0x3c4>)
 800251a:	bf08      	it	eq
 800251c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002520:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8002524:	e7e8      	b.n	80024f8 <USB_EPStartXfer+0x1a0>
 8002526:	2801      	cmp	r0, #1
 8002528:	d1f2      	bne.n	8002510 <USB_EPStartXfer+0x1b8>
 800252a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800252e:	7820      	ldrb	r0, [r4, #0]
 8002530:	b296      	uxth	r6, r2
 8002532:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8002536:	0100      	lsls	r0, r0, #4
 8002538:	4432      	add	r2, r6
 800253a:	5283      	strh	r3, [r0, r2]
 800253c:	e7e8      	b.n	8002510 <USB_EPStartXfer+0x1b8>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800253e:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8002542:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002546:	0412      	lsls	r2, r2, #16
 8002548:	0c12      	lsrs	r2, r2, #16
 800254a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002552:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002556:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	b296      	uxth	r6, r2
 800255e:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002562:	4432      	add	r2, r6
 8002564:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002568:	8922      	ldrh	r2, [r4, #8]
 800256a:	e782      	b.n	8002472 <USB_EPStartXfer+0x11a>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800256c:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002570:	b2b3      	uxth	r3, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002572:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002576:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800257a:	b290      	uxth	r0, r2
 800257c:	bf15      	itete	ne
 800257e:	f205 420c 	addwne	r2, r5, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002582:	f205 4204 	addweq	r2, r5, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002586:	1812      	addne	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002588:	1812      	addeq	r2, r2, r0
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800258a:	bf15      	itete	ne
 800258c:	f822 300c 	strhne.w	r3, [r2, ip]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002590:	f822 300c 	strheq.w	r3, [r2, ip]
          pmabuffer = ep->pmaaddr1;
 8002594:	8962      	ldrhne	r2, [r4, #10]
          pmabuffer = ep->pmaaddr0;
 8002596:	8922      	ldrheq	r2, [r4, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002598:	4628      	mov	r0, r5
 800259a:	f7ff fecd 	bl	8002338 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800259e:	7863      	ldrb	r3, [r4, #1]
 80025a0:	7822      	ldrb	r2, [r4, #0]
 80025a2:	b973      	cbnz	r3, 80025c2 <USB_EPStartXfer+0x26a>
 80025a4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80025a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b0:	041b      	lsls	r3, r3, #16
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025bc:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80025c0:	e6e8      	b.n	8002394 <USB_EPStartXfer+0x3c>
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	f47f aee6 	bne.w	8002394 <USB_EPStartXfer+0x3c>
 80025c8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80025cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d4:	041b      	lsls	r3, r3, #16
 80025d6:	0c1b      	lsrs	r3, r3, #16
 80025d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e0:	e7ec      	b.n	80025bc <USB_EPStartXfer+0x264>
    if (ep->doublebuffer == 0U)
 80025e2:	b9ea      	cbnz	r2, 8002620 <USB_EPStartXfer+0x2c8>
      if (ep->xfer_len > ep->maxpacket)
 80025e4:	69a3      	ldr	r3, [r4, #24]
 80025e6:	6921      	ldr	r1, [r4, #16]
 80025e8:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80025ea:	bf88      	it	hi
 80025ec:	1a5a      	subhi	r2, r3, r1
 80025ee:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80025f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80025f4:	bf88      	it	hi
 80025f6:	460b      	movhi	r3, r1
 80025f8:	7821      	ldrb	r1, [r4, #0]
 80025fa:	b292      	uxth	r2, r2
 80025fc:	f200 400c 	addw	r0, r0, #1036	; 0x40c
 8002600:	0109      	lsls	r1, r1, #4
 8002602:	4402      	add	r2, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 80c8 	beq.w	800279a <USB_EPStartXfer+0x442>
 800260a:	2b3e      	cmp	r3, #62	; 0x3e
 800260c:	f200 80d3 	bhi.w	80027b6 <USB_EPStartXfer+0x45e>
 8002610:	0858      	lsrs	r0, r3, #1
 8002612:	07de      	lsls	r6, r3, #31
 8002614:	bf48      	it	mi
 8002616:	3001      	addmi	r0, #1
 8002618:	0280      	lsls	r0, r0, #10
 800261a:	b280      	uxth	r0, r0
 800261c:	5250      	strh	r0, [r2, r1]
 800261e:	e048      	b.n	80026b2 <USB_EPStartXfer+0x35a>
      if (ep->type == EP_TYPE_BULK)
 8002620:	78e3      	ldrb	r3, [r4, #3]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d17c      	bne.n	8002720 <USB_EPStartXfer+0x3c8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8002626:	bb51      	cbnz	r1, 800267e <USB_EPStartXfer+0x326>
 8002628:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800262c:	7821      	ldrb	r1, [r4, #0]
 800262e:	b293      	uxth	r3, r2
 8002630:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8002634:	441a      	add	r2, r3
 8002636:	6923      	ldr	r3, [r4, #16]
 8002638:	0109      	lsls	r1, r1, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d145      	bne.n	80026ca <USB_EPStartXfer+0x372>
 800263e:	5a88      	ldrh	r0, [r1, r2]
 8002640:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002644:	0400      	lsls	r0, r0, #16
 8002646:	0c00      	lsrs	r0, r0, #16
 8002648:	5288      	strh	r0, [r1, r2]
 800264a:	5a88      	ldrh	r0, [r1, r2]
 800264c:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8002650:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002654:	b280      	uxth	r0, r0
 8002656:	5288      	strh	r0, [r1, r2]
 8002658:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800265c:	7822      	ldrb	r2, [r4, #0]
 800265e:	b289      	uxth	r1, r1
 8002660:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	4401      	add	r1, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d03f      	beq.n	80026ec <USB_EPStartXfer+0x394>
 800266c:	2b3e      	cmp	r3, #62	; 0x3e
 800266e:	d84b      	bhi.n	8002708 <USB_EPStartXfer+0x3b0>
 8002670:	0858      	lsrs	r0, r3, #1
 8002672:	07db      	lsls	r3, r3, #31
 8002674:	bf48      	it	mi
 8002676:	3001      	addmi	r0, #1
 8002678:	0280      	lsls	r0, r0, #10
 800267a:	b280      	uxth	r0, r0
 800267c:	5250      	strh	r0, [r2, r1]
        if (ep->xfer_count != 0U)
 800267e:	69e3      	ldr	r3, [r4, #28]
 8002680:	b1bb      	cbz	r3, 80026b2 <USB_EPStartXfer+0x35a>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8002682:	f244 0340 	movw	r3, #16448	; 0x4040
 8002686:	7822      	ldrb	r2, [r4, #0]
 8002688:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800268c:	ea03 0001 	and.w	r0, r3, r1
 8002690:	438b      	bics	r3, r1
 8002692:	d000      	beq.n	8002696 <USB_EPStartXfer+0x33e>
 8002694:	b968      	cbnz	r0, 80026b2 <USB_EPStartXfer+0x35a>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8002696:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800269a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	041b      	lsls	r3, r3, #16
 80026a4:	0c1b      	lsrs	r3, r3, #16
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026ae:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026b2:	7822      	ldrb	r2, [r4, #0]
 80026b4:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80026b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	041b      	lsls	r3, r3, #16
 80026c2:	0c1b      	lsrs	r3, r3, #16
 80026c4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80026c8:	e66f      	b.n	80023aa <USB_EPStartXfer+0x52>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80026ca:	2b3e      	cmp	r3, #62	; 0x3e
 80026cc:	d805      	bhi.n	80026da <USB_EPStartXfer+0x382>
 80026ce:	0858      	lsrs	r0, r3, #1
 80026d0:	07de      	lsls	r6, r3, #31
 80026d2:	bf48      	it	mi
 80026d4:	3001      	addmi	r0, #1
 80026d6:	0280      	lsls	r0, r0, #10
 80026d8:	e7bc      	b.n	8002654 <USB_EPStartXfer+0x2fc>
 80026da:	095e      	lsrs	r6, r3, #5
 80026dc:	06d8      	lsls	r0, r3, #27
 80026de:	480f      	ldr	r0, [pc, #60]	; (800271c <USB_EPStartXfer+0x3c4>)
 80026e0:	bf08      	it	eq
 80026e2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80026e6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 80026ea:	e7b3      	b.n	8002654 <USB_EPStartXfer+0x2fc>
 80026ec:	5a53      	ldrh	r3, [r2, r1]
 80026ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	5253      	strh	r3, [r2, r1]
 80026f8:	5a53      	ldrh	r3, [r2, r1]
 80026fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002702:	b29b      	uxth	r3, r3
 8002704:	5253      	strh	r3, [r2, r1]
 8002706:	e7ba      	b.n	800267e <USB_EPStartXfer+0x326>
 8002708:	0958      	lsrs	r0, r3, #5
 800270a:	06df      	lsls	r7, r3, #27
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <USB_EPStartXfer+0x3c4>)
 800270e:	bf08      	it	eq
 8002710:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8002714:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002718:	e7f3      	b.n	8002702 <USB_EPStartXfer+0x3aa>
 800271a:	bf00      	nop
 800271c:	ffff8000 	.word	0xffff8000
      else if (ep->type == EP_TYPE_ISOC)
 8002720:	2b01      	cmp	r3, #1
 8002722:	d151      	bne.n	80027c8 <USB_EPStartXfer+0x470>
        if (ep->xfer_len > ep->maxpacket)
 8002724:	69a3      	ldr	r3, [r4, #24]
 8002726:	6922      	ldr	r2, [r4, #16]
 8002728:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 800272a:	bf94      	ite	ls
 800272c:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800272e:	1a98      	subhi	r0, r3, r2
 8002730:	61a0      	str	r0, [r4, #24]
 8002732:	bf88      	it	hi
 8002734:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002736:	2900      	cmp	r1, #0
 8002738:	d1bb      	bne.n	80026b2 <USB_EPStartXfer+0x35a>
 800273a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800273e:	7821      	ldrb	r1, [r4, #0]
 8002740:	b292      	uxth	r2, r2
 8002742:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8002746:	0109      	lsls	r1, r1, #4
 8002748:	4402      	add	r2, r0
 800274a:	b9ab      	cbnz	r3, 8002778 <USB_EPStartXfer+0x420>
 800274c:	5a88      	ldrh	r0, [r1, r2]
 800274e:	f420 40f8 	bic.w	r0, r0, #31744	; 0x7c00
 8002752:	0400      	lsls	r0, r0, #16
 8002754:	0c00      	lsrs	r0, r0, #16
 8002756:	5288      	strh	r0, [r1, r2]
 8002758:	5a88      	ldrh	r0, [r1, r2]
 800275a:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800275e:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002762:	b280      	uxth	r0, r0
 8002764:	5288      	strh	r0, [r1, r2]
 8002766:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800276a:	7822      	ldrb	r2, [r4, #0]
 800276c:	b289      	uxth	r1, r1
 800276e:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 8002772:	0112      	lsls	r2, r2, #4
 8002774:	4401      	add	r1, r0
 8002776:	e745      	b.n	8002604 <USB_EPStartXfer+0x2ac>
 8002778:	2b3e      	cmp	r3, #62	; 0x3e
 800277a:	d805      	bhi.n	8002788 <USB_EPStartXfer+0x430>
 800277c:	0858      	lsrs	r0, r3, #1
 800277e:	07de      	lsls	r6, r3, #31
 8002780:	bf48      	it	mi
 8002782:	3001      	addmi	r0, #1
 8002784:	0280      	lsls	r0, r0, #10
 8002786:	e7ec      	b.n	8002762 <USB_EPStartXfer+0x40a>
 8002788:	095e      	lsrs	r6, r3, #5
 800278a:	4810      	ldr	r0, [pc, #64]	; (80027cc <USB_EPStartXfer+0x474>)
 800278c:	06df      	lsls	r7, r3, #27
 800278e:	bf08      	it	eq
 8002790:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8002794:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
 8002798:	e7e3      	b.n	8002762 <USB_EPStartXfer+0x40a>
 800279a:	5a53      	ldrh	r3, [r2, r1]
 800279c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027a0:	041b      	lsls	r3, r3, #16
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	5253      	strh	r3, [r2, r1]
 80027a6:	5a53      	ldrh	r3, [r2, r1]
 80027a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	5253      	strh	r3, [r2, r1]
 80027b4:	e77d      	b.n	80026b2 <USB_EPStartXfer+0x35a>
 80027b6:	0958      	lsrs	r0, r3, #5
 80027b8:	06db      	lsls	r3, r3, #27
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <USB_EPStartXfer+0x474>)
 80027bc:	bf08      	it	eq
 80027be:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80027c2:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80027c6:	e7f3      	b.n	80027b0 <USB_EPStartXfer+0x458>
        return HAL_ERROR;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e5f5      	b.n	80023b8 <USB_EPStartXfer+0x60>
 80027cc:	ffff8000 	.word	0xffff8000

080027d0 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80027d0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 80027d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80027d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 80027da:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 80027dc:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80027de:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 80027e0:	462e      	mov	r6, r5
 80027e2:	3402      	adds	r4, #2
 80027e4:	b936      	cbnz	r6, 80027f4 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80027e6:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 80027e8:	bf44      	itt	mi
 80027ea:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80027ee:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80027f4:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 80027f8:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 80027fa:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80027fc:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8002800:	0a00      	lsrs	r0, r0, #8
 8002802:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8002806:	e7ec      	b.n	80027e2 <USB_ReadPMA+0x12>

08002808 <USBD_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_CfgFSDesc);
 8002808:	2322      	movs	r3, #34	; 0x22
 800280a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgFSDesc;
}
 800280c:	4800      	ldr	r0, [pc, #0]	; (8002810 <USBD_HID_GetFSCfgDesc+0x8>)
 800280e:	4770      	bx	lr
 8002810:	20000090 	.word	0x20000090

08002814 <USBD_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_CfgHSDesc);
 8002814:	2322      	movs	r3, #34	; 0x22
 8002816:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgHSDesc;
}
 8002818:	4800      	ldr	r0, [pc, #0]	; (800281c <USBD_HID_GetHSCfgDesc+0x8>)
 800281a:	4770      	bx	lr
 800281c:	200000b4 	.word	0x200000b4

08002820 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8002820:	2322      	movs	r3, #34	; 0x22
 8002822:	8003      	strh	r3, [r0, #0]
  return USBD_HID_OtherSpeedCfgDesc;
}
 8002824:	4800      	ldr	r0, [pc, #0]	; (8002828 <USBD_HID_GetOtherSpeedCfgDesc+0x8>)
 8002826:	4770      	bx	lr
 8002828:	200000f0 	.word	0x200000f0

0800282c <USBD_HID_DataIn>:
                                uint8_t epnum)
{

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800282c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8002830:	2000      	movs	r0, #0
 8002832:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002834:	4770      	bx	lr
	...

08002838 <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8002838:	230a      	movs	r3, #10
 800283a:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 800283c:	4800      	ldr	r0, [pc, #0]	; (8002840 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 800283e:	4770      	bx	lr
 8002840:	200000e4 	.word	0x200000e4

08002844 <USBD_HID_Setup>:
{
 8002844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8002846:	2200      	movs	r2, #0
 8002848:	780c      	ldrb	r4, [r1, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800284a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800284e:	f014 0460 	ands.w	r4, r4, #96	; 0x60
  uint16_t status_info = 0U;
 8002852:	f8ad 2006 	strh.w	r2, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002856:	d01e      	beq.n	8002896 <USBD_HID_Setup+0x52>
 8002858:	2c20      	cmp	r4, #32
 800285a:	d132      	bne.n	80028c2 <USBD_HID_Setup+0x7e>
      switch (req->bRequest)
 800285c:	784a      	ldrb	r2, [r1, #1]
 800285e:	3a02      	subs	r2, #2
 8002860:	2a09      	cmp	r2, #9
 8002862:	d82e      	bhi.n	80028c2 <USBD_HID_Setup+0x7e>
 8002864:	e8df f002 	tbb	[pc, r2]
 8002868:	2d2d0b14 	.word	0x2d2d0b14
 800286c:	2d2d2d2d 	.word	0x2d2d2d2d
 8002870:	0510      	.short	0x0510
          hhid->Protocol = (uint8_t)(req->wValue);
 8002872:	788a      	ldrb	r2, [r1, #2]
 8002874:	601a      	str	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8002876:	2400      	movs	r4, #0
}
 8002878:	4620      	mov	r0, r4
 800287a:	b003      	add	sp, #12
 800287c:	bd30      	pop	{r4, r5, pc}
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800287e:	2201      	movs	r2, #1
 8002880:	4619      	mov	r1, r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8002882:	f000 fbdc 	bl	800303e <USBD_CtlSendData>
 8002886:	e7f6      	b.n	8002876 <USBD_HID_Setup+0x32>
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002888:	884a      	ldrh	r2, [r1, #2]
 800288a:	0a12      	lsrs	r2, r2, #8
 800288c:	605a      	str	r2, [r3, #4]
          break;
 800288e:	e7f2      	b.n	8002876 <USBD_HID_Setup+0x32>
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8002890:	2201      	movs	r2, #1
 8002892:	1d19      	adds	r1, r3, #4
 8002894:	e7f5      	b.n	8002882 <USBD_HID_Setup+0x3e>
      switch (req->bRequest)
 8002896:	784d      	ldrb	r5, [r1, #1]
 8002898:	2d0b      	cmp	r5, #11
 800289a:	d812      	bhi.n	80028c2 <USBD_HID_Setup+0x7e>
 800289c:	e8df f005 	tbb	[pc, r5]
 80028a0:	11111106 	.word	0x11111106
 80028a4:	11151111 	.word	0x11151111
 80028a8:	31291111 	.word	0x31291111
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80028ac:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d106      	bne.n	80028c2 <USBD_HID_Setup+0x7e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80028b4:	2202      	movs	r2, #2
 80028b6:	f10d 0106 	add.w	r1, sp, #6
 80028ba:	f000 fbc0 	bl	800303e <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80028be:	462c      	mov	r4, r5
 80028c0:	e7da      	b.n	8002878 <USBD_HID_Setup+0x34>
            USBD_CtlError(pdev, req);
 80028c2:	f000 fb95 	bl	8002ff0 <USBD_CtlError>
            ret = USBD_FAIL;
 80028c6:	2402      	movs	r4, #2
 80028c8:	e7d6      	b.n	8002878 <USBD_HID_Setup+0x34>
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80028ca:	884b      	ldrh	r3, [r1, #2]
 80028cc:	0a1b      	lsrs	r3, r3, #8
 80028ce:	2b22      	cmp	r3, #34	; 0x22
 80028d0:	d107      	bne.n	80028e2 <USBD_HID_Setup+0x9e>
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80028d2:	88ca      	ldrh	r2, [r1, #6]
            pbuf = HID_MOUSE_ReportDesc;
 80028d4:	490e      	ldr	r1, [pc, #56]	; (8002910 <USBD_HID_Setup+0xcc>)
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80028d6:	2a4a      	cmp	r2, #74	; 0x4a
 80028d8:	bf28      	it	cs
 80028da:	224a      	movcs	r2, #74	; 0x4a
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80028dc:	f000 fbaf 	bl	800303e <USBD_CtlSendData>
 80028e0:	e7ca      	b.n	8002878 <USBD_HID_Setup+0x34>
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80028e2:	2b21      	cmp	r3, #33	; 0x21
 80028e4:	d1ed      	bne.n	80028c2 <USBD_HID_Setup+0x7e>
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80028e6:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_HID_Desc;
 80028e8:	490a      	ldr	r1, [pc, #40]	; (8002914 <USBD_HID_Setup+0xd0>)
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80028ea:	2a09      	cmp	r2, #9
 80028ec:	bf28      	it	cs
 80028ee:	2209      	movcs	r2, #9
          USBD_CtlSendData(pdev, pbuf, len);
 80028f0:	e7f4      	b.n	80028dc <USBD_HID_Setup+0x98>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80028f2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80028f6:	2a03      	cmp	r2, #3
 80028f8:	d1e3      	bne.n	80028c2 <USBD_HID_Setup+0x7e>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80028fa:	2201      	movs	r2, #1
 80028fc:	f103 0108 	add.w	r1, r3, #8
 8002900:	e7ec      	b.n	80028dc <USBD_HID_Setup+0x98>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002902:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002906:	2a03      	cmp	r2, #3
 8002908:	d1db      	bne.n	80028c2 <USBD_HID_Setup+0x7e>
            hhid->AltSetting = (uint8_t)(req->wValue);
 800290a:	788a      	ldrb	r2, [r1, #2]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	e7b3      	b.n	8002878 <USBD_HID_Setup+0x34>
 8002910:	2000000c 	.word	0x2000000c
 8002914:	200000d8 	.word	0x200000d8

08002918 <USBD_HID_DeInit>:
{
 8002918:	b538      	push	{r3, r4, r5, lr}
 800291a:	4604      	mov	r4, r0
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800291c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 800291e:	2181      	movs	r1, #129	; 0x81
 8002920:	f000 fd09 	bl	8003336 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8002924:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8002928:	62e5      	str	r5, [r4, #44]	; 0x2c
  if (pdev->pClassData != NULL)
 800292a:	b118      	cbz	r0, 8002934 <USBD_HID_DeInit+0x1c>
    USBD_free(pdev->pClassData);
 800292c:	f000 fd50 	bl	80033d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8002930:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8002934:	2000      	movs	r0, #0
 8002936:	bd38      	pop	{r3, r4, r5, pc}

08002938 <USBD_HID_Init>:
{
 8002938:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800293a:	2304      	movs	r3, #4
 800293c:	2203      	movs	r2, #3
 800293e:	2181      	movs	r1, #129	; 0x81
{
 8002940:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8002942:	f000 fcec 	bl	800331e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8002946:	2301      	movs	r3, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8002948:	2010      	movs	r0, #16
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800294a:	62e3      	str	r3, [r4, #44]	; 0x2c
  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800294c:	f000 fd3c 	bl	80033c8 <USBD_static_malloc>
 8002950:	4603      	mov	r3, r0
 8002952:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8002956:	b110      	cbz	r0, 800295e <USBD_HID_Init+0x26>
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002958:	2000      	movs	r0, #0
 800295a:	7318      	strb	r0, [r3, #12]
}
 800295c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800295e:	2002      	movs	r0, #2
 8002960:	e7fc      	b.n	800295c <USBD_HID_Init+0x24>

08002962 <USBD_HID_SendReport>:
{
 8002962:	b510      	push	{r4, lr}
 8002964:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002966:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800296a:	2a03      	cmp	r2, #3
 800296c:	d109      	bne.n	8002982 <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800296e:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
    if (hhid->state == HID_IDLE)
 8002972:	7b14      	ldrb	r4, [r2, #12]
 8002974:	b92c      	cbnz	r4, 8002982 <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8002976:	2401      	movs	r4, #1
 8002978:	7314      	strb	r4, [r2, #12]
      USBD_LL_Transmit(pdev,
 800297a:	460a      	mov	r2, r1
 800297c:	2181      	movs	r1, #129	; 0x81
 800297e:	f000 fd10 	bl	80033a2 <USBD_LL_Transmit>
}
 8002982:	2000      	movs	r0, #0
 8002984:	bd10      	pop	{r4, pc}

08002986 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002986:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002988:	b180      	cbz	r0, 80029ac <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800298a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800298e:	b113      	cbz	r3, 8002996 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002996:	b109      	cbz	r1, 800299c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002998:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800299c:	2301      	movs	r3, #1
  pdev->id = id;
 800299e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80029a0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80029a4:	f000 fc80 	bl	80032a8 <USBD_LL_Init>

  return USBD_OK;
 80029a8:	2000      	movs	r0, #0
}
 80029aa:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80029ac:	2002      	movs	r0, #2
 80029ae:	e7fc      	b.n	80029aa <USBD_Init+0x24>

080029b0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 80029b0:	b119      	cbz	r1, 80029ba <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80029b2:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 80029b6:	2000      	movs	r0, #0
 80029b8:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80029ba:	2002      	movs	r0, #2
  }

  return status;
}
 80029bc:	4770      	bx	lr

080029be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80029be:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80029c0:	f000 fca4 	bl	800330c <USBD_LL_Start>

  return USBD_OK;
}
 80029c4:	2000      	movs	r0, #0
 80029c6:	bd08      	pop	{r3, pc}

080029c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80029c8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80029ca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80029ce:	b90b      	cbnz	r3, 80029d4 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80029d0:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80029d2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4798      	blx	r3
 80029d8:	2800      	cmp	r0, #0
 80029da:	d0fa      	beq.n	80029d2 <USBD_SetClassConfig+0xa>
 80029dc:	e7f8      	b.n	80029d0 <USBD_SetClassConfig+0x8>

080029de <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80029de:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80029e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4798      	blx	r3

  return USBD_OK;
}
 80029e8:	2000      	movs	r0, #0
 80029ea:	bd08      	pop	{r3, pc}

080029ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80029ec:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80029ee:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80029f2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80029f4:	4628      	mov	r0, r5
 80029f6:	f000 fae7 	bl	8002fc8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80029fa:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80029fc:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002a00:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002a04:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002a08:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002a0c:	f001 031f 	and.w	r3, r1, #31
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d008      	beq.n	8002a26 <USBD_LL_SetupStage+0x3a>
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d00b      	beq.n	8002a30 <USBD_LL_SetupStage+0x44>
 8002a18:	b97b      	cbnz	r3, 8002a3a <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8002a1a:	4629      	mov	r1, r5
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f000 f8fb 	bl	8002c18 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8002a22:	2000      	movs	r0, #0
 8002a24:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002a26:	4629      	mov	r1, r5
 8002a28:	4620      	mov	r0, r4
 8002a2a:	f000 fa1f 	bl	8002e6c <USBD_StdItfReq>
      break;
 8002a2e:	e7f8      	b.n	8002a22 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8002a30:	4629      	mov	r1, r5
 8002a32:	4620      	mov	r0, r4
 8002a34:	f000 fa3e 	bl	8002eb4 <USBD_StdEPReq>
      break;
 8002a38:	e7f3      	b.n	8002a22 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002a40:	f000 fc82 	bl	8003348 <USBD_LL_StallEP>
      break;
 8002a44:	e7ed      	b.n	8002a22 <USBD_LL_SetupStage+0x36>

08002a46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a48:	4604      	mov	r4, r0
 8002a4a:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002a4c:	460d      	mov	r5, r1
 8002a4e:	bb39      	cbnz	r1, 8002aa0 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002a50:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d11c      	bne.n	8002a92 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8002a58:	e9d0 6258 	ldrd	r6, r2, [r0, #352]	; 0x160
 8002a5c:	4296      	cmp	r6, r2
 8002a5e:	d90b      	bls.n	8002a78 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8002a60:	1ab6      	subs	r6, r6, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002a62:	42b2      	cmp	r2, r6
 8002a64:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8002a66:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002a6a:	bf8c      	ite	hi
 8002a6c:	b2b2      	uxthhi	r2, r6
 8002a6e:	b292      	uxthls	r2, r2
 8002a70:	f000 fafa 	bl	8003068 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002a74:	4628      	mov	r0, r5
 8002a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002a78:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	b123      	cbz	r3, 8002a8a <USBD_LL_DataOutStage+0x44>
 8002a80:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002a84:	2a03      	cmp	r2, #3
 8002a86:	d100      	bne.n	8002a8a <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8002a88:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	f000 faf4 	bl	8003078 <USBD_CtlSendStatus>
 8002a90:	e7f0      	b.n	8002a74 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d1ee      	bne.n	8002a74 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002a96:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002a9a:	f000 fc55 	bl	8003348 <USBD_LL_StallEP>
 8002a9e:	e7e9      	b.n	8002a74 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002aa0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	b133      	cbz	r3, 8002ab6 <USBD_LL_DataOutStage+0x70>
 8002aa8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002aac:	2a03      	cmp	r2, #3
 8002aae:	d102      	bne.n	8002ab6 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002ab0:	4798      	blx	r3
  return USBD_OK;
 8002ab2:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8002ab4:	e7de      	b.n	8002a74 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8002ab6:	2502      	movs	r5, #2
 8002ab8:	e7dc      	b.n	8002a74 <USBD_LL_DataOutStage+0x2e>

08002aba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002abc:	4604      	mov	r4, r0
 8002abe:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002ac0:	460d      	mov	r5, r1
 8002ac2:	2900      	cmp	r1, #0
 8002ac4:	d147      	bne.n	8002b56 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002ac6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d13c      	bne.n	8002b48 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002ace:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8002ad2:	429e      	cmp	r6, r3
 8002ad4:	d914      	bls.n	8002b00 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 8002ad6:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002ad8:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8002ada:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	f000 fabb 	bl	8003058 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002ae2:	462b      	mov	r3, r5
 8002ae4:	462a      	mov	r2, r5
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f000 fc63 	bl	80033b4 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002aee:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002afc:	4628      	mov	r0, r5
 8002afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002b00:	69c2      	ldr	r2, [r0, #28]
 8002b02:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b06:	fb03 2616 	mls	r6, r3, r6, r2
 8002b0a:	b95e      	cbnz	r6, 8002b24 <USBD_LL_DataInStage+0x6a>
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d809      	bhi.n	8002b24 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8002b10:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d205      	bcs.n	8002b24 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002b18:	460a      	mov	r2, r1
 8002b1a:	f000 fa9d 	bl	8003058 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002b1e:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8002b22:	e7de      	b.n	8002ae2 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002b24:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	b12b      	cbz	r3, 8002b38 <USBD_LL_DataInStage+0x7e>
 8002b2c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002b30:	2a03      	cmp	r2, #3
 8002b32:	d101      	bne.n	8002b38 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002b34:	4620      	mov	r0, r4
 8002b36:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 fc04 	bl	8003348 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002b40:	4620      	mov	r0, r4
 8002b42:	f000 faa4 	bl	800308e <USBD_CtlReceiveStatus>
 8002b46:	e7d2      	b.n	8002aee <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002b48:	f033 0304 	bics.w	r3, r3, #4
 8002b4c:	d1cf      	bne.n	8002aee <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002b4e:	2180      	movs	r1, #128	; 0x80
 8002b50:	f000 fbfa 	bl	8003348 <USBD_LL_StallEP>
 8002b54:	e7cb      	b.n	8002aee <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8002b56:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	b133      	cbz	r3, 8002b6c <USBD_LL_DataInStage+0xb2>
 8002b5e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002b62:	2a03      	cmp	r2, #3
 8002b64:	d102      	bne.n	8002b6c <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8002b66:	4798      	blx	r3
  return USBD_OK;
 8002b68:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002b6a:	e7c7      	b.n	8002afc <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8002b6c:	2502      	movs	r5, #2
 8002b6e:	e7c5      	b.n	8002afc <USBD_LL_DataInStage+0x42>

08002b70 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002b70:	2200      	movs	r2, #0
{
 8002b72:	b570      	push	{r4, r5, r6, lr}
 8002b74:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002b76:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002b78:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	2340      	movs	r3, #64	; 0x40
 8002b7e:	f000 fbce 	bl	800331e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002b82:	4633      	mov	r3, r6
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	2200      	movs	r2, #0
 8002b88:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002b8a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002b8e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002b92:	f000 fbc4 	bl	800331e <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002b96:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002b98:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002b9c:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002b9e:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002ba0:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002ba4:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002ba8:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002baa:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8002bae:	b123      	cbz	r3, 8002bba <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002bb0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002bba:	2000      	movs	r0, #0
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}

08002bbe <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002bbe:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4770      	bx	lr

08002bc4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002bc4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002bc8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4770      	bx	lr

08002bd6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002bd6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002bda:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002bdc:	bf04      	itt	eq
 8002bde:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002be2:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002be6:	2000      	movs	r0, #0
 8002be8:	4770      	bx	lr

08002bea <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002bea:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002bec:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002bf0:	2a03      	cmp	r2, #3
 8002bf2:	d104      	bne.n	8002bfe <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002bf4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	b103      	cbz	r3, 8002bfe <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002bfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002bfe:	2000      	movs	r0, #0
 8002c00:	bd08      	pop	{r3, pc}

08002c02 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8002c02:	b510      	push	{r4, lr}
 8002c04:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	f000 fb9e 	bl	8003348 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002c0c:	4620      	mov	r0, r4
}
 8002c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002c12:	2100      	movs	r1, #0
 8002c14:	f000 bb98 	b.w	8003348 <USBD_LL_StallEP>

08002c18 <USBD_StdDevReq>:
{
 8002c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c1a:	780b      	ldrb	r3, [r1, #0]
 8002c1c:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002c22:	2b20      	cmp	r3, #32
{
 8002c24:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002c26:	d012      	beq.n	8002c4e <USBD_StdDevReq+0x36>
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d010      	beq.n	8002c4e <USBD_StdDevReq+0x36>
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d151      	bne.n	8002cd4 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8002c30:	784b      	ldrb	r3, [r1, #1]
 8002c32:	2b09      	cmp	r3, #9
 8002c34:	d84e      	bhi.n	8002cd4 <USBD_StdDevReq+0xbc>
 8002c36:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c3a:	00ee      	.short	0x00ee
 8002c3c:	004d010a 	.word	0x004d010a
 8002c40:	004d0103 	.word	0x004d0103
 8002c44:	00130087 	.word	0x00130087
 8002c48:	00d6004d 	.word	0x00d6004d
 8002c4c:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8002c4e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002c52:	4629      	mov	r1, r5
 8002c54:	4620      	mov	r0, r4
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4798      	blx	r3
}
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	b003      	add	sp, #12
 8002c5e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002c66:	884b      	ldrh	r3, [r1, #2]
 8002c68:	0a1a      	lsrs	r2, r3, #8
 8002c6a:	3a01      	subs	r2, #1
 8002c6c:	2a06      	cmp	r2, #6
 8002c6e:	d831      	bhi.n	8002cd4 <USBD_StdDevReq+0xbc>
 8002c70:	e8df f002 	tbb	[pc, r2]
 8002c74:	30231604 	.word	0x30231604
 8002c78:	4830      	.short	0x4830
 8002c7a:	52          	.byte	0x52
 8002c7b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002c7c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002c80:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002c82:	7c20      	ldrb	r0, [r4, #16]
 8002c84:	f10d 0106 	add.w	r1, sp, #6
 8002c88:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002c8a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002c8e:	2a00      	cmp	r2, #0
 8002c90:	d056      	beq.n	8002d40 <USBD_StdDevReq+0x128>
 8002c92:	88eb      	ldrh	r3, [r5, #6]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d14a      	bne.n	8002d2e <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8002c98:	4620      	mov	r0, r4
 8002c9a:	f000 f9ed 	bl	8003078 <USBD_CtlSendStatus>
 8002c9e:	e7dc      	b.n	8002c5a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ca0:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8002ca2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ca6:	b932      	cbnz	r2, 8002cb6 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002caa:	f10d 0006 	add.w	r0, sp, #6
 8002cae:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002cb0:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002cb2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8002cb4:	e7e9      	b.n	8002c8a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	e7f7      	b.n	8002caa <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d809      	bhi.n	8002cd4 <USBD_StdDevReq+0xbc>
 8002cc0:	e8df f003 	tbb	[pc, r3]
 8002cc4:	14100c03 	.word	0x14100c03
 8002cc8:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002cca:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002cce:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1d6      	bne.n	8002c82 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	f7ff ff94 	bl	8002c02 <USBD_CtlError.constprop.0>
        break;
 8002cda:	e7be      	b.n	8002c5a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002cdc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	e7f5      	b.n	8002cd0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002ce4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	e7f1      	b.n	8002cd0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002cec:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	e7ed      	b.n	8002cd0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002cf4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	e7e9      	b.n	8002cd0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002cfc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	e7e5      	b.n	8002cd0 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002d04:	7c03      	ldrb	r3, [r0, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1e4      	bne.n	8002cd4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002d0a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d0e:	f10d 0006 	add.w	r0, sp, #6
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	4798      	blx	r3
  if (err != 0U)
 8002d16:	e7b8      	b.n	8002c8a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002d18:	7c03      	ldrb	r3, [r0, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1da      	bne.n	8002cd4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002d1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d22:	f10d 0006 	add.w	r0, sp, #6
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002d2a:	2307      	movs	r3, #7
 8002d2c:	e7c1      	b.n	8002cb2 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	bf28      	it	cs
 8002d32:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002d34:	4601      	mov	r1, r0
 8002d36:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002d38:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002d3c:	f000 f97f 	bl	800303e <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002d40:	88eb      	ldrh	r3, [r5, #6]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d189      	bne.n	8002c5a <USBD_StdDevReq+0x42>
 8002d46:	e7a7      	b.n	8002c98 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002d48:	888b      	ldrh	r3, [r1, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1c2      	bne.n	8002cd4 <USBD_StdDevReq+0xbc>
 8002d4e:	88cb      	ldrh	r3, [r1, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1bf      	bne.n	8002cd4 <USBD_StdDevReq+0xbc>
 8002d54:	884d      	ldrh	r5, [r1, #2]
 8002d56:	2d7f      	cmp	r5, #127	; 0x7f
 8002d58:	d8bc      	bhi.n	8002cd4 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002d5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d0b8      	beq.n	8002cd4 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002d62:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8002d64:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002d68:	f000 fb12 	bl	8003390 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f000 f983 	bl	8003078 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002d72:	b11d      	cbz	r5, 8002d7c <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002d74:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002d76:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002d7a:	e76e      	b.n	8002c5a <USBD_StdDevReq+0x42>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e7fa      	b.n	8002d76 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8002d80:	7889      	ldrb	r1, [r1, #2]
 8002d82:	4d39      	ldr	r5, [pc, #228]	; (8002e68 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002d84:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002d86:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002d88:	d8a4      	bhi.n	8002cd4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8002d8a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d008      	beq.n	8002da4 <USBD_StdDevReq+0x18c>
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d015      	beq.n	8002dc2 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8002d96:	f7ff ff34 	bl	8002c02 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	7829      	ldrb	r1, [r5, #0]
 8002d9e:	f7ff fe1e 	bl	80029de <USBD_ClrClassConfig>
        break;
 8002da2:	e75a      	b.n	8002c5a <USBD_StdDevReq+0x42>
        if (cfgidx)
 8002da4:	2900      	cmp	r1, #0
 8002da6:	f43f af77 	beq.w	8002c98 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8002daa:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002dac:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8002dae:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002db0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8002db4:	4620      	mov	r0, r4
 8002db6:	f7ff fe07 	bl	80029c8 <USBD_SetClassConfig>
 8002dba:	2802      	cmp	r0, #2
 8002dbc:	f47f af6c 	bne.w	8002c98 <USBD_StdDevReq+0x80>
 8002dc0:	e788      	b.n	8002cd4 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8002dc2:	b931      	cbnz	r1, 8002dd2 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002dc4:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8002dc6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8002dc8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8002dcc:	f7ff fe07 	bl	80029de <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8002dd0:	e762      	b.n	8002c98 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8002dd2:	6841      	ldr	r1, [r0, #4]
 8002dd4:	2901      	cmp	r1, #1
 8002dd6:	f43f af5f 	beq.w	8002c98 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8002dda:	b2c9      	uxtb	r1, r1
 8002ddc:	f7ff fdff 	bl	80029de <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8002de0:	7829      	ldrb	r1, [r5, #0]
 8002de2:	6061      	str	r1, [r4, #4]
 8002de4:	e7e6      	b.n	8002db4 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8002de6:	88ca      	ldrh	r2, [r1, #6]
 8002de8:	2a01      	cmp	r2, #1
 8002dea:	f47f af73 	bne.w	8002cd4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8002dee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d80a      	bhi.n	8002e0c <USBD_StdDevReq+0x1f4>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f43f af6c 	beq.w	8002cd4 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8002dfc:	4601      	mov	r1, r0
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002e04:	4620      	mov	r0, r4
 8002e06:	f000 f91a 	bl	800303e <USBD_CtlSendData>
      break;
 8002e0a:	e726      	b.n	8002c5a <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	f47f af61 	bne.w	8002cd4 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8002e12:	1d01      	adds	r1, r0, #4
 8002e14:	e7f6      	b.n	8002e04 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8002e16:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	f63f af59 	bhi.w	8002cd4 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8002e22:	88cb      	ldrh	r3, [r1, #6]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	f47f af55 	bne.w	8002cd4 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8002e2e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8002e32:	b10b      	cbz	r3, 8002e38 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8002e34:	2303      	movs	r3, #3
 8002e36:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f104 010c 	add.w	r1, r4, #12
 8002e3e:	e7e1      	b.n	8002e04 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002e40:	884b      	ldrh	r3, [r1, #2]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	f47f af09 	bne.w	8002c5a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002e48:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8002e4c:	e724      	b.n	8002c98 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8002e4e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002e52:	3b01      	subs	r3, #1
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	f63f af3d 	bhi.w	8002cd4 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8002e5a:	884b      	ldrh	r3, [r1, #2]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f47f aefc 	bne.w	8002c5a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e7f0      	b.n	8002e48 <USBD_StdDevReq+0x230>
 8002e66:	bf00      	nop
 8002e68:	20000a38 	.word	0x20000a38

08002e6c <USBD_StdItfReq>:
{
 8002e6c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e6e:	780b      	ldrb	r3, [r1, #0]
{
 8002e70:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e72:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002e76:	2a40      	cmp	r2, #64	; 0x40
{
 8002e78:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e7a:	d001      	beq.n	8002e80 <USBD_StdItfReq+0x14>
 8002e7c:	065b      	lsls	r3, r3, #25
 8002e7e:	d415      	bmi.n	8002eac <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8002e80:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8002e84:	3b01      	subs	r3, #1
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d810      	bhi.n	8002eac <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8002e8a:	792b      	ldrb	r3, [r5, #4]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d80d      	bhi.n	8002eac <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8002e90:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002e94:	4629      	mov	r1, r5
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8002e9c:	88eb      	ldrh	r3, [r5, #6]
 8002e9e:	b91b      	cbnz	r3, 8002ea8 <USBD_StdItfReq+0x3c>
 8002ea0:	b910      	cbnz	r0, 8002ea8 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f000 f8e8 	bl	8003078 <USBD_CtlSendStatus>
}
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8002eac:	4620      	mov	r0, r4
 8002eae:	f7ff fea8 	bl	8002c02 <USBD_CtlError.constprop.0>
          break;
 8002eb2:	e7f9      	b.n	8002ea8 <USBD_StdItfReq+0x3c>

08002eb4 <USBD_StdEPReq>:
{
 8002eb4:	b538      	push	{r3, r4, r5, lr}
 8002eb6:	780a      	ldrb	r2, [r1, #0]
 8002eb8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002eba:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002ebe:	2a20      	cmp	r2, #32
{
 8002ec0:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002ec2:	d027      	beq.n	8002f14 <USBD_StdEPReq+0x60>
 8002ec4:	2a40      	cmp	r2, #64	; 0x40
 8002ec6:	d025      	beq.n	8002f14 <USBD_StdEPReq+0x60>
 8002ec8:	bb92      	cbnz	r2, 8002f30 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8002eca:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8002ecc:	888d      	ldrh	r5, [r1, #4]
 8002ece:	2a01      	cmp	r2, #1
 8002ed0:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8002ed2:	d03d      	beq.n	8002f50 <USBD_StdEPReq+0x9c>
 8002ed4:	2a03      	cmp	r2, #3
 8002ed6:	d025      	beq.n	8002f24 <USBD_StdEPReq+0x70>
 8002ed8:	bb52      	cbnz	r2, 8002f30 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8002eda:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d04d      	beq.n	8002f7e <USBD_StdEPReq+0xca>
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d124      	bne.n	8002f30 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8002ee6:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002ee8:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8002eec:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002ef0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8002ef4:	d054      	beq.n	8002fa0 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	b1d3      	cbz	r3, 8002f30 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002efa:	2314      	movs	r3, #20
 8002efc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8002f00:	fb05 3303 	mla	r3, r5, r3, r3
 8002f04:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8002f06:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8002f0a:	d155      	bne.n	8002fb8 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8002f0c:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002f0e:	2202      	movs	r2, #2
 8002f10:	4629      	mov	r1, r5
 8002f12:	e041      	b.n	8002f98 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8002f14:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	6892      	ldr	r2, [r2, #8]
 8002f1e:	4790      	blx	r2
}
 8002f20:	2000      	movs	r0, #0
 8002f22:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8002f24:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002f28:	2a02      	cmp	r2, #2
 8002f2a:	d01f      	beq.n	8002f6c <USBD_StdEPReq+0xb8>
 8002f2c:	2a03      	cmp	r2, #3
 8002f2e:	d003      	beq.n	8002f38 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff fe66 	bl	8002c02 <USBD_CtlError.constprop.0>
              break;
 8002f36:	e7f3      	b.n	8002f20 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002f38:	885a      	ldrh	r2, [r3, #2]
 8002f3a:	b92a      	cbnz	r2, 8002f48 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8002f3c:	064a      	lsls	r2, r1, #25
 8002f3e:	d003      	beq.n	8002f48 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8002f40:	88db      	ldrh	r3, [r3, #6]
 8002f42:	b90b      	cbnz	r3, 8002f48 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8002f44:	f000 fa00 	bl	8003348 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f000 f895 	bl	8003078 <USBD_CtlSendStatus>
              break;
 8002f4e:	e7e7      	b.n	8002f20 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8002f50:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002f54:	2a02      	cmp	r2, #2
 8002f56:	d009      	beq.n	8002f6c <USBD_StdEPReq+0xb8>
 8002f58:	2a03      	cmp	r2, #3
 8002f5a:	d1e9      	bne.n	8002f30 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8002f5c:	885b      	ldrh	r3, [r3, #2]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1de      	bne.n	8002f20 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8002f62:	064d      	lsls	r5, r1, #25
 8002f64:	d0f0      	beq.n	8002f48 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8002f66:	f000 f9f8 	bl	800335a <USBD_LL_ClearStallEP>
 8002f6a:	e7ed      	b.n	8002f48 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002f6c:	064b      	lsls	r3, r1, #25
 8002f6e:	d0df      	beq.n	8002f30 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8002f70:	f000 f9ea 	bl	8003348 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	4620      	mov	r0, r4
 8002f78:	f000 f9e6 	bl	8003348 <USBD_LL_StallEP>
 8002f7c:	e7d0      	b.n	8002f20 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8002f7e:	064a      	lsls	r2, r1, #25
 8002f80:	d1d6      	bne.n	8002f30 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002f82:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8002f84:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002f88:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002f8c:	bf4c      	ite	mi
 8002f8e:	f100 0114 	addmi.w	r1, r0, #20
 8002f92:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8002f96:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f000 f850 	bl	800303e <USBD_CtlSendData>
              break;
 8002f9e:	e7bf      	b.n	8002f20 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8002fa0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0c3      	beq.n	8002f30 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002fa8:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8002faa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8002fae:	fb03 0505 	mla	r5, r3, r5, r0
 8002fb2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8002fb6:	e7a6      	b.n	8002f06 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 f9d7 	bl	800336c <USBD_LL_IsStallEP>
 8002fbe:	b108      	cbz	r0, 8002fc4 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e7a3      	b.n	8002f0c <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8002fc4:	6028      	str	r0, [r5, #0]
 8002fc6:	e7a2      	b.n	8002f0e <USBD_StdEPReq+0x5a>

08002fc8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8002fc8:	780b      	ldrb	r3, [r1, #0]
 8002fca:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8002fcc:	784b      	ldrb	r3, [r1, #1]
 8002fce:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8002fd0:	78ca      	ldrb	r2, [r1, #3]
 8002fd2:	788b      	ldrb	r3, [r1, #2]
 8002fd4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002fd8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8002fda:	794a      	ldrb	r2, [r1, #5]
 8002fdc:	790b      	ldrb	r3, [r1, #4]
 8002fde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002fe2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8002fe4:	79ca      	ldrb	r2, [r1, #7]
 8002fe6:	798b      	ldrb	r3, [r1, #6]
 8002fe8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002fec:	80c3      	strh	r3, [r0, #6]
}
 8002fee:	4770      	bx	lr

08002ff0 <USBD_CtlError>:
{
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	f000 f9a7 	bl	8003348 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002ffa:	4620      	mov	r0, r4
}
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003000:	2100      	movs	r1, #0
 8003002:	f000 b9a1 	b.w	8003348 <USBD_LL_StallEP>

08003006 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003006:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003008:	b188      	cbz	r0, 800302e <USBD_GetString+0x28>
 800300a:	2400      	movs	r4, #0
 800300c:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800300e:	4623      	mov	r3, r4
 8003010:	3401      	adds	r4, #1
 8003012:	5d05      	ldrb	r5, [r0, r4]
 8003014:	2d00      	cmp	r5, #0
 8003016:	d1fa      	bne.n	800300e <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003018:	b2db      	uxtb	r3, r3
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8003020:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003022:	2303      	movs	r3, #3
 8003024:	704b      	strb	r3, [r1, #1]
 8003026:	2302      	movs	r3, #2
    while (*desc != '\0')
 8003028:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 800302c:	b904      	cbnz	r4, 8003030 <USBD_GetString+0x2a>
}
 800302e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	54cc      	strb	r4, [r1, r3]
 8003034:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003036:	3302      	adds	r3, #2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	548d      	strb	r5, [r1, r2]
 800303c:	e7f4      	b.n	8003028 <USBD_GetString+0x22>

0800303e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800303e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003040:	2202      	movs	r2, #2
{
 8003042:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8003044:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003048:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800304c:	460a      	mov	r2, r1
 800304e:	2100      	movs	r1, #0
 8003050:	f000 f9a7 	bl	80033a2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003054:	2000      	movs	r0, #0
 8003056:	bd10      	pop	{r4, pc}

08003058 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8003058:	b508      	push	{r3, lr}
 800305a:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800305c:	460a      	mov	r2, r1
 800305e:	2100      	movs	r1, #0
 8003060:	f000 f99f 	bl	80033a2 <USBD_LL_Transmit>

  return USBD_OK;
}
 8003064:	2000      	movs	r0, #0
 8003066:	bd08      	pop	{r3, pc}

08003068 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8003068:	b508      	push	{r3, lr}
 800306a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800306c:	460a      	mov	r2, r1
 800306e:	2100      	movs	r1, #0
 8003070:	f000 f9a0 	bl	80033b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8003074:	2000      	movs	r0, #0
 8003076:	bd08      	pop	{r3, pc}

08003078 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8003078:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800307a:	2304      	movs	r3, #4
 800307c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8003080:	2300      	movs	r3, #0
 8003082:	461a      	mov	r2, r3
 8003084:	4619      	mov	r1, r3
 8003086:	f000 f98c 	bl	80033a2 <USBD_LL_Transmit>

  return USBD_OK;
}
 800308a:	2000      	movs	r0, #0
 800308c:	bd08      	pop	{r3, pc}

0800308e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800308e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8003090:	2305      	movs	r3, #5
 8003092:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003096:	2300      	movs	r3, #0
 8003098:	461a      	mov	r2, r3
 800309a:	4619      	mov	r1, r3
 800309c:	f000 f98a 	bl	80033b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80030a0:	2000      	movs	r0, #0
 80030a2:	bd08      	pop	{r3, pc}

080030a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80030a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80030a6:	2200      	movs	r2, #0
 80030a8:	490b      	ldr	r1, [pc, #44]	; (80030d8 <MX_USB_DEVICE_Init+0x34>)
 80030aa:	480c      	ldr	r0, [pc, #48]	; (80030dc <MX_USB_DEVICE_Init+0x38>)
 80030ac:	f7ff fc6b 	bl	8002986 <USBD_Init>
 80030b0:	b108      	cbz	r0, 80030b6 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80030b2:	f7fd f955 	bl	8000360 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80030b6:	490a      	ldr	r1, [pc, #40]	; (80030e0 <MX_USB_DEVICE_Init+0x3c>)
 80030b8:	4808      	ldr	r0, [pc, #32]	; (80030dc <MX_USB_DEVICE_Init+0x38>)
 80030ba:	f7ff fc79 	bl	80029b0 <USBD_RegisterClass>
 80030be:	b108      	cbz	r0, 80030c4 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80030c0:	f7fd f94e 	bl	8000360 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80030c4:	4805      	ldr	r0, [pc, #20]	; (80030dc <MX_USB_DEVICE_Init+0x38>)
 80030c6:	f7ff fc7a 	bl	80029be <USBD_Start>
 80030ca:	b118      	cbz	r0, 80030d4 <MX_USB_DEVICE_Init+0x30>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80030cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80030d0:	f7fd b946 	b.w	8000360 <Error_Handler>
}
 80030d4:	bd08      	pop	{r3, pc}
 80030d6:	bf00      	nop
 80030d8:	20000114 	.word	0x20000114
 80030dc:	20000a3c 	.word	0x20000a3c
 80030e0:	20000058 	.word	0x20000058

080030e4 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80030e4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80030e6:	4801      	ldr	r0, [pc, #4]	; (80030ec <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80030e8:	800b      	strh	r3, [r1, #0]
}
 80030ea:	4770      	bx	lr
 80030ec:	20000130 	.word	0x20000130

080030f0 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80030f0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80030f2:	4801      	ldr	r0, [pc, #4]	; (80030f8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80030f4:	800b      	strh	r3, [r1, #0]
}
 80030f6:	4770      	bx	lr
 80030f8:	20000144 	.word	0x20000144

080030fc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80030fc:	2300      	movs	r3, #0
 80030fe:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003100:	461e      	mov	r6, r3
 8003102:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8003104:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 8003106:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800310a:	bf34      	ite	cc
 800310c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800310e:	3437      	addcs	r4, #55	; 0x37
 8003110:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003114:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 8003118:	3301      	adds	r3, #1
 800311a:	b2dc      	uxtb	r4, r3
 800311c:	42a2      	cmp	r2, r4
    value = value << 4;
 800311e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8003122:	d8ef      	bhi.n	8003104 <IntToUnicode+0x8>
  }
}
 8003124:	bd70      	pop	{r4, r5, r6, pc}
	...

08003128 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8003128:	231a      	movs	r3, #26
{
 800312a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800312c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800312e:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <USBD_FS_SerialStrDescriptor+0x30>)
 8003130:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	; 0x7e8
  deviceserial0 += deviceserial2;
 8003134:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	; 0x7f0
  if (deviceserial0 != 0)
 8003138:	1880      	adds	r0, r0, r2
 800313a:	d00a      	beq.n	8003152 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800313c:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	; 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003140:	4906      	ldr	r1, [pc, #24]	; (800315c <USBD_FS_SerialStrDescriptor+0x34>)
 8003142:	2208      	movs	r2, #8
 8003144:	f7ff ffda 	bl	80030fc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003148:	2204      	movs	r2, #4
 800314a:	4620      	mov	r0, r4
 800314c:	3110      	adds	r1, #16
 800314e:	f7ff ffd5 	bl	80030fc <IntToUnicode>
}
 8003152:	4803      	ldr	r0, [pc, #12]	; (8003160 <USBD_FS_SerialStrDescriptor+0x38>)
 8003154:	bd10      	pop	{r4, pc}
 8003156:	bf00      	nop
 8003158:	1ffff000 	.word	0x1ffff000
 800315c:	2000014a 	.word	0x2000014a
 8003160:	20000148 	.word	0x20000148

08003164 <USBD_FS_ManufacturerStrDescriptor>:
{
 8003164:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003166:	4c04      	ldr	r4, [pc, #16]	; (8003178 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003168:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800316a:	4804      	ldr	r0, [pc, #16]	; (800317c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800316c:	4621      	mov	r1, r4
 800316e:	f7ff ff4a 	bl	8003006 <USBD_GetString>
}
 8003172:	4620      	mov	r0, r4
 8003174:	bd10      	pop	{r4, pc}
 8003176:	bf00      	nop
 8003178:	20000d00 	.word	0x20000d00
 800317c:	0800409a 	.word	0x0800409a

08003180 <USBD_FS_ProductStrDescriptor>:
{
 8003180:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003182:	4c04      	ldr	r4, [pc, #16]	; (8003194 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003184:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <USBD_FS_ProductStrDescriptor+0x18>)
 8003188:	4621      	mov	r1, r4
 800318a:	f7ff ff3c 	bl	8003006 <USBD_GetString>
}
 800318e:	4620      	mov	r0, r4
 8003190:	bd10      	pop	{r4, pc}
 8003192:	bf00      	nop
 8003194:	20000d00 	.word	0x20000d00
 8003198:	080040ad 	.word	0x080040ad

0800319c <USBD_FS_ConfigStrDescriptor>:
{
 800319c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800319e:	4c04      	ldr	r4, [pc, #16]	; (80031b0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80031a0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80031a2:	4804      	ldr	r0, [pc, #16]	; (80031b4 <USBD_FS_ConfigStrDescriptor+0x18>)
 80031a4:	4621      	mov	r1, r4
 80031a6:	f7ff ff2e 	bl	8003006 <USBD_GetString>
}
 80031aa:	4620      	mov	r0, r4
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	bf00      	nop
 80031b0:	20000d00 	.word	0x20000d00
 80031b4:	080040bd 	.word	0x080040bd

080031b8 <USBD_FS_InterfaceStrDescriptor>:
{
 80031b8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80031ba:	4c04      	ldr	r4, [pc, #16]	; (80031cc <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80031bc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80031be:	4804      	ldr	r0, [pc, #16]	; (80031d0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80031c0:	4621      	mov	r1, r4
 80031c2:	f7ff ff20 	bl	8003006 <USBD_GetString>
}
 80031c6:	4620      	mov	r0, r4
 80031c8:	bd10      	pop	{r4, pc}
 80031ca:	bf00      	nop
 80031cc:	20000d00 	.word	0x20000d00
 80031d0:	080040c8 	.word	0x080040c8

080031d4 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80031d4:	2803      	cmp	r0, #3
 80031d6:	bf9a      	itte	ls
 80031d8:	4b01      	ldrls	r3, [pc, #4]	; (80031e0 <USBD_Get_USB_Status+0xc>)
 80031da:	5c18      	ldrbls	r0, [r3, r0]
{
 80031dc:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80031de:	4770      	bx	lr
 80031e0:	080040d6 	.word	0x080040d6

080031e4 <HAL_PCD_MspInit>:
{
 80031e4:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80031e6:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_PCD_MspInit+0x3c>)
 80031e8:	6802      	ldr	r2, [r0, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d115      	bne.n	800321a <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80031ee:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80031f2:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80031f4:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80031f6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031fa:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80031fc:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80031fe:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003200:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800320a:	f7fd f9d9 	bl	80005c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800320e:	2014      	movs	r0, #20
}
 8003210:	b003      	add	sp, #12
 8003212:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003216:	f7fd ba05 	b.w	8000624 <HAL_NVIC_EnableIRQ>
}
 800321a:	b003      	add	sp, #12
 800321c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003220:	40005c00 	.word	0x40005c00

08003224 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003224:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8003228:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800322c:	f7ff bbde 	b.w	80029ec <USBD_LL_SetupStage>

08003230 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003230:	2328      	movs	r3, #40	; 0x28
 8003232:	fb03 0301 	mla	r3, r3, r1, r0
 8003236:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800323a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800323e:	f7ff bc02 	b.w	8002a46 <USBD_LL_DataOutStage>

08003242 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003242:	2328      	movs	r3, #40	; 0x28
 8003244:	fb03 0301 	mla	r3, r3, r1, r0
 8003248:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800324c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800324e:	f7ff bc34 	b.w	8002aba <USBD_LL_DataInStage>

08003252 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003252:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003256:	f7ff bcc8 	b.w	8002bea <USBD_LL_SOF>

0800325a <HAL_PCD_ResetCallback>:
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800325a:	6883      	ldr	r3, [r0, #8]
{
 800325c:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800325e:	2b02      	cmp	r3, #2
{
 8003260:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8003262:	d001      	beq.n	8003268 <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8003264:	f7fd f87c 	bl	8000360 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003268:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800326c:	2101      	movs	r1, #1
 800326e:	f7ff fca6 	bl	8002bbe <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003272:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8003276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800327a:	f7ff bc79 	b.w	8002b70 <USBD_LL_Reset>
	...

08003280 <HAL_PCD_SuspendCallback>:
{
 8003280:	b510      	push	{r4, lr}
 8003282:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003284:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8003288:	f7ff fc9c 	bl	8002bc4 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800328c:	69a3      	ldr	r3, [r4, #24]
 800328e:	b123      	cbz	r3, 800329a <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003290:	4a02      	ldr	r2, [pc, #8]	; (800329c <HAL_PCD_SuspendCallback+0x1c>)
 8003292:	6913      	ldr	r3, [r2, #16]
 8003294:	f043 0306 	orr.w	r3, r3, #6
 8003298:	6113      	str	r3, [r2, #16]
}
 800329a:	bd10      	pop	{r4, pc}
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80032a0:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80032a4:	f7ff bc97 	b.w	8002bd6 <USBD_LL_Resume>

080032a8 <USBD_LL_Init>:
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80032a8:	2308      	movs	r3, #8
{
 80032aa:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <USBD_LL_Init+0x5c>)
{
 80032ae:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80032b0:	4815      	ldr	r0, [pc, #84]	; (8003308 <USBD_LL_Init+0x60>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80032b2:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80032b6:	2302      	movs	r3, #2
 80032b8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80032ba:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 80032bc:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80032c0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80032c4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80032c8:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80032ca:	f7fd fafd 	bl	80008c8 <HAL_PCD_Init>
 80032ce:	b108      	cbz	r0, 80032d4 <USBD_LL_Init+0x2c>
    Error_Handler( );
 80032d0:	f7fd f846 	bl	8000360 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2318      	movs	r3, #24
 80032d8:	4611      	mov	r1, r2
 80032da:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80032de:	f7fe f8b8 	bl	8001452 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80032e2:	2358      	movs	r3, #88	; 0x58
 80032e4:	2200      	movs	r2, #0
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80032ec:	f7fe f8b1 	bl	8001452 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80032f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f4:	2200      	movs	r2, #0
 80032f6:	2181      	movs	r1, #129	; 0x81
 80032f8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80032fc:	f7fe f8a9 	bl	8001452 <HAL_PCDEx_PMAConfig>
}
 8003300:	2000      	movs	r0, #0
 8003302:	bd10      	pop	{r4, pc}
 8003304:	40005c00 	.word	0x40005c00
 8003308:	20000f00 	.word	0x20000f00

0800330c <USBD_LL_Start>:
{
 800330c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800330e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003312:	f7fd fb52 	bl	80009ba <HAL_PCD_Start>
}
 8003316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800331a:	f7ff bf5b 	b.w	80031d4 <USBD_Get_USB_Status>

0800331e <USBD_LL_OpenEP>:
{
 800331e:	b510      	push	{r4, lr}
 8003320:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003322:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8003326:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003328:	4623      	mov	r3, r4
 800332a:	f7fd ffa3 	bl	8001274 <HAL_PCD_EP_Open>
}
 800332e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003332:	f7ff bf4f 	b.w	80031d4 <USBD_Get_USB_Status>

08003336 <USBD_LL_CloseEP>:
{
 8003336:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003338:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800333c:	f7fd ffcb 	bl	80012d6 <HAL_PCD_EP_Close>
}
 8003340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003344:	f7ff bf46 	b.w	80031d4 <USBD_Get_USB_Status>

08003348 <USBD_LL_StallEP>:
{
 8003348:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800334a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800334e:	f7fe f81b 	bl	8001388 <HAL_PCD_EP_SetStall>
}
 8003352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003356:	f7ff bf3d 	b.w	80031d4 <USBD_Get_USB_Status>

0800335a <USBD_LL_ClearStallEP>:
{
 800335a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800335c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003360:	f7fe f846 	bl	80013f0 <HAL_PCD_EP_ClrStall>
}
 8003364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8003368:	f7ff bf34 	b.w	80031d4 <USBD_Get_USB_Status>

0800336c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800336c:	2228      	movs	r2, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 800336e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003372:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003376:	bf1b      	ittet	ne
 8003378:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800337c:	fb01 2102 	mlane	r1, r1, r2, r2
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003380:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003384:	185b      	addne	r3, r3, r1
 8003386:	bf14      	ite	ne
 8003388:	7898      	ldrbne	r0, [r3, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800338a:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 800338e:	4770      	bx	lr

08003390 <USBD_LL_SetUSBAddress>:
{
 8003390:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003392:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003396:	f7fd fb29 	bl	80009ec <HAL_PCD_SetAddress>
}
 800339a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800339e:	f7ff bf19 	b.w	80031d4 <USBD_Get_USB_Status>

080033a2 <USBD_LL_Transmit>:
{
 80033a2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80033a4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80033a8:	f7fd ffd4 	bl	8001354 <HAL_PCD_EP_Transmit>
}
 80033ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80033b0:	f7ff bf10 	b.w	80031d4 <USBD_Get_USB_Status>

080033b4 <USBD_LL_PrepareReceive>:
{
 80033b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80033b6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80033ba:	f7fd ffb4 	bl	8001326 <HAL_PCD_EP_Receive>
}
 80033be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80033c2:	f7ff bf07 	b.w	80031d4 <USBD_Get_USB_Status>
	...

080033c8 <USBD_static_malloc>:
}
 80033c8:	4800      	ldr	r0, [pc, #0]	; (80033cc <USBD_static_malloc+0x4>)
 80033ca:	4770      	bx	lr
 80033cc:	200011ec 	.word	0x200011ec

080033d0 <USBD_static_free>:
}
 80033d0:	4770      	bx	lr

080033d2 <HAL_PCDEx_SetConnectionState>:
}
 80033d2:	4770      	bx	lr

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000164 	.word	0x20000164

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	2600      	movs	r6, #0
 80033e4:	4d0c      	ldr	r5, [pc, #48]	; (8003418 <__libc_init_array+0x38>)
 80033e6:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e8:	1b64      	subs	r4, r4, r5
 80033ea:	10a4      	asrs	r4, r4, #2
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	f000 fe24 	bl	800403c <_init>
 80033f4:	2600      	movs	r6, #0
 80033f6:	4d0a      	ldr	r5, [pc, #40]	; (8003420 <__libc_init_array+0x40>)
 80033f8:	4c0a      	ldr	r4, [pc, #40]	; (8003424 <__libc_init_array+0x44>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	0800425c 	.word	0x0800425c
 800341c:	0800425c 	.word	0x0800425c
 8003420:	0800425c 	.word	0x0800425c
 8003424:	08004260 	.word	0x08004260

08003428 <memset>:
 8003428:	4603      	mov	r3, r0
 800342a:	4402      	add	r2, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <siscanf>:
 8003438:	b40e      	push	{r1, r2, r3}
 800343a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800343e:	b530      	push	{r4, r5, lr}
 8003440:	b09c      	sub	sp, #112	; 0x70
 8003442:	ac1f      	add	r4, sp, #124	; 0x7c
 8003444:	f854 5b04 	ldr.w	r5, [r4], #4
 8003448:	f8ad 2014 	strh.w	r2, [sp, #20]
 800344c:	9002      	str	r0, [sp, #8]
 800344e:	9006      	str	r0, [sp, #24]
 8003450:	f7fc fe7c 	bl	800014c <strlen>
 8003454:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <siscanf+0x4c>)
 8003456:	9003      	str	r0, [sp, #12]
 8003458:	930b      	str	r3, [sp, #44]	; 0x2c
 800345a:	2300      	movs	r3, #0
 800345c:	930f      	str	r3, [sp, #60]	; 0x3c
 800345e:	9314      	str	r3, [sp, #80]	; 0x50
 8003460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003464:	9007      	str	r0, [sp, #28]
 8003466:	4808      	ldr	r0, [pc, #32]	; (8003488 <siscanf+0x50>)
 8003468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800346c:	462a      	mov	r2, r5
 800346e:	4623      	mov	r3, r4
 8003470:	a902      	add	r1, sp, #8
 8003472:	6800      	ldr	r0, [r0, #0]
 8003474:	9401      	str	r4, [sp, #4]
 8003476:	f000 f865 	bl	8003544 <__ssvfiscanf_r>
 800347a:	b01c      	add	sp, #112	; 0x70
 800347c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003480:	b003      	add	sp, #12
 8003482:	4770      	bx	lr
 8003484:	0800348d 	.word	0x0800348d
 8003488:	20000164 	.word	0x20000164

0800348c <__seofread>:
 800348c:	2000      	movs	r0, #0
 800348e:	4770      	bx	lr

08003490 <_sungetc_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	1c4b      	adds	r3, r1, #1
 8003494:	4614      	mov	r4, r2
 8003496:	d103      	bne.n	80034a0 <_sungetc_r+0x10>
 8003498:	f04f 35ff 	mov.w	r5, #4294967295
 800349c:	4628      	mov	r0, r5
 800349e:	bd38      	pop	{r3, r4, r5, pc}
 80034a0:	8993      	ldrh	r3, [r2, #12]
 80034a2:	b2cd      	uxtb	r5, r1
 80034a4:	f023 0320 	bic.w	r3, r3, #32
 80034a8:	8193      	strh	r3, [r2, #12]
 80034aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034ac:	6852      	ldr	r2, [r2, #4]
 80034ae:	b18b      	cbz	r3, 80034d4 <_sungetc_r+0x44>
 80034b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034b2:	4293      	cmp	r3, r2
 80034b4:	dd08      	ble.n	80034c8 <_sungetc_r+0x38>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	1e5a      	subs	r2, r3, #1
 80034ba:	6022      	str	r2, [r4, #0]
 80034bc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80034c0:	6863      	ldr	r3, [r4, #4]
 80034c2:	3301      	adds	r3, #1
 80034c4:	6063      	str	r3, [r4, #4]
 80034c6:	e7e9      	b.n	800349c <_sungetc_r+0xc>
 80034c8:	4621      	mov	r1, r4
 80034ca:	f000 fc31 	bl	8003d30 <__submore>
 80034ce:	2800      	cmp	r0, #0
 80034d0:	d0f1      	beq.n	80034b6 <_sungetc_r+0x26>
 80034d2:	e7e1      	b.n	8003498 <_sungetc_r+0x8>
 80034d4:	6921      	ldr	r1, [r4, #16]
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	b151      	cbz	r1, 80034f0 <_sungetc_r+0x60>
 80034da:	4299      	cmp	r1, r3
 80034dc:	d208      	bcs.n	80034f0 <_sungetc_r+0x60>
 80034de:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80034e2:	42a9      	cmp	r1, r5
 80034e4:	d104      	bne.n	80034f0 <_sungetc_r+0x60>
 80034e6:	3b01      	subs	r3, #1
 80034e8:	3201      	adds	r2, #1
 80034ea:	6023      	str	r3, [r4, #0]
 80034ec:	6062      	str	r2, [r4, #4]
 80034ee:	e7d5      	b.n	800349c <_sungetc_r+0xc>
 80034f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80034f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034f8:	6363      	str	r3, [r4, #52]	; 0x34
 80034fa:	2303      	movs	r3, #3
 80034fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80034fe:	4623      	mov	r3, r4
 8003500:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	2301      	movs	r3, #1
 8003508:	e7dc      	b.n	80034c4 <_sungetc_r+0x34>

0800350a <__ssrefill_r>:
 800350a:	b510      	push	{r4, lr}
 800350c:	460c      	mov	r4, r1
 800350e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003510:	b169      	cbz	r1, 800352e <__ssrefill_r+0x24>
 8003512:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003516:	4299      	cmp	r1, r3
 8003518:	d001      	beq.n	800351e <__ssrefill_r+0x14>
 800351a:	f000 fc5f 	bl	8003ddc <_free_r>
 800351e:	2000      	movs	r0, #0
 8003520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003522:	6360      	str	r0, [r4, #52]	; 0x34
 8003524:	6063      	str	r3, [r4, #4]
 8003526:	b113      	cbz	r3, 800352e <__ssrefill_r+0x24>
 8003528:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800352a:	6023      	str	r3, [r4, #0]
 800352c:	bd10      	pop	{r4, pc}
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	2300      	movs	r3, #0
 8003538:	6063      	str	r3, [r4, #4]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f043 0320 	orr.w	r3, r3, #32
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	e7f3      	b.n	800352c <__ssrefill_r+0x22>

08003544 <__ssvfiscanf_r>:
 8003544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003548:	460c      	mov	r4, r1
 800354a:	2100      	movs	r1, #0
 800354c:	4606      	mov	r6, r0
 800354e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8003552:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003556:	49a7      	ldr	r1, [pc, #668]	; (80037f4 <__ssvfiscanf_r+0x2b0>)
 8003558:	f10d 0804 	add.w	r8, sp, #4
 800355c:	91a0      	str	r1, [sp, #640]	; 0x280
 800355e:	49a6      	ldr	r1, [pc, #664]	; (80037f8 <__ssvfiscanf_r+0x2b4>)
 8003560:	4fa6      	ldr	r7, [pc, #664]	; (80037fc <__ssvfiscanf_r+0x2b8>)
 8003562:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8003800 <__ssvfiscanf_r+0x2bc>
 8003566:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800356a:	91a1      	str	r1, [sp, #644]	; 0x284
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	7813      	ldrb	r3, [r2, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 815c 	beq.w	800382e <__ssvfiscanf_r+0x2ea>
 8003576:	5dd9      	ldrb	r1, [r3, r7]
 8003578:	1c55      	adds	r5, r2, #1
 800357a:	f011 0108 	ands.w	r1, r1, #8
 800357e:	d019      	beq.n	80035b4 <__ssvfiscanf_r+0x70>
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	dd0f      	ble.n	80035a6 <__ssvfiscanf_r+0x62>
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	5cba      	ldrb	r2, [r7, r2]
 800358c:	0712      	lsls	r2, r2, #28
 800358e:	d401      	bmi.n	8003594 <__ssvfiscanf_r+0x50>
 8003590:	462a      	mov	r2, r5
 8003592:	e7ec      	b.n	800356e <__ssvfiscanf_r+0x2a>
 8003594:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003596:	3301      	adds	r3, #1
 8003598:	3201      	adds	r2, #1
 800359a:	9245      	str	r2, [sp, #276]	; 0x114
 800359c:	6862      	ldr	r2, [r4, #4]
 800359e:	6023      	str	r3, [r4, #0]
 80035a0:	3a01      	subs	r2, #1
 80035a2:	6062      	str	r2, [r4, #4]
 80035a4:	e7ec      	b.n	8003580 <__ssvfiscanf_r+0x3c>
 80035a6:	4621      	mov	r1, r4
 80035a8:	4630      	mov	r0, r6
 80035aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80035ac:	4798      	blx	r3
 80035ae:	2800      	cmp	r0, #0
 80035b0:	d0e9      	beq.n	8003586 <__ssvfiscanf_r+0x42>
 80035b2:	e7ed      	b.n	8003590 <__ssvfiscanf_r+0x4c>
 80035b4:	2b25      	cmp	r3, #37	; 0x25
 80035b6:	d012      	beq.n	80035de <__ssvfiscanf_r+0x9a>
 80035b8:	469a      	mov	sl, r3
 80035ba:	6863      	ldr	r3, [r4, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f340 8094 	ble.w	80036ea <__ssvfiscanf_r+0x1a6>
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	7813      	ldrb	r3, [r2, #0]
 80035c6:	4553      	cmp	r3, sl
 80035c8:	f040 8131 	bne.w	800382e <__ssvfiscanf_r+0x2ea>
 80035cc:	6863      	ldr	r3, [r4, #4]
 80035ce:	3201      	adds	r2, #1
 80035d0:	3b01      	subs	r3, #1
 80035d2:	6063      	str	r3, [r4, #4]
 80035d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80035d6:	6022      	str	r2, [r4, #0]
 80035d8:	3301      	adds	r3, #1
 80035da:	9345      	str	r3, [sp, #276]	; 0x114
 80035dc:	e7d8      	b.n	8003590 <__ssvfiscanf_r+0x4c>
 80035de:	9141      	str	r1, [sp, #260]	; 0x104
 80035e0:	9143      	str	r1, [sp, #268]	; 0x10c
 80035e2:	7853      	ldrb	r3, [r2, #1]
 80035e4:	2b2a      	cmp	r3, #42	; 0x2a
 80035e6:	bf04      	itt	eq
 80035e8:	2310      	moveq	r3, #16
 80035ea:	1c95      	addeq	r5, r2, #2
 80035ec:	f04f 020a 	mov.w	r2, #10
 80035f0:	bf08      	it	eq
 80035f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80035f4:	46aa      	mov	sl, r5
 80035f6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80035fa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80035fe:	2b09      	cmp	r3, #9
 8003600:	d91d      	bls.n	800363e <__ssvfiscanf_r+0xfa>
 8003602:	2203      	movs	r2, #3
 8003604:	487e      	ldr	r0, [pc, #504]	; (8003800 <__ssvfiscanf_r+0x2bc>)
 8003606:	f000 fbcd 	bl	8003da4 <memchr>
 800360a:	b140      	cbz	r0, 800361e <__ssvfiscanf_r+0xda>
 800360c:	2301      	movs	r3, #1
 800360e:	4655      	mov	r5, sl
 8003610:	eba0 0009 	sub.w	r0, r0, r9
 8003614:	fa03 f000 	lsl.w	r0, r3, r0
 8003618:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800361a:	4318      	orrs	r0, r3
 800361c:	9041      	str	r0, [sp, #260]	; 0x104
 800361e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003622:	2b78      	cmp	r3, #120	; 0x78
 8003624:	d806      	bhi.n	8003634 <__ssvfiscanf_r+0xf0>
 8003626:	2b57      	cmp	r3, #87	; 0x57
 8003628:	d810      	bhi.n	800364c <__ssvfiscanf_r+0x108>
 800362a:	2b25      	cmp	r3, #37	; 0x25
 800362c:	d0c4      	beq.n	80035b8 <__ssvfiscanf_r+0x74>
 800362e:	d857      	bhi.n	80036e0 <__ssvfiscanf_r+0x19c>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d065      	beq.n	8003700 <__ssvfiscanf_r+0x1bc>
 8003634:	2303      	movs	r3, #3
 8003636:	9347      	str	r3, [sp, #284]	; 0x11c
 8003638:	230a      	movs	r3, #10
 800363a:	9342      	str	r3, [sp, #264]	; 0x108
 800363c:	e072      	b.n	8003724 <__ssvfiscanf_r+0x1e0>
 800363e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003640:	4655      	mov	r5, sl
 8003642:	fb02 1103 	mla	r1, r2, r3, r1
 8003646:	3930      	subs	r1, #48	; 0x30
 8003648:	9143      	str	r1, [sp, #268]	; 0x10c
 800364a:	e7d3      	b.n	80035f4 <__ssvfiscanf_r+0xb0>
 800364c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003650:	2a20      	cmp	r2, #32
 8003652:	d8ef      	bhi.n	8003634 <__ssvfiscanf_r+0xf0>
 8003654:	a101      	add	r1, pc, #4	; (adr r1, 800365c <__ssvfiscanf_r+0x118>)
 8003656:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800365a:	bf00      	nop
 800365c:	0800370f 	.word	0x0800370f
 8003660:	08003635 	.word	0x08003635
 8003664:	08003635 	.word	0x08003635
 8003668:	0800376d 	.word	0x0800376d
 800366c:	08003635 	.word	0x08003635
 8003670:	08003635 	.word	0x08003635
 8003674:	08003635 	.word	0x08003635
 8003678:	08003635 	.word	0x08003635
 800367c:	08003635 	.word	0x08003635
 8003680:	08003635 	.word	0x08003635
 8003684:	08003635 	.word	0x08003635
 8003688:	08003783 	.word	0x08003783
 800368c:	08003759 	.word	0x08003759
 8003690:	080036e7 	.word	0x080036e7
 8003694:	080036e7 	.word	0x080036e7
 8003698:	080036e7 	.word	0x080036e7
 800369c:	08003635 	.word	0x08003635
 80036a0:	0800375d 	.word	0x0800375d
 80036a4:	08003635 	.word	0x08003635
 80036a8:	08003635 	.word	0x08003635
 80036ac:	08003635 	.word	0x08003635
 80036b0:	08003635 	.word	0x08003635
 80036b4:	08003793 	.word	0x08003793
 80036b8:	08003765 	.word	0x08003765
 80036bc:	08003707 	.word	0x08003707
 80036c0:	08003635 	.word	0x08003635
 80036c4:	08003635 	.word	0x08003635
 80036c8:	0800378f 	.word	0x0800378f
 80036cc:	08003635 	.word	0x08003635
 80036d0:	08003759 	.word	0x08003759
 80036d4:	08003635 	.word	0x08003635
 80036d8:	08003635 	.word	0x08003635
 80036dc:	0800370f 	.word	0x0800370f
 80036e0:	3b45      	subs	r3, #69	; 0x45
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d8a6      	bhi.n	8003634 <__ssvfiscanf_r+0xf0>
 80036e6:	2305      	movs	r3, #5
 80036e8:	e01b      	b.n	8003722 <__ssvfiscanf_r+0x1de>
 80036ea:	4621      	mov	r1, r4
 80036ec:	4630      	mov	r0, r6
 80036ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80036f0:	4798      	blx	r3
 80036f2:	2800      	cmp	r0, #0
 80036f4:	f43f af65 	beq.w	80035c2 <__ssvfiscanf_r+0x7e>
 80036f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80036fa:	2800      	cmp	r0, #0
 80036fc:	f040 808d 	bne.w	800381a <__ssvfiscanf_r+0x2d6>
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	e08f      	b.n	8003826 <__ssvfiscanf_r+0x2e2>
 8003706:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003708:	f042 0220 	orr.w	r2, r2, #32
 800370c:	9241      	str	r2, [sp, #260]	; 0x104
 800370e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003714:	9241      	str	r2, [sp, #260]	; 0x104
 8003716:	2210      	movs	r2, #16
 8003718:	2b6f      	cmp	r3, #111	; 0x6f
 800371a:	bf34      	ite	cc
 800371c:	2303      	movcc	r3, #3
 800371e:	2304      	movcs	r3, #4
 8003720:	9242      	str	r2, [sp, #264]	; 0x108
 8003722:	9347      	str	r3, [sp, #284]	; 0x11c
 8003724:	6863      	ldr	r3, [r4, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	dd42      	ble.n	80037b0 <__ssvfiscanf_r+0x26c>
 800372a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800372c:	0659      	lsls	r1, r3, #25
 800372e:	d404      	bmi.n	800373a <__ssvfiscanf_r+0x1f6>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	781a      	ldrb	r2, [r3, #0]
 8003734:	5cba      	ldrb	r2, [r7, r2]
 8003736:	0712      	lsls	r2, r2, #28
 8003738:	d441      	bmi.n	80037be <__ssvfiscanf_r+0x27a>
 800373a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800373c:	2b02      	cmp	r3, #2
 800373e:	dc50      	bgt.n	80037e2 <__ssvfiscanf_r+0x29e>
 8003740:	466b      	mov	r3, sp
 8003742:	4622      	mov	r2, r4
 8003744:	4630      	mov	r0, r6
 8003746:	a941      	add	r1, sp, #260	; 0x104
 8003748:	f000 f876 	bl	8003838 <_scanf_chars>
 800374c:	2801      	cmp	r0, #1
 800374e:	d06e      	beq.n	800382e <__ssvfiscanf_r+0x2ea>
 8003750:	2802      	cmp	r0, #2
 8003752:	f47f af1d 	bne.w	8003590 <__ssvfiscanf_r+0x4c>
 8003756:	e7cf      	b.n	80036f8 <__ssvfiscanf_r+0x1b4>
 8003758:	220a      	movs	r2, #10
 800375a:	e7dd      	b.n	8003718 <__ssvfiscanf_r+0x1d4>
 800375c:	2300      	movs	r3, #0
 800375e:	9342      	str	r3, [sp, #264]	; 0x108
 8003760:	2303      	movs	r3, #3
 8003762:	e7de      	b.n	8003722 <__ssvfiscanf_r+0x1de>
 8003764:	2308      	movs	r3, #8
 8003766:	9342      	str	r3, [sp, #264]	; 0x108
 8003768:	2304      	movs	r3, #4
 800376a:	e7da      	b.n	8003722 <__ssvfiscanf_r+0x1de>
 800376c:	4629      	mov	r1, r5
 800376e:	4640      	mov	r0, r8
 8003770:	f000 f9b4 	bl	8003adc <__sccl>
 8003774:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003776:	4605      	mov	r5, r0
 8003778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800377c:	9341      	str	r3, [sp, #260]	; 0x104
 800377e:	2301      	movs	r3, #1
 8003780:	e7cf      	b.n	8003722 <__ssvfiscanf_r+0x1de>
 8003782:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003788:	9341      	str	r3, [sp, #260]	; 0x104
 800378a:	2300      	movs	r3, #0
 800378c:	e7c9      	b.n	8003722 <__ssvfiscanf_r+0x1de>
 800378e:	2302      	movs	r3, #2
 8003790:	e7c7      	b.n	8003722 <__ssvfiscanf_r+0x1de>
 8003792:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003794:	06c3      	lsls	r3, r0, #27
 8003796:	f53f aefb 	bmi.w	8003590 <__ssvfiscanf_r+0x4c>
 800379a:	9b00      	ldr	r3, [sp, #0]
 800379c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800379e:	1d19      	adds	r1, r3, #4
 80037a0:	9100      	str	r1, [sp, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f010 0f01 	tst.w	r0, #1
 80037a8:	bf14      	ite	ne
 80037aa:	801a      	strhne	r2, [r3, #0]
 80037ac:	601a      	streq	r2, [r3, #0]
 80037ae:	e6ef      	b.n	8003590 <__ssvfiscanf_r+0x4c>
 80037b0:	4621      	mov	r1, r4
 80037b2:	4630      	mov	r0, r6
 80037b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80037b6:	4798      	blx	r3
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d0b6      	beq.n	800372a <__ssvfiscanf_r+0x1e6>
 80037bc:	e79c      	b.n	80036f8 <__ssvfiscanf_r+0x1b4>
 80037be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80037c0:	3201      	adds	r2, #1
 80037c2:	9245      	str	r2, [sp, #276]	; 0x114
 80037c4:	6862      	ldr	r2, [r4, #4]
 80037c6:	3a01      	subs	r2, #1
 80037c8:	2a00      	cmp	r2, #0
 80037ca:	6062      	str	r2, [r4, #4]
 80037cc:	dd02      	ble.n	80037d4 <__ssvfiscanf_r+0x290>
 80037ce:	3301      	adds	r3, #1
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	e7ad      	b.n	8003730 <__ssvfiscanf_r+0x1ec>
 80037d4:	4621      	mov	r1, r4
 80037d6:	4630      	mov	r0, r6
 80037d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80037da:	4798      	blx	r3
 80037dc:	2800      	cmp	r0, #0
 80037de:	d0a7      	beq.n	8003730 <__ssvfiscanf_r+0x1ec>
 80037e0:	e78a      	b.n	80036f8 <__ssvfiscanf_r+0x1b4>
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	dc0e      	bgt.n	8003804 <__ssvfiscanf_r+0x2c0>
 80037e6:	466b      	mov	r3, sp
 80037e8:	4622      	mov	r2, r4
 80037ea:	4630      	mov	r0, r6
 80037ec:	a941      	add	r1, sp, #260	; 0x104
 80037ee:	f000 f87d 	bl	80038ec <_scanf_i>
 80037f2:	e7ab      	b.n	800374c <__ssvfiscanf_r+0x208>
 80037f4:	08003491 	.word	0x08003491
 80037f8:	0800350b 	.word	0x0800350b
 80037fc:	080040fa 	.word	0x080040fa
 8003800:	080040da 	.word	0x080040da
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <__ssvfiscanf_r+0x2f0>)
 8003806:	2b00      	cmp	r3, #0
 8003808:	f43f aec2 	beq.w	8003590 <__ssvfiscanf_r+0x4c>
 800380c:	466b      	mov	r3, sp
 800380e:	4622      	mov	r2, r4
 8003810:	4630      	mov	r0, r6
 8003812:	a941      	add	r1, sp, #260	; 0x104
 8003814:	f3af 8000 	nop.w
 8003818:	e798      	b.n	800374c <__ssvfiscanf_r+0x208>
 800381a:	89a3      	ldrh	r3, [r4, #12]
 800381c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003820:	bf18      	it	ne
 8003822:	f04f 30ff 	movne.w	r0, #4294967295
 8003826:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800382a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800382e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003830:	e7f9      	b.n	8003826 <__ssvfiscanf_r+0x2e2>
 8003832:	bf00      	nop
 8003834:	00000000 	.word	0x00000000

08003838 <_scanf_chars>:
 8003838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800383c:	4615      	mov	r5, r2
 800383e:	688a      	ldr	r2, [r1, #8]
 8003840:	4680      	mov	r8, r0
 8003842:	460c      	mov	r4, r1
 8003844:	b932      	cbnz	r2, 8003854 <_scanf_chars+0x1c>
 8003846:	698a      	ldr	r2, [r1, #24]
 8003848:	2a00      	cmp	r2, #0
 800384a:	bf0c      	ite	eq
 800384c:	2201      	moveq	r2, #1
 800384e:	f04f 32ff 	movne.w	r2, #4294967295
 8003852:	608a      	str	r2, [r1, #8]
 8003854:	2700      	movs	r7, #0
 8003856:	6822      	ldr	r2, [r4, #0]
 8003858:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80038e8 <_scanf_chars+0xb0>
 800385c:	06d1      	lsls	r1, r2, #27
 800385e:	bf5f      	itttt	pl
 8003860:	681a      	ldrpl	r2, [r3, #0]
 8003862:	1d11      	addpl	r1, r2, #4
 8003864:	6019      	strpl	r1, [r3, #0]
 8003866:	6816      	ldrpl	r6, [r2, #0]
 8003868:	69a0      	ldr	r0, [r4, #24]
 800386a:	b188      	cbz	r0, 8003890 <_scanf_chars+0x58>
 800386c:	2801      	cmp	r0, #1
 800386e:	d107      	bne.n	8003880 <_scanf_chars+0x48>
 8003870:	682b      	ldr	r3, [r5, #0]
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	6963      	ldr	r3, [r4, #20]
 8003876:	5c9b      	ldrb	r3, [r3, r2]
 8003878:	b953      	cbnz	r3, 8003890 <_scanf_chars+0x58>
 800387a:	2f00      	cmp	r7, #0
 800387c:	d031      	beq.n	80038e2 <_scanf_chars+0xaa>
 800387e:	e022      	b.n	80038c6 <_scanf_chars+0x8e>
 8003880:	2802      	cmp	r0, #2
 8003882:	d120      	bne.n	80038c6 <_scanf_chars+0x8e>
 8003884:	682b      	ldr	r3, [r5, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f813 3009 	ldrb.w	r3, [r3, r9]
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	d41a      	bmi.n	80038c6 <_scanf_chars+0x8e>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	3701      	adds	r7, #1
 8003894:	06da      	lsls	r2, r3, #27
 8003896:	bf5e      	ittt	pl
 8003898:	682b      	ldrpl	r3, [r5, #0]
 800389a:	781b      	ldrbpl	r3, [r3, #0]
 800389c:	f806 3b01 	strbpl.w	r3, [r6], #1
 80038a0:	682a      	ldr	r2, [r5, #0]
 80038a2:	686b      	ldr	r3, [r5, #4]
 80038a4:	3201      	adds	r2, #1
 80038a6:	602a      	str	r2, [r5, #0]
 80038a8:	68a2      	ldr	r2, [r4, #8]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	3a01      	subs	r2, #1
 80038ae:	606b      	str	r3, [r5, #4]
 80038b0:	60a2      	str	r2, [r4, #8]
 80038b2:	b142      	cbz	r2, 80038c6 <_scanf_chars+0x8e>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	dcd7      	bgt.n	8003868 <_scanf_chars+0x30>
 80038b8:	4629      	mov	r1, r5
 80038ba:	4640      	mov	r0, r8
 80038bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80038c0:	4798      	blx	r3
 80038c2:	2800      	cmp	r0, #0
 80038c4:	d0d0      	beq.n	8003868 <_scanf_chars+0x30>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	f013 0310 	ands.w	r3, r3, #16
 80038cc:	d105      	bne.n	80038da <_scanf_chars+0xa2>
 80038ce:	68e2      	ldr	r2, [r4, #12]
 80038d0:	3201      	adds	r2, #1
 80038d2:	60e2      	str	r2, [r4, #12]
 80038d4:	69a2      	ldr	r2, [r4, #24]
 80038d6:	b102      	cbz	r2, 80038da <_scanf_chars+0xa2>
 80038d8:	7033      	strb	r3, [r6, #0]
 80038da:	2000      	movs	r0, #0
 80038dc:	6923      	ldr	r3, [r4, #16]
 80038de:	443b      	add	r3, r7
 80038e0:	6123      	str	r3, [r4, #16]
 80038e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e6:	bf00      	nop
 80038e8:	080040fa 	.word	0x080040fa

080038ec <_scanf_i>:
 80038ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f0:	460c      	mov	r4, r1
 80038f2:	4698      	mov	r8, r3
 80038f4:	4b75      	ldr	r3, [pc, #468]	; (8003acc <_scanf_i+0x1e0>)
 80038f6:	b087      	sub	sp, #28
 80038f8:	4682      	mov	sl, r0
 80038fa:	4616      	mov	r6, r2
 80038fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003900:	ab03      	add	r3, sp, #12
 8003902:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003906:	4b72      	ldr	r3, [pc, #456]	; (8003ad0 <_scanf_i+0x1e4>)
 8003908:	69a1      	ldr	r1, [r4, #24]
 800390a:	4a72      	ldr	r2, [pc, #456]	; (8003ad4 <_scanf_i+0x1e8>)
 800390c:	4627      	mov	r7, r4
 800390e:	2903      	cmp	r1, #3
 8003910:	bf18      	it	ne
 8003912:	461a      	movne	r2, r3
 8003914:	68a3      	ldr	r3, [r4, #8]
 8003916:	9201      	str	r2, [sp, #4]
 8003918:	1e5a      	subs	r2, r3, #1
 800391a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800391e:	bf81      	itttt	hi
 8003920:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003924:	eb03 0905 	addhi.w	r9, r3, r5
 8003928:	f240 135d 	movwhi	r3, #349	; 0x15d
 800392c:	60a3      	strhi	r3, [r4, #8]
 800392e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003932:	bf98      	it	ls
 8003934:	f04f 0900 	movls.w	r9, #0
 8003938:	463d      	mov	r5, r7
 800393a:	f04f 0b00 	mov.w	fp, #0
 800393e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	6831      	ldr	r1, [r6, #0]
 8003946:	ab03      	add	r3, sp, #12
 8003948:	2202      	movs	r2, #2
 800394a:	7809      	ldrb	r1, [r1, #0]
 800394c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003950:	f000 fa28 	bl	8003da4 <memchr>
 8003954:	b328      	cbz	r0, 80039a2 <_scanf_i+0xb6>
 8003956:	f1bb 0f01 	cmp.w	fp, #1
 800395a:	d159      	bne.n	8003a10 <_scanf_i+0x124>
 800395c:	6862      	ldr	r2, [r4, #4]
 800395e:	b92a      	cbnz	r2, 800396c <_scanf_i+0x80>
 8003960:	2308      	movs	r3, #8
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	6063      	str	r3, [r4, #4]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	6022      	str	r2, [r4, #0]
 800396c:	6822      	ldr	r2, [r4, #0]
 800396e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003972:	6022      	str	r2, [r4, #0]
 8003974:	68a2      	ldr	r2, [r4, #8]
 8003976:	1e51      	subs	r1, r2, #1
 8003978:	60a1      	str	r1, [r4, #8]
 800397a:	b192      	cbz	r2, 80039a2 <_scanf_i+0xb6>
 800397c:	6832      	ldr	r2, [r6, #0]
 800397e:	1c51      	adds	r1, r2, #1
 8003980:	6031      	str	r1, [r6, #0]
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	f805 2b01 	strb.w	r2, [r5], #1
 8003988:	6872      	ldr	r2, [r6, #4]
 800398a:	3a01      	subs	r2, #1
 800398c:	2a00      	cmp	r2, #0
 800398e:	6072      	str	r2, [r6, #4]
 8003990:	dc07      	bgt.n	80039a2 <_scanf_i+0xb6>
 8003992:	4631      	mov	r1, r6
 8003994:	4650      	mov	r0, sl
 8003996:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800399a:	4790      	blx	r2
 800399c:	2800      	cmp	r0, #0
 800399e:	f040 8085 	bne.w	8003aac <_scanf_i+0x1c0>
 80039a2:	f10b 0b01 	add.w	fp, fp, #1
 80039a6:	f1bb 0f03 	cmp.w	fp, #3
 80039aa:	d1cb      	bne.n	8003944 <_scanf_i+0x58>
 80039ac:	6863      	ldr	r3, [r4, #4]
 80039ae:	b90b      	cbnz	r3, 80039b4 <_scanf_i+0xc8>
 80039b0:	230a      	movs	r3, #10
 80039b2:	6063      	str	r3, [r4, #4]
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	4948      	ldr	r1, [pc, #288]	; (8003ad8 <_scanf_i+0x1ec>)
 80039b8:	6960      	ldr	r0, [r4, #20]
 80039ba:	1ac9      	subs	r1, r1, r3
 80039bc:	f000 f88e 	bl	8003adc <__sccl>
 80039c0:	f04f 0b00 	mov.w	fp, #0
 80039c4:	68a3      	ldr	r3, [r4, #8]
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d03d      	beq.n	8003a48 <_scanf_i+0x15c>
 80039cc:	6831      	ldr	r1, [r6, #0]
 80039ce:	6960      	ldr	r0, [r4, #20]
 80039d0:	f891 c000 	ldrb.w	ip, [r1]
 80039d4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80039d8:	2800      	cmp	r0, #0
 80039da:	d035      	beq.n	8003a48 <_scanf_i+0x15c>
 80039dc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80039e0:	d124      	bne.n	8003a2c <_scanf_i+0x140>
 80039e2:	0510      	lsls	r0, r2, #20
 80039e4:	d522      	bpl.n	8003a2c <_scanf_i+0x140>
 80039e6:	f10b 0b01 	add.w	fp, fp, #1
 80039ea:	f1b9 0f00 	cmp.w	r9, #0
 80039ee:	d003      	beq.n	80039f8 <_scanf_i+0x10c>
 80039f0:	3301      	adds	r3, #1
 80039f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80039f6:	60a3      	str	r3, [r4, #8]
 80039f8:	6873      	ldr	r3, [r6, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	6073      	str	r3, [r6, #4]
 8003a00:	dd1b      	ble.n	8003a3a <_scanf_i+0x14e>
 8003a02:	6833      	ldr	r3, [r6, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	6033      	str	r3, [r6, #0]
 8003a08:	68a3      	ldr	r3, [r4, #8]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	60a3      	str	r3, [r4, #8]
 8003a0e:	e7d9      	b.n	80039c4 <_scanf_i+0xd8>
 8003a10:	f1bb 0f02 	cmp.w	fp, #2
 8003a14:	d1ae      	bne.n	8003974 <_scanf_i+0x88>
 8003a16:	6822      	ldr	r2, [r4, #0]
 8003a18:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003a1c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a20:	d1bf      	bne.n	80039a2 <_scanf_i+0xb6>
 8003a22:	2310      	movs	r3, #16
 8003a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a28:	6063      	str	r3, [r4, #4]
 8003a2a:	e7a2      	b.n	8003972 <_scanf_i+0x86>
 8003a2c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003a30:	6022      	str	r2, [r4, #0]
 8003a32:	780b      	ldrb	r3, [r1, #0]
 8003a34:	f805 3b01 	strb.w	r3, [r5], #1
 8003a38:	e7de      	b.n	80039f8 <_scanf_i+0x10c>
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003a42:	4798      	blx	r3
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d0df      	beq.n	8003a08 <_scanf_i+0x11c>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	05db      	lsls	r3, r3, #23
 8003a4c:	d50d      	bpl.n	8003a6a <_scanf_i+0x17e>
 8003a4e:	42bd      	cmp	r5, r7
 8003a50:	d909      	bls.n	8003a66 <_scanf_i+0x17a>
 8003a52:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003a56:	4632      	mov	r2, r6
 8003a58:	4650      	mov	r0, sl
 8003a5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a5e:	f105 39ff 	add.w	r9, r5, #4294967295
 8003a62:	4798      	blx	r3
 8003a64:	464d      	mov	r5, r9
 8003a66:	42bd      	cmp	r5, r7
 8003a68:	d02d      	beq.n	8003ac6 <_scanf_i+0x1da>
 8003a6a:	6822      	ldr	r2, [r4, #0]
 8003a6c:	f012 0210 	ands.w	r2, r2, #16
 8003a70:	d113      	bne.n	8003a9a <_scanf_i+0x1ae>
 8003a72:	702a      	strb	r2, [r5, #0]
 8003a74:	4639      	mov	r1, r7
 8003a76:	6863      	ldr	r3, [r4, #4]
 8003a78:	4650      	mov	r0, sl
 8003a7a:	9e01      	ldr	r6, [sp, #4]
 8003a7c:	47b0      	blx	r6
 8003a7e:	6821      	ldr	r1, [r4, #0]
 8003a80:	f8d8 3000 	ldr.w	r3, [r8]
 8003a84:	f011 0f20 	tst.w	r1, #32
 8003a88:	d013      	beq.n	8003ab2 <_scanf_i+0x1c6>
 8003a8a:	1d1a      	adds	r2, r3, #4
 8003a8c:	f8c8 2000 	str.w	r2, [r8]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6018      	str	r0, [r3, #0]
 8003a94:	68e3      	ldr	r3, [r4, #12]
 8003a96:	3301      	adds	r3, #1
 8003a98:	60e3      	str	r3, [r4, #12]
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	1bed      	subs	r5, r5, r7
 8003a9e:	44ab      	add	fp, r5
 8003aa0:	6925      	ldr	r5, [r4, #16]
 8003aa2:	445d      	add	r5, fp
 8003aa4:	6125      	str	r5, [r4, #16]
 8003aa6:	b007      	add	sp, #28
 8003aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aac:	f04f 0b00 	mov.w	fp, #0
 8003ab0:	e7ca      	b.n	8003a48 <_scanf_i+0x15c>
 8003ab2:	1d1a      	adds	r2, r3, #4
 8003ab4:	f8c8 2000 	str.w	r2, [r8]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f011 0f01 	tst.w	r1, #1
 8003abe:	bf14      	ite	ne
 8003ac0:	8018      	strhne	r0, [r3, #0]
 8003ac2:	6018      	streq	r0, [r3, #0]
 8003ac4:	e7e6      	b.n	8003a94 <_scanf_i+0x1a8>
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	e7ed      	b.n	8003aa6 <_scanf_i+0x1ba>
 8003aca:	bf00      	nop
 8003acc:	08004054 	.word	0x08004054
 8003ad0:	08003d2d 	.word	0x08003d2d
 8003ad4:	08003c45 	.word	0x08003c45
 8003ad8:	080040f7 	.word	0x080040f7

08003adc <__sccl>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	780b      	ldrb	r3, [r1, #0]
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	2b5e      	cmp	r3, #94	; 0x5e
 8003ae4:	bf13      	iteet	ne
 8003ae6:	2200      	movne	r2, #0
 8003ae8:	2201      	moveq	r2, #1
 8003aea:	784b      	ldrbeq	r3, [r1, #1]
 8003aec:	1c48      	addne	r0, r1, #1
 8003aee:	bf08      	it	eq
 8003af0:	1c88      	addeq	r0, r1, #2
 8003af2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003af6:	1e61      	subs	r1, r4, #1
 8003af8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003afc:	42a9      	cmp	r1, r5
 8003afe:	d1fb      	bne.n	8003af8 <__sccl+0x1c>
 8003b00:	b90b      	cbnz	r3, 8003b06 <__sccl+0x2a>
 8003b02:	3801      	subs	r0, #1
 8003b04:	bd70      	pop	{r4, r5, r6, pc}
 8003b06:	f082 0201 	eor.w	r2, r2, #1
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	54e2      	strb	r2, [r4, r3]
 8003b0e:	4628      	mov	r0, r5
 8003b10:	f810 1b01 	ldrb.w	r1, [r0], #1
 8003b14:	292d      	cmp	r1, #45	; 0x2d
 8003b16:	d006      	beq.n	8003b26 <__sccl+0x4a>
 8003b18:	295d      	cmp	r1, #93	; 0x5d
 8003b1a:	d0f3      	beq.n	8003b04 <__sccl+0x28>
 8003b1c:	b909      	cbnz	r1, 8003b22 <__sccl+0x46>
 8003b1e:	4628      	mov	r0, r5
 8003b20:	e7f0      	b.n	8003b04 <__sccl+0x28>
 8003b22:	460b      	mov	r3, r1
 8003b24:	e7f1      	b.n	8003b0a <__sccl+0x2e>
 8003b26:	786e      	ldrb	r6, [r5, #1]
 8003b28:	2e5d      	cmp	r6, #93	; 0x5d
 8003b2a:	d0fa      	beq.n	8003b22 <__sccl+0x46>
 8003b2c:	42b3      	cmp	r3, r6
 8003b2e:	dcf8      	bgt.n	8003b22 <__sccl+0x46>
 8003b30:	4619      	mov	r1, r3
 8003b32:	3502      	adds	r5, #2
 8003b34:	3101      	adds	r1, #1
 8003b36:	428e      	cmp	r6, r1
 8003b38:	5462      	strb	r2, [r4, r1]
 8003b3a:	dcfb      	bgt.n	8003b34 <__sccl+0x58>
 8003b3c:	1af1      	subs	r1, r6, r3
 8003b3e:	3901      	subs	r1, #1
 8003b40:	42b3      	cmp	r3, r6
 8003b42:	bfa8      	it	ge
 8003b44:	2100      	movge	r1, #0
 8003b46:	1c58      	adds	r0, r3, #1
 8003b48:	1843      	adds	r3, r0, r1
 8003b4a:	e7e0      	b.n	8003b0e <__sccl+0x32>

08003b4c <_strtol_l.constprop.0>:
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b52:	4680      	mov	r8, r0
 8003b54:	d001      	beq.n	8003b5a <_strtol_l.constprop.0+0xe>
 8003b56:	2b24      	cmp	r3, #36	; 0x24
 8003b58:	d906      	bls.n	8003b68 <_strtol_l.constprop.0+0x1c>
 8003b5a:	f7ff fc3b 	bl	80033d4 <__errno>
 8003b5e:	2316      	movs	r3, #22
 8003b60:	6003      	str	r3, [r0, #0]
 8003b62:	2000      	movs	r0, #0
 8003b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b68:	460d      	mov	r5, r1
 8003b6a:	4f35      	ldr	r7, [pc, #212]	; (8003c40 <_strtol_l.constprop.0+0xf4>)
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003b72:	5de6      	ldrb	r6, [r4, r7]
 8003b74:	f016 0608 	ands.w	r6, r6, #8
 8003b78:	d1f8      	bne.n	8003b6c <_strtol_l.constprop.0+0x20>
 8003b7a:	2c2d      	cmp	r4, #45	; 0x2d
 8003b7c:	d12f      	bne.n	8003bde <_strtol_l.constprop.0+0x92>
 8003b7e:	2601      	movs	r6, #1
 8003b80:	782c      	ldrb	r4, [r5, #0]
 8003b82:	1c85      	adds	r5, r0, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d057      	beq.n	8003c38 <_strtol_l.constprop.0+0xec>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d109      	bne.n	8003ba0 <_strtol_l.constprop.0+0x54>
 8003b8c:	2c30      	cmp	r4, #48	; 0x30
 8003b8e:	d107      	bne.n	8003ba0 <_strtol_l.constprop.0+0x54>
 8003b90:	7828      	ldrb	r0, [r5, #0]
 8003b92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003b96:	2858      	cmp	r0, #88	; 0x58
 8003b98:	d149      	bne.n	8003c2e <_strtol_l.constprop.0+0xe2>
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	786c      	ldrb	r4, [r5, #1]
 8003b9e:	3502      	adds	r5, #2
 8003ba0:	2700      	movs	r7, #0
 8003ba2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8003ba6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8003baa:	fbbe f9f3 	udiv	r9, lr, r3
 8003bae:	4638      	mov	r0, r7
 8003bb0:	fb03 ea19 	mls	sl, r3, r9, lr
 8003bb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003bb8:	f1bc 0f09 	cmp.w	ip, #9
 8003bbc:	d814      	bhi.n	8003be8 <_strtol_l.constprop.0+0x9c>
 8003bbe:	4664      	mov	r4, ip
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	dd22      	ble.n	8003c0a <_strtol_l.constprop.0+0xbe>
 8003bc4:	2f00      	cmp	r7, #0
 8003bc6:	db1d      	blt.n	8003c04 <_strtol_l.constprop.0+0xb8>
 8003bc8:	4581      	cmp	r9, r0
 8003bca:	d31b      	bcc.n	8003c04 <_strtol_l.constprop.0+0xb8>
 8003bcc:	d101      	bne.n	8003bd2 <_strtol_l.constprop.0+0x86>
 8003bce:	45a2      	cmp	sl, r4
 8003bd0:	db18      	blt.n	8003c04 <_strtol_l.constprop.0+0xb8>
 8003bd2:	2701      	movs	r7, #1
 8003bd4:	fb00 4003 	mla	r0, r0, r3, r4
 8003bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003bdc:	e7ea      	b.n	8003bb4 <_strtol_l.constprop.0+0x68>
 8003bde:	2c2b      	cmp	r4, #43	; 0x2b
 8003be0:	bf04      	itt	eq
 8003be2:	782c      	ldrbeq	r4, [r5, #0]
 8003be4:	1c85      	addeq	r5, r0, #2
 8003be6:	e7cd      	b.n	8003b84 <_strtol_l.constprop.0+0x38>
 8003be8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003bec:	f1bc 0f19 	cmp.w	ip, #25
 8003bf0:	d801      	bhi.n	8003bf6 <_strtol_l.constprop.0+0xaa>
 8003bf2:	3c37      	subs	r4, #55	; 0x37
 8003bf4:	e7e4      	b.n	8003bc0 <_strtol_l.constprop.0+0x74>
 8003bf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003bfa:	f1bc 0f19 	cmp.w	ip, #25
 8003bfe:	d804      	bhi.n	8003c0a <_strtol_l.constprop.0+0xbe>
 8003c00:	3c57      	subs	r4, #87	; 0x57
 8003c02:	e7dd      	b.n	8003bc0 <_strtol_l.constprop.0+0x74>
 8003c04:	f04f 37ff 	mov.w	r7, #4294967295
 8003c08:	e7e6      	b.n	8003bd8 <_strtol_l.constprop.0+0x8c>
 8003c0a:	2f00      	cmp	r7, #0
 8003c0c:	da07      	bge.n	8003c1e <_strtol_l.constprop.0+0xd2>
 8003c0e:	2322      	movs	r3, #34	; 0x22
 8003c10:	4670      	mov	r0, lr
 8003c12:	f8c8 3000 	str.w	r3, [r8]
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	d0a4      	beq.n	8003b64 <_strtol_l.constprop.0+0x18>
 8003c1a:	1e69      	subs	r1, r5, #1
 8003c1c:	e005      	b.n	8003c2a <_strtol_l.constprop.0+0xde>
 8003c1e:	b106      	cbz	r6, 8003c22 <_strtol_l.constprop.0+0xd6>
 8003c20:	4240      	negs	r0, r0
 8003c22:	2a00      	cmp	r2, #0
 8003c24:	d09e      	beq.n	8003b64 <_strtol_l.constprop.0+0x18>
 8003c26:	2f00      	cmp	r7, #0
 8003c28:	d1f7      	bne.n	8003c1a <_strtol_l.constprop.0+0xce>
 8003c2a:	6011      	str	r1, [r2, #0]
 8003c2c:	e79a      	b.n	8003b64 <_strtol_l.constprop.0+0x18>
 8003c2e:	2430      	movs	r4, #48	; 0x30
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1b5      	bne.n	8003ba0 <_strtol_l.constprop.0+0x54>
 8003c34:	2308      	movs	r3, #8
 8003c36:	e7b3      	b.n	8003ba0 <_strtol_l.constprop.0+0x54>
 8003c38:	2c30      	cmp	r4, #48	; 0x30
 8003c3a:	d0a9      	beq.n	8003b90 <_strtol_l.constprop.0+0x44>
 8003c3c:	230a      	movs	r3, #10
 8003c3e:	e7af      	b.n	8003ba0 <_strtol_l.constprop.0+0x54>
 8003c40:	080040fa 	.word	0x080040fa

08003c44 <_strtol_r>:
 8003c44:	f7ff bf82 	b.w	8003b4c <_strtol_l.constprop.0>

08003c48 <_strtoul_l.constprop.0>:
 8003c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c4c:	4686      	mov	lr, r0
 8003c4e:	460d      	mov	r5, r1
 8003c50:	4f35      	ldr	r7, [pc, #212]	; (8003d28 <_strtoul_l.constprop.0+0xe0>)
 8003c52:	4628      	mov	r0, r5
 8003c54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003c58:	5de6      	ldrb	r6, [r4, r7]
 8003c5a:	f016 0608 	ands.w	r6, r6, #8
 8003c5e:	d1f8      	bne.n	8003c52 <_strtoul_l.constprop.0+0xa>
 8003c60:	2c2d      	cmp	r4, #45	; 0x2d
 8003c62:	d12f      	bne.n	8003cc4 <_strtoul_l.constprop.0+0x7c>
 8003c64:	2601      	movs	r6, #1
 8003c66:	782c      	ldrb	r4, [r5, #0]
 8003c68:	1c85      	adds	r5, r0, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d057      	beq.n	8003d1e <_strtoul_l.constprop.0+0xd6>
 8003c6e:	2b10      	cmp	r3, #16
 8003c70:	d109      	bne.n	8003c86 <_strtoul_l.constprop.0+0x3e>
 8003c72:	2c30      	cmp	r4, #48	; 0x30
 8003c74:	d107      	bne.n	8003c86 <_strtoul_l.constprop.0+0x3e>
 8003c76:	7828      	ldrb	r0, [r5, #0]
 8003c78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003c7c:	2858      	cmp	r0, #88	; 0x58
 8003c7e:	d149      	bne.n	8003d14 <_strtoul_l.constprop.0+0xcc>
 8003c80:	2310      	movs	r3, #16
 8003c82:	786c      	ldrb	r4, [r5, #1]
 8003c84:	3502      	adds	r5, #2
 8003c86:	f04f 38ff 	mov.w	r8, #4294967295
 8003c8a:	fbb8 f8f3 	udiv	r8, r8, r3
 8003c8e:	2700      	movs	r7, #0
 8003c90:	fb03 f908 	mul.w	r9, r3, r8
 8003c94:	4638      	mov	r0, r7
 8003c96:	ea6f 0909 	mvn.w	r9, r9
 8003c9a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003c9e:	f1bc 0f09 	cmp.w	ip, #9
 8003ca2:	d814      	bhi.n	8003cce <_strtoul_l.constprop.0+0x86>
 8003ca4:	4664      	mov	r4, ip
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	dd22      	ble.n	8003cf0 <_strtoul_l.constprop.0+0xa8>
 8003caa:	2f00      	cmp	r7, #0
 8003cac:	db1d      	blt.n	8003cea <_strtoul_l.constprop.0+0xa2>
 8003cae:	4580      	cmp	r8, r0
 8003cb0:	d31b      	bcc.n	8003cea <_strtoul_l.constprop.0+0xa2>
 8003cb2:	d101      	bne.n	8003cb8 <_strtoul_l.constprop.0+0x70>
 8003cb4:	45a1      	cmp	r9, r4
 8003cb6:	db18      	blt.n	8003cea <_strtoul_l.constprop.0+0xa2>
 8003cb8:	2701      	movs	r7, #1
 8003cba:	fb00 4003 	mla	r0, r0, r3, r4
 8003cbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cc2:	e7ea      	b.n	8003c9a <_strtoul_l.constprop.0+0x52>
 8003cc4:	2c2b      	cmp	r4, #43	; 0x2b
 8003cc6:	bf04      	itt	eq
 8003cc8:	782c      	ldrbeq	r4, [r5, #0]
 8003cca:	1c85      	addeq	r5, r0, #2
 8003ccc:	e7cd      	b.n	8003c6a <_strtoul_l.constprop.0+0x22>
 8003cce:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003cd2:	f1bc 0f19 	cmp.w	ip, #25
 8003cd6:	d801      	bhi.n	8003cdc <_strtoul_l.constprop.0+0x94>
 8003cd8:	3c37      	subs	r4, #55	; 0x37
 8003cda:	e7e4      	b.n	8003ca6 <_strtoul_l.constprop.0+0x5e>
 8003cdc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003ce0:	f1bc 0f19 	cmp.w	ip, #25
 8003ce4:	d804      	bhi.n	8003cf0 <_strtoul_l.constprop.0+0xa8>
 8003ce6:	3c57      	subs	r4, #87	; 0x57
 8003ce8:	e7dd      	b.n	8003ca6 <_strtoul_l.constprop.0+0x5e>
 8003cea:	f04f 37ff 	mov.w	r7, #4294967295
 8003cee:	e7e6      	b.n	8003cbe <_strtoul_l.constprop.0+0x76>
 8003cf0:	2f00      	cmp	r7, #0
 8003cf2:	da07      	bge.n	8003d04 <_strtoul_l.constprop.0+0xbc>
 8003cf4:	2322      	movs	r3, #34	; 0x22
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	f8ce 3000 	str.w	r3, [lr]
 8003cfe:	b932      	cbnz	r2, 8003d0e <_strtoul_l.constprop.0+0xc6>
 8003d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d04:	b106      	cbz	r6, 8003d08 <_strtoul_l.constprop.0+0xc0>
 8003d06:	4240      	negs	r0, r0
 8003d08:	2a00      	cmp	r2, #0
 8003d0a:	d0f9      	beq.n	8003d00 <_strtoul_l.constprop.0+0xb8>
 8003d0c:	b107      	cbz	r7, 8003d10 <_strtoul_l.constprop.0+0xc8>
 8003d0e:	1e69      	subs	r1, r5, #1
 8003d10:	6011      	str	r1, [r2, #0]
 8003d12:	e7f5      	b.n	8003d00 <_strtoul_l.constprop.0+0xb8>
 8003d14:	2430      	movs	r4, #48	; 0x30
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1b5      	bne.n	8003c86 <_strtoul_l.constprop.0+0x3e>
 8003d1a:	2308      	movs	r3, #8
 8003d1c:	e7b3      	b.n	8003c86 <_strtoul_l.constprop.0+0x3e>
 8003d1e:	2c30      	cmp	r4, #48	; 0x30
 8003d20:	d0a9      	beq.n	8003c76 <_strtoul_l.constprop.0+0x2e>
 8003d22:	230a      	movs	r3, #10
 8003d24:	e7af      	b.n	8003c86 <_strtoul_l.constprop.0+0x3e>
 8003d26:	bf00      	nop
 8003d28:	080040fa 	.word	0x080040fa

08003d2c <_strtoul_r>:
 8003d2c:	f7ff bf8c 	b.w	8003c48 <_strtoul_l.constprop.0>

08003d30 <__submore>:
 8003d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d34:	460c      	mov	r4, r1
 8003d36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	d11b      	bne.n	8003d78 <__submore+0x48>
 8003d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003d44:	f000 f8b2 	bl	8003eac <_malloc_r>
 8003d48:	b918      	cbnz	r0, 8003d52 <__submore+0x22>
 8003d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d56:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d58:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8003d5e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003d62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003d66:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003d6a:	7043      	strb	r3, [r0, #1]
 8003d6c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003d70:	7003      	strb	r3, [r0, #0]
 8003d72:	6020      	str	r0, [r4, #0]
 8003d74:	2000      	movs	r0, #0
 8003d76:	e7ea      	b.n	8003d4e <__submore+0x1e>
 8003d78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003d7a:	0077      	lsls	r7, r6, #1
 8003d7c:	463a      	mov	r2, r7
 8003d7e:	f000 f909 	bl	8003f94 <_realloc_r>
 8003d82:	4605      	mov	r5, r0
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d0e0      	beq.n	8003d4a <__submore+0x1a>
 8003d88:	eb00 0806 	add.w	r8, r0, r6
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4640      	mov	r0, r8
 8003d92:	f000 f815 	bl	8003dc0 <memcpy>
 8003d96:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003d9a:	f8c4 8000 	str.w	r8, [r4]
 8003d9e:	e7e9      	b.n	8003d74 <__submore+0x44>

08003da0 <__retarget_lock_acquire_recursive>:
 8003da0:	4770      	bx	lr

08003da2 <__retarget_lock_release_recursive>:
 8003da2:	4770      	bx	lr

08003da4 <memchr>:
 8003da4:	4603      	mov	r3, r0
 8003da6:	b510      	push	{r4, lr}
 8003da8:	b2c9      	uxtb	r1, r1
 8003daa:	4402      	add	r2, r0
 8003dac:	4293      	cmp	r3, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	d101      	bne.n	8003db6 <memchr+0x12>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e003      	b.n	8003dbe <memchr+0x1a>
 8003db6:	7804      	ldrb	r4, [r0, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	428c      	cmp	r4, r1
 8003dbc:	d1f6      	bne.n	8003dac <memchr+0x8>
 8003dbe:	bd10      	pop	{r4, pc}

08003dc0 <memcpy>:
 8003dc0:	440a      	add	r2, r1
 8003dc2:	4291      	cmp	r1, r2
 8003dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dc8:	d100      	bne.n	8003dcc <memcpy+0xc>
 8003dca:	4770      	bx	lr
 8003dcc:	b510      	push	{r4, lr}
 8003dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dd2:	4291      	cmp	r1, r2
 8003dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dd8:	d1f9      	bne.n	8003dce <memcpy+0xe>
 8003dda:	bd10      	pop	{r4, pc}

08003ddc <_free_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4605      	mov	r5, r0
 8003de0:	2900      	cmp	r1, #0
 8003de2:	d040      	beq.n	8003e66 <_free_r+0x8a>
 8003de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de8:	1f0c      	subs	r4, r1, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bfb8      	it	lt
 8003dee:	18e4      	addlt	r4, r4, r3
 8003df0:	f000 f910 	bl	8004014 <__malloc_lock>
 8003df4:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <_free_r+0x8c>)
 8003df6:	6813      	ldr	r3, [r2, #0]
 8003df8:	b933      	cbnz	r3, 8003e08 <_free_r+0x2c>
 8003dfa:	6063      	str	r3, [r4, #4]
 8003dfc:	6014      	str	r4, [r2, #0]
 8003dfe:	4628      	mov	r0, r5
 8003e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e04:	f000 b90c 	b.w	8004020 <__malloc_unlock>
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	d908      	bls.n	8003e1e <_free_r+0x42>
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	1821      	adds	r1, r4, r0
 8003e10:	428b      	cmp	r3, r1
 8003e12:	bf01      	itttt	eq
 8003e14:	6819      	ldreq	r1, [r3, #0]
 8003e16:	685b      	ldreq	r3, [r3, #4]
 8003e18:	1809      	addeq	r1, r1, r0
 8003e1a:	6021      	streq	r1, [r4, #0]
 8003e1c:	e7ed      	b.n	8003dfa <_free_r+0x1e>
 8003e1e:	461a      	mov	r2, r3
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	b10b      	cbz	r3, 8003e28 <_free_r+0x4c>
 8003e24:	42a3      	cmp	r3, r4
 8003e26:	d9fa      	bls.n	8003e1e <_free_r+0x42>
 8003e28:	6811      	ldr	r1, [r2, #0]
 8003e2a:	1850      	adds	r0, r2, r1
 8003e2c:	42a0      	cmp	r0, r4
 8003e2e:	d10b      	bne.n	8003e48 <_free_r+0x6c>
 8003e30:	6820      	ldr	r0, [r4, #0]
 8003e32:	4401      	add	r1, r0
 8003e34:	1850      	adds	r0, r2, r1
 8003e36:	4283      	cmp	r3, r0
 8003e38:	6011      	str	r1, [r2, #0]
 8003e3a:	d1e0      	bne.n	8003dfe <_free_r+0x22>
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4401      	add	r1, r0
 8003e42:	6011      	str	r1, [r2, #0]
 8003e44:	6053      	str	r3, [r2, #4]
 8003e46:	e7da      	b.n	8003dfe <_free_r+0x22>
 8003e48:	d902      	bls.n	8003e50 <_free_r+0x74>
 8003e4a:	230c      	movs	r3, #12
 8003e4c:	602b      	str	r3, [r5, #0]
 8003e4e:	e7d6      	b.n	8003dfe <_free_r+0x22>
 8003e50:	6820      	ldr	r0, [r4, #0]
 8003e52:	1821      	adds	r1, r4, r0
 8003e54:	428b      	cmp	r3, r1
 8003e56:	bf01      	itttt	eq
 8003e58:	6819      	ldreq	r1, [r3, #0]
 8003e5a:	685b      	ldreq	r3, [r3, #4]
 8003e5c:	1809      	addeq	r1, r1, r0
 8003e5e:	6021      	streq	r1, [r4, #0]
 8003e60:	6063      	str	r3, [r4, #4]
 8003e62:	6054      	str	r4, [r2, #4]
 8003e64:	e7cb      	b.n	8003dfe <_free_r+0x22>
 8003e66:	bd38      	pop	{r3, r4, r5, pc}
 8003e68:	20001208 	.word	0x20001208

08003e6c <sbrk_aligned>:
 8003e6c:	b570      	push	{r4, r5, r6, lr}
 8003e6e:	4e0e      	ldr	r6, [pc, #56]	; (8003ea8 <sbrk_aligned+0x3c>)
 8003e70:	460c      	mov	r4, r1
 8003e72:	6831      	ldr	r1, [r6, #0]
 8003e74:	4605      	mov	r5, r0
 8003e76:	b911      	cbnz	r1, 8003e7e <sbrk_aligned+0x12>
 8003e78:	f000 f8bc 	bl	8003ff4 <_sbrk_r>
 8003e7c:	6030      	str	r0, [r6, #0]
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4628      	mov	r0, r5
 8003e82:	f000 f8b7 	bl	8003ff4 <_sbrk_r>
 8003e86:	1c43      	adds	r3, r0, #1
 8003e88:	d00a      	beq.n	8003ea0 <sbrk_aligned+0x34>
 8003e8a:	1cc4      	adds	r4, r0, #3
 8003e8c:	f024 0403 	bic.w	r4, r4, #3
 8003e90:	42a0      	cmp	r0, r4
 8003e92:	d007      	beq.n	8003ea4 <sbrk_aligned+0x38>
 8003e94:	1a21      	subs	r1, r4, r0
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 f8ac 	bl	8003ff4 <_sbrk_r>
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d101      	bne.n	8003ea4 <sbrk_aligned+0x38>
 8003ea0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	2000120c 	.word	0x2000120c

08003eac <_malloc_r>:
 8003eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb0:	1ccd      	adds	r5, r1, #3
 8003eb2:	f025 0503 	bic.w	r5, r5, #3
 8003eb6:	3508      	adds	r5, #8
 8003eb8:	2d0c      	cmp	r5, #12
 8003eba:	bf38      	it	cc
 8003ebc:	250c      	movcc	r5, #12
 8003ebe:	2d00      	cmp	r5, #0
 8003ec0:	4607      	mov	r7, r0
 8003ec2:	db01      	blt.n	8003ec8 <_malloc_r+0x1c>
 8003ec4:	42a9      	cmp	r1, r5
 8003ec6:	d905      	bls.n	8003ed4 <_malloc_r+0x28>
 8003ec8:	230c      	movs	r3, #12
 8003eca:	2600      	movs	r6, #0
 8003ecc:	603b      	str	r3, [r7, #0]
 8003ece:	4630      	mov	r0, r6
 8003ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ed4:	4e2e      	ldr	r6, [pc, #184]	; (8003f90 <_malloc_r+0xe4>)
 8003ed6:	f000 f89d 	bl	8004014 <__malloc_lock>
 8003eda:	6833      	ldr	r3, [r6, #0]
 8003edc:	461c      	mov	r4, r3
 8003ede:	bb34      	cbnz	r4, 8003f2e <_malloc_r+0x82>
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f7ff ffc2 	bl	8003e6c <sbrk_aligned>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	4604      	mov	r4, r0
 8003eec:	d14d      	bne.n	8003f8a <_malloc_r+0xde>
 8003eee:	6834      	ldr	r4, [r6, #0]
 8003ef0:	4626      	mov	r6, r4
 8003ef2:	2e00      	cmp	r6, #0
 8003ef4:	d140      	bne.n	8003f78 <_malloc_r+0xcc>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4638      	mov	r0, r7
 8003efc:	eb04 0803 	add.w	r8, r4, r3
 8003f00:	f000 f878 	bl	8003ff4 <_sbrk_r>
 8003f04:	4580      	cmp	r8, r0
 8003f06:	d13a      	bne.n	8003f7e <_malloc_r+0xd2>
 8003f08:	6821      	ldr	r1, [r4, #0]
 8003f0a:	3503      	adds	r5, #3
 8003f0c:	1a6d      	subs	r5, r5, r1
 8003f0e:	f025 0503 	bic.w	r5, r5, #3
 8003f12:	3508      	adds	r5, #8
 8003f14:	2d0c      	cmp	r5, #12
 8003f16:	bf38      	it	cc
 8003f18:	250c      	movcc	r5, #12
 8003f1a:	4638      	mov	r0, r7
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	f7ff ffa5 	bl	8003e6c <sbrk_aligned>
 8003f22:	3001      	adds	r0, #1
 8003f24:	d02b      	beq.n	8003f7e <_malloc_r+0xd2>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	442b      	add	r3, r5
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	e00e      	b.n	8003f4c <_malloc_r+0xa0>
 8003f2e:	6822      	ldr	r2, [r4, #0]
 8003f30:	1b52      	subs	r2, r2, r5
 8003f32:	d41e      	bmi.n	8003f72 <_malloc_r+0xc6>
 8003f34:	2a0b      	cmp	r2, #11
 8003f36:	d916      	bls.n	8003f66 <_malloc_r+0xba>
 8003f38:	1961      	adds	r1, r4, r5
 8003f3a:	42a3      	cmp	r3, r4
 8003f3c:	6025      	str	r5, [r4, #0]
 8003f3e:	bf18      	it	ne
 8003f40:	6059      	strne	r1, [r3, #4]
 8003f42:	6863      	ldr	r3, [r4, #4]
 8003f44:	bf08      	it	eq
 8003f46:	6031      	streq	r1, [r6, #0]
 8003f48:	5162      	str	r2, [r4, r5]
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f104 060b 	add.w	r6, r4, #11
 8003f52:	f000 f865 	bl	8004020 <__malloc_unlock>
 8003f56:	f026 0607 	bic.w	r6, r6, #7
 8003f5a:	1d23      	adds	r3, r4, #4
 8003f5c:	1af2      	subs	r2, r6, r3
 8003f5e:	d0b6      	beq.n	8003ece <_malloc_r+0x22>
 8003f60:	1b9b      	subs	r3, r3, r6
 8003f62:	50a3      	str	r3, [r4, r2]
 8003f64:	e7b3      	b.n	8003ece <_malloc_r+0x22>
 8003f66:	6862      	ldr	r2, [r4, #4]
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	bf0c      	ite	eq
 8003f6c:	6032      	streq	r2, [r6, #0]
 8003f6e:	605a      	strne	r2, [r3, #4]
 8003f70:	e7ec      	b.n	8003f4c <_malloc_r+0xa0>
 8003f72:	4623      	mov	r3, r4
 8003f74:	6864      	ldr	r4, [r4, #4]
 8003f76:	e7b2      	b.n	8003ede <_malloc_r+0x32>
 8003f78:	4634      	mov	r4, r6
 8003f7a:	6876      	ldr	r6, [r6, #4]
 8003f7c:	e7b9      	b.n	8003ef2 <_malloc_r+0x46>
 8003f7e:	230c      	movs	r3, #12
 8003f80:	4638      	mov	r0, r7
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	f000 f84c 	bl	8004020 <__malloc_unlock>
 8003f88:	e7a1      	b.n	8003ece <_malloc_r+0x22>
 8003f8a:	6025      	str	r5, [r4, #0]
 8003f8c:	e7de      	b.n	8003f4c <_malloc_r+0xa0>
 8003f8e:	bf00      	nop
 8003f90:	20001208 	.word	0x20001208

08003f94 <_realloc_r>:
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	4680      	mov	r8, r0
 8003f9a:	4614      	mov	r4, r2
 8003f9c:	460e      	mov	r6, r1
 8003f9e:	b921      	cbnz	r1, 8003faa <_realloc_r+0x16>
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa6:	f7ff bf81 	b.w	8003eac <_malloc_r>
 8003faa:	b92a      	cbnz	r2, 8003fb8 <_realloc_r+0x24>
 8003fac:	f7ff ff16 	bl	8003ddc <_free_r>
 8003fb0:	4625      	mov	r5, r4
 8003fb2:	4628      	mov	r0, r5
 8003fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fb8:	f000 f838 	bl	800402c <_malloc_usable_size_r>
 8003fbc:	4284      	cmp	r4, r0
 8003fbe:	4607      	mov	r7, r0
 8003fc0:	d802      	bhi.n	8003fc8 <_realloc_r+0x34>
 8003fc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003fc6:	d812      	bhi.n	8003fee <_realloc_r+0x5a>
 8003fc8:	4621      	mov	r1, r4
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f7ff ff6e 	bl	8003eac <_malloc_r>
 8003fd0:	4605      	mov	r5, r0
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0ed      	beq.n	8003fb2 <_realloc_r+0x1e>
 8003fd6:	42bc      	cmp	r4, r7
 8003fd8:	4622      	mov	r2, r4
 8003fda:	4631      	mov	r1, r6
 8003fdc:	bf28      	it	cs
 8003fde:	463a      	movcs	r2, r7
 8003fe0:	f7ff feee 	bl	8003dc0 <memcpy>
 8003fe4:	4631      	mov	r1, r6
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f7ff fef8 	bl	8003ddc <_free_r>
 8003fec:	e7e1      	b.n	8003fb2 <_realloc_r+0x1e>
 8003fee:	4635      	mov	r5, r6
 8003ff0:	e7df      	b.n	8003fb2 <_realloc_r+0x1e>
	...

08003ff4 <_sbrk_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	4d05      	ldr	r5, [pc, #20]	; (8004010 <_sbrk_r+0x1c>)
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	602b      	str	r3, [r5, #0]
 8004000:	f7fc fa2a 	bl	8000458 <_sbrk>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d102      	bne.n	800400e <_sbrk_r+0x1a>
 8004008:	682b      	ldr	r3, [r5, #0]
 800400a:	b103      	cbz	r3, 800400e <_sbrk_r+0x1a>
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	bd38      	pop	{r3, r4, r5, pc}
 8004010:	20001200 	.word	0x20001200

08004014 <__malloc_lock>:
 8004014:	4801      	ldr	r0, [pc, #4]	; (800401c <__malloc_lock+0x8>)
 8004016:	f7ff bec3 	b.w	8003da0 <__retarget_lock_acquire_recursive>
 800401a:	bf00      	nop
 800401c:	20001204 	.word	0x20001204

08004020 <__malloc_unlock>:
 8004020:	4801      	ldr	r0, [pc, #4]	; (8004028 <__malloc_unlock+0x8>)
 8004022:	f7ff bebe 	b.w	8003da2 <__retarget_lock_release_recursive>
 8004026:	bf00      	nop
 8004028:	20001204 	.word	0x20001204

0800402c <_malloc_usable_size_r>:
 800402c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004030:	1f18      	subs	r0, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	bfbc      	itt	lt
 8004036:	580b      	ldrlt	r3, [r1, r0]
 8004038:	18c0      	addlt	r0, r0, r3
 800403a:	4770      	bx	lr

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
