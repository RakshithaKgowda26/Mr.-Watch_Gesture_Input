
adxl_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003978  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003a84  08003a84  00013a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b04  08003b04  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b04  08003b04  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b04  08003b04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000070  08003b7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08003b7c  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008618  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7b  00000000  00000000  000286b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002a130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002a9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017344  00000000  00000000  0002b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a17  00000000  00000000  0004251c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081b74  00000000  00000000  0004bf33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdaa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002694  00000000  00000000  000cdaf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a6c 	.word	0x08003a6c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a6c 	.word	0x08003a6c

0800014c <HAL_GPIO_EXTI_Callback>:
uint32_t activity_count;
volatile uint32_t calib_complete;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	adxl_event = 1;
 8000156:	4b0a      	ldr	r3, [pc, #40]	; (8000180 <HAL_GPIO_EXTI_Callback+0x34>)
 8000158:	2201      	movs	r2, #1
 800015a:	701a      	strb	r2, [r3, #0]
	//HAL_NVIC_DisableIRQ(EXTI0_IRQn);
	adxl_count++;
 800015c:	4b09      	ldr	r3, [pc, #36]	; (8000184 <HAL_GPIO_EXTI_Callback+0x38>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	3301      	adds	r3, #1
 8000162:	4a08      	ldr	r2, [pc, #32]	; (8000184 <HAL_GPIO_EXTI_Callback+0x38>)
 8000164:	6013      	str	r3, [r2, #0]
	if (adxl_count == 100)
 8000166:	4b07      	ldr	r3, [pc, #28]	; (8000184 <HAL_GPIO_EXTI_Callback+0x38>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	2b64      	cmp	r3, #100	; 0x64
 800016c:	d102      	bne.n	8000174 <HAL_GPIO_EXTI_Callback+0x28>
		calib_complete = 1;
 800016e:	4b06      	ldr	r3, [pc, #24]	; (8000188 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000170:	2201      	movs	r2, #1
 8000172:	601a      	str	r2, [r3, #0]

}
 8000174:	bf00      	nop
 8000176:	370c      	adds	r7, #12
 8000178:	46bd      	mov	sp, r7
 800017a:	bc80      	pop	{r7}
 800017c:	4770      	bx	lr
 800017e:	bf00      	nop
 8000180:	2000009e 	.word	0x2000009e
 8000184:	200000a8 	.word	0x200000a8
 8000188:	200000b8 	.word	0x200000b8

0800018c <poll_adxl_event>:

uint8_t poll_adxl_event(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	uint8_t val;

	adxl_spi_read(ADXL_INT_SOURCE, 1, &stsregval);
 8000190:	4a16      	ldr	r2, [pc, #88]	; (80001ec <poll_adxl_event+0x60>)
 8000192:	2101      	movs	r1, #1
 8000194:	2030      	movs	r0, #48	; 0x30
 8000196:	f000 f85b 	bl	8000250 <adxl_spi_read>
	if (stsregval & DATA_READY)
 800019a:	4b14      	ldr	r3, [pc, #80]	; (80001ec <poll_adxl_event+0x60>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	b25b      	sxtb	r3, r3
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	da20      	bge.n	80001e6 <poll_adxl_event+0x5a>
	{
		adxl_count++;
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <poll_adxl_event+0x64>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	4a11      	ldr	r2, [pc, #68]	; (80001f0 <poll_adxl_event+0x64>)
 80001ac:	6013      	str	r3, [r2, #0]
		if (stsregval & 3)
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <poll_adxl_event+0x60>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	f003 0303 	and.w	r3, r3, #3
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d008      	beq.n	80001cc <poll_adxl_event+0x40>
		{
			adxl_ovrn++;
 80001ba:	4b0e      	ldr	r3, [pc, #56]	; (80001f4 <poll_adxl_event+0x68>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	3301      	adds	r3, #1
 80001c0:	4a0c      	ldr	r2, [pc, #48]	; (80001f4 <poll_adxl_event+0x68>)
 80001c2:	6013      	str	r3, [r2, #0]
			adxl_ovrn_iter = adxl_count;
 80001c4:	4b0a      	ldr	r3, [pc, #40]	; (80001f0 <poll_adxl_event+0x64>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a0b      	ldr	r2, [pc, #44]	; (80001f8 <poll_adxl_event+0x6c>)
 80001ca:	6013      	str	r3, [r2, #0]
		}
		if (stsregval & 0x10)
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <poll_adxl_event+0x60>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	f003 0310 	and.w	r3, r3, #16
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d004      	beq.n	80001e2 <poll_adxl_event+0x56>
			activity_count++;
 80001d8:	4b08      	ldr	r3, [pc, #32]	; (80001fc <poll_adxl_event+0x70>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a07      	ldr	r2, [pc, #28]	; (80001fc <poll_adxl_event+0x70>)
 80001e0:	6013      	str	r3, [r2, #0]
		return 1;
 80001e2:	2301      	movs	r3, #1
 80001e4:	e000      	b.n	80001e8 <poll_adxl_event+0x5c>
	}
	return 0;
 80001e6:	2300      	movs	r3, #0
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	2000009f 	.word	0x2000009f
 80001f0:	200000a8 	.word	0x200000a8
 80001f4:	200000ac 	.word	0x200000ac
 80001f8:	200000b0 	.word	0x200000b0
 80001fc:	200000b4 	.word	0x200000b4

08000200 <adxl_spi_write>:

void adxl_spi_write (uint8_t regaddr, uint8_t regval)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	460a      	mov	r2, r1
 800020a:	71fb      	strb	r3, [r7, #7]
 800020c:	4613      	mov	r3, r2
 800020e:	71bb      	strb	r3, [r7, #6]
	//write multiple bytes to device
	//first byte has reg addr, mb bit and write command bit
	adxl_data[0] = (regaddr | ADXL_WRITE_COMMAND);
 8000210:	4a0c      	ldr	r2, [pc, #48]	; (8000244 <adxl_spi_write+0x44>)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	7013      	strb	r3, [r2, #0]
	adxl_data[1] = regval;
 8000216:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <adxl_spi_write+0x44>)
 8000218:	79bb      	ldrb	r3, [r7, #6]
 800021a:	7053      	strb	r3, [r2, #1]
	ADXL_CS_EN();
 800021c:	2200      	movs	r2, #0
 800021e:	2110      	movs	r1, #16
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <adxl_spi_write+0x48>)
 8000222:	f001 f8b7 	bl	8001394 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, adxl_data, ADXL_WRCMD_LEN, ADXL_SPI_TIMO_VAL);
 8000226:	2364      	movs	r3, #100	; 0x64
 8000228:	2202      	movs	r2, #2
 800022a:	4906      	ldr	r1, [pc, #24]	; (8000244 <adxl_spi_write+0x44>)
 800022c:	4807      	ldr	r0, [pc, #28]	; (800024c <adxl_spi_write+0x4c>)
 800022e:	f001 fd99 	bl	8001d64 <HAL_SPI_Transmit>
	ADXL_CS_DIS();
 8000232:	2201      	movs	r2, #1
 8000234:	2110      	movs	r1, #16
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <adxl_spi_write+0x48>)
 8000238:	f001 f8ac 	bl	8001394 <HAL_GPIO_WritePin>
}
 800023c:	bf00      	nop
 800023e:	3708      	adds	r7, #8
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	20000098 	.word	0x20000098
 8000248:	40010800 	.word	0x40010800
 800024c:	200000bc 	.word	0x200000bc

08000250 <adxl_spi_read>:

void adxl_spi_read (uint8_t regaddr, uint8_t numregs, uint8_t *regdata)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	603a      	str	r2, [r7, #0]
 800025a:	71fb      	strb	r3, [r7, #7]
 800025c:	460b      	mov	r3, r1
 800025e:	71bb      	strb	r3, [r7, #6]
	regaddr |= (ADXL_READ_COMMAND | ADXL_MB);
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000266:	b2db      	uxtb	r3, r3
 8000268:	71fb      	strb	r3, [r7, #7]
	ADXL_CS_EN();
 800026a:	2200      	movs	r2, #0
 800026c:	2110      	movs	r1, #16
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <adxl_spi_read+0x50>)
 8000270:	f001 f890 	bl	8001394 <HAL_GPIO_WritePin>
	//read cmd with regaddr
	HAL_SPI_Transmit (&hspi1, &regaddr, ADXL_RDCMD_LEN, ADXL_SPI_TIMO_VAL);
 8000274:	1df9      	adds	r1, r7, #7
 8000276:	2364      	movs	r3, #100	; 0x64
 8000278:	2201      	movs	r2, #1
 800027a:	480a      	ldr	r0, [pc, #40]	; (80002a4 <adxl_spi_read+0x54>)
 800027c:	f001 fd72 	bl	8001d64 <HAL_SPI_Transmit>
	//read data from reg
	HAL_SPI_Receive (&hspi1, regdata, numregs, ADXL_SPI_TIMO_VAL);
 8000280:	79bb      	ldrb	r3, [r7, #6]
 8000282:	b29a      	uxth	r2, r3
 8000284:	2364      	movs	r3, #100	; 0x64
 8000286:	6839      	ldr	r1, [r7, #0]
 8000288:	4806      	ldr	r0, [pc, #24]	; (80002a4 <adxl_spi_read+0x54>)
 800028a:	f001 fea7 	bl	8001fdc <HAL_SPI_Receive>
	ADXL_CS_DIS();
 800028e:	2201      	movs	r2, #1
 8000290:	2110      	movs	r1, #16
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <adxl_spi_read+0x50>)
 8000294:	f001 f87e 	bl	8001394 <HAL_GPIO_WritePin>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40010800 	.word	0x40010800
 80002a4:	200000bc 	.word	0x200000bc

080002a8 <adxl345_init>:


int adxl345_init (void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
	uint8_t val;

	//clear all bits
	adxl_spi_write (ADXL_POWER_CTL, 0x00);
 80002ae:	2100      	movs	r1, #0
 80002b0:	202d      	movs	r0, #45	; 0x2d
 80002b2:	f7ff ffa5 	bl	8000200 <adxl_spi_write>
	adxl_spi_write (ADXL_INT_ENABLE, 0);
 80002b6:	2100      	movs	r1, #0
 80002b8:	202e      	movs	r0, #46	; 0x2e
 80002ba:	f7ff ffa1 	bl	8000200 <adxl_spi_write>
	adxl_spi_write (ADXL_FIFO_CTL, 2);	//just to turn off water mask interrupt
 80002be:	2102      	movs	r1, #2
 80002c0:	2038      	movs	r0, #56	; 0x38
 80002c2:	f7ff ff9d 	bl	8000200 <adxl_spi_write>
	//read interrupt source
	while(1)
	{
		adxl_spi_read(ADXL_INT_SOURCE, 1, &stsregval);
 80002c6:	4a2c      	ldr	r2, [pc, #176]	; (8000378 <adxl345_init+0xd0>)
 80002c8:	2101      	movs	r1, #1
 80002ca:	2030      	movs	r0, #48	; 0x30
 80002cc:	f7ff ffc0 	bl	8000250 <adxl_spi_read>
		//if data ready read anddiscard data
		if (stsregval & DATA_READY)
 80002d0:	4b29      	ldr	r3, [pc, #164]	; (8000378 <adxl345_init+0xd0>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	b25b      	sxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	da03      	bge.n	80002e2 <adxl345_init+0x3a>
			adxl_get_accl_val(adxl_xyzval, 1);
 80002da:	2101      	movs	r1, #1
 80002dc:	4827      	ldr	r0, [pc, #156]	; (800037c <adxl345_init+0xd4>)
 80002de:	f000 f87f 	bl	80003e0 <adxl_get_accl_val>
		if (stsregval == 0)
 80002e2:	4b25      	ldr	r3, [pc, #148]	; (8000378 <adxl345_init+0xd0>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d000      	beq.n	80002ec <adxl345_init+0x44>
		adxl_spi_read(ADXL_INT_SOURCE, 1, &stsregval);
 80002ea:	e7ec      	b.n	80002c6 <adxl345_init+0x1e>
			break;
 80002ec:	bf00      	nop
	}
	adxl_spi_write (ADXL_DATA_FORMAT, RANGE_4g);  //+-4g, 10 bit resolution, 4 wire spi
 80002ee:	2101      	movs	r1, #1
 80002f0:	2031      	movs	r0, #49	; 0x31
 80002f2:	f7ff ff85 	bl	8000200 <adxl_spi_write>
	adxl_spi_read(ADXL_DEVID, 1, &adxl_version);
 80002f6:	4a22      	ldr	r2, [pc, #136]	; (8000380 <adxl345_init+0xd8>)
 80002f8:	2101      	movs	r1, #1
 80002fa:	2000      	movs	r0, #0
 80002fc:	f7ff ffa8 	bl	8000250 <adxl_spi_read>
	if (adxl_version != ADXL_VERSION_NUM)
 8000300:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <adxl345_init+0xd8>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2be5      	cmp	r3, #229	; 0xe5
 8000306:	d002      	beq.n	800030e <adxl345_init+0x66>
		return -1;
 8000308:	f04f 33ff 	mov.w	r3, #4294967295
 800030c:	e030      	b.n	8000370 <adxl345_init+0xc8>
	//test rw with ADXL_THRESH_TAP register
	adxl_spi_write(ADXL_THRESH_TAP, ADXL_TEST_VAL);
 800030e:	2155      	movs	r1, #85	; 0x55
 8000310:	201d      	movs	r0, #29
 8000312:	f7ff ff75 	bl	8000200 <adxl_spi_write>
	adxl_spi_read(ADXL_THRESH_TAP, 1, &val);
 8000316:	1dfb      	adds	r3, r7, #7
 8000318:	461a      	mov	r2, r3
 800031a:	2101      	movs	r1, #1
 800031c:	201d      	movs	r0, #29
 800031e:	f7ff ff97 	bl	8000250 <adxl_spi_read>
	if (val != ADXL_TEST_VAL)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b55      	cmp	r3, #85	; 0x55
 8000326:	d002      	beq.n	800032e <adxl345_init+0x86>
		return -1;
 8000328:	f04f 33ff 	mov.w	r3, #4294967295
 800032c:	e020      	b.n	8000370 <adxl345_init+0xc8>
	adxl_spi_write(ADXL_THRESH_TAP, 0);
 800032e:	2100      	movs	r1, #0
 8000330:	201d      	movs	r0, #29
 8000332:	f7ff ff65 	bl	8000200 <adxl_spi_write>
	adxl_spi_write(ADXL_BW_RATE, 8);
 8000336:	2108      	movs	r1, #8
 8000338:	202c      	movs	r0, #44	; 0x2c
 800033a:	f7ff ff61 	bl	8000200 <adxl_spi_write>

	//program thresholds
	adxl_spi_write (ADXL_THRESH_ACT, 2);
 800033e:	2102      	movs	r1, #2
 8000340:	2024      	movs	r0, #36	; 0x24
 8000342:	f7ff ff5d 	bl	8000200 <adxl_spi_write>
	adxl_spi_write (ADXL_THRESH_INACT, 2);
 8000346:	2102      	movs	r1, #2
 8000348:	2025      	movs	r0, #37	; 0x25
 800034a:	f7ff ff59 	bl	8000200 <adxl_spi_write>
	adxl_spi_write (ADXL_TIME_INAT, 10);
 800034e:	210a      	movs	r1, #10
 8000350:	2026      	movs	r0, #38	; 0x26
 8000352:	f7ff ff55 	bl	8000200 <adxl_spi_write>
	adxl_spi_write (ADXL_ACT_INACT_CTL, 0x77);
 8000356:	2177      	movs	r1, #119	; 0x77
 8000358:	2027      	movs	r0, #39	; 0x27
 800035a:	f7ff ff51 	bl	8000200 <adxl_spi_write>

	//all interrupts to int1 line
	adxl_spi_write (ADXL_INT_MAP, 0);
 800035e:	2100      	movs	r1, #0
 8000360:	202f      	movs	r0, #47	; 0x2f
 8000362:	f7ff ff4d 	bl	8000200 <adxl_spi_write>
	adxl_spi_write (ADXL_POWER_CTL, (LINK_BIT | WAKEUP_8HZ));
 8000366:	2120      	movs	r1, #32
 8000368:	202d      	movs	r0, #45	; 0x2d
 800036a:	f7ff ff49 	bl	8000200 <adxl_spi_write>
	//adxl_read_regs();
	return 0;
 800036e:	2300      	movs	r3, #0
}
 8000370:	4618      	mov	r0, r3
 8000372:	3708      	adds	r7, #8
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	2000009f 	.word	0x2000009f
 800037c:	20000090 	.word	0x20000090
 8000380:	2000008c 	.word	0x2000008c

08000384 <adxl_start>:

void adxl_start(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	uint8_t val;
	adxl_spi_read (ADXL_POWER_CTL, 1, &val);
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	461a      	mov	r2, r3
 800038e:	2101      	movs	r1, #1
 8000390:	202d      	movs	r0, #45	; 0x2d
 8000392:	f7ff ff5d 	bl	8000250 <adxl_spi_read>
	val |= MEASURE;
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	f043 0308 	orr.w	r3, r3, #8
 800039c:	b2db      	uxtb	r3, r3
 800039e:	71fb      	strb	r3, [r7, #7]
	adxl_spi_write (ADXL_POWER_CTL,val);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	4619      	mov	r1, r3
 80003a4:	202d      	movs	r0, #45	; 0x2d
 80003a6:	f7ff ff2b 	bl	8000200 <adxl_spi_write>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <adxl_stop>:

void adxl_stop(void)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b082      	sub	sp, #8
 80003b6:	af00      	add	r7, sp, #0
	uint8_t val;
	adxl_spi_read (ADXL_POWER_CTL, 1, &val);
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	461a      	mov	r2, r3
 80003bc:	2101      	movs	r1, #1
 80003be:	202d      	movs	r0, #45	; 0x2d
 80003c0:	f7ff ff46 	bl	8000250 <adxl_spi_read>
	val &= ~MEASURE;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f023 0308 	bic.w	r3, r3, #8
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	71fb      	strb	r3, [r7, #7]
	adxl_spi_write (ADXL_POWER_CTL,val);
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	4619      	mov	r1, r3
 80003d2:	202d      	movs	r0, #45	; 0x2d
 80003d4:	f7ff ff14 	bl	8000200 <adxl_spi_write>
}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <adxl_get_accl_val>:

void adxl_get_accl_val(uint8_t *databuf, uint8_t entries)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b082      	sub	sp, #8
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	70fb      	strb	r3, [r7, #3]
	adxl_spi_read(ADXL_DATA0, (6 * entries), databuf);
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	461a      	mov	r2, r3
 80003f0:	0052      	lsls	r2, r2, #1
 80003f2:	4413      	add	r3, r2
 80003f4:	005b      	lsls	r3, r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	4619      	mov	r1, r3
 80003fc:	2032      	movs	r0, #50	; 0x32
 80003fe:	f7ff ff27 	bl	8000250 <adxl_spi_read>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <adxl_calibrate>:
}


#define CALIB_SAMPLES	100
void adxl_calibrate(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
	uint16_t count;
	uint32_t val;

	calib_value[0] = 0;
 8000412:	4b40      	ldr	r3, [pc, #256]	; (8000514 <adxl_calibrate+0x108>)
 8000414:	2200      	movs	r2, #0
 8000416:	801a      	strh	r2, [r3, #0]
	calib_value[1] = 0;
 8000418:	4b3e      	ldr	r3, [pc, #248]	; (8000514 <adxl_calibrate+0x108>)
 800041a:	2200      	movs	r2, #0
 800041c:	805a      	strh	r2, [r3, #2]
	calib_value[2] = 0;
 800041e:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <adxl_calibrate+0x108>)
 8000420:	2200      	movs	r2, #0
 8000422:	809a      	strh	r2, [r3, #4]
	count = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	80fb      	strh	r3, [r7, #6]
	adxl_start();
 8000428:	f7ff ffac 	bl	8000384 <adxl_start>
	while(1)
	{
		if (poll_adxl_event())
 800042c:	f7ff feae 	bl	800018c <poll_adxl_event>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0fa      	beq.n	800042c <adxl_calibrate+0x20>
		{
			count++;
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	3301      	adds	r3, #1
 800043a:	80fb      	strh	r3, [r7, #6]
			adxl_get_accl_val(adxl_xyzval, 1);
 800043c:	2101      	movs	r1, #1
 800043e:	4836      	ldr	r0, [pc, #216]	; (8000518 <adxl_calibrate+0x10c>)
 8000440:	f7ff ffce 	bl	80003e0 <adxl_get_accl_val>
			val = (adxl_xyzval[0] + (adxl_xyzval[1] * 256));
 8000444:	4b34      	ldr	r3, [pc, #208]	; (8000518 <adxl_calibrate+0x10c>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4b33      	ldr	r3, [pc, #204]	; (8000518 <adxl_calibrate+0x10c>)
 800044c:	785b      	ldrb	r3, [r3, #1]
 800044e:	021b      	lsls	r3, r3, #8
 8000450:	4413      	add	r3, r2
 8000452:	603b      	str	r3, [r7, #0]
			calib_value[0] += val;
 8000454:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <adxl_calibrate+0x108>)
 8000456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800045a:	b29a      	uxth	r2, r3
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	4413      	add	r3, r2
 8000462:	b29b      	uxth	r3, r3
 8000464:	b21a      	sxth	r2, r3
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <adxl_calibrate+0x108>)
 8000468:	801a      	strh	r2, [r3, #0]
			val = (adxl_xyzval[2] + (adxl_xyzval[3] * 256));
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <adxl_calibrate+0x10c>)
 800046c:	789b      	ldrb	r3, [r3, #2]
 800046e:	461a      	mov	r2, r3
 8000470:	4b29      	ldr	r3, [pc, #164]	; (8000518 <adxl_calibrate+0x10c>)
 8000472:	78db      	ldrb	r3, [r3, #3]
 8000474:	021b      	lsls	r3, r3, #8
 8000476:	4413      	add	r3, r2
 8000478:	603b      	str	r3, [r7, #0]
			calib_value[1] += val;
 800047a:	4b26      	ldr	r3, [pc, #152]	; (8000514 <adxl_calibrate+0x108>)
 800047c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000480:	b29a      	uxth	r2, r3
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	b29b      	uxth	r3, r3
 8000486:	4413      	add	r3, r2
 8000488:	b29b      	uxth	r3, r3
 800048a:	b21a      	sxth	r2, r3
 800048c:	4b21      	ldr	r3, [pc, #132]	; (8000514 <adxl_calibrate+0x108>)
 800048e:	805a      	strh	r2, [r3, #2]
			val = (adxl_xyzval[4] + (adxl_xyzval[5] * 256));
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <adxl_calibrate+0x10c>)
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	461a      	mov	r2, r3
 8000496:	4b20      	ldr	r3, [pc, #128]	; (8000518 <adxl_calibrate+0x10c>)
 8000498:	795b      	ldrb	r3, [r3, #5]
 800049a:	021b      	lsls	r3, r3, #8
 800049c:	4413      	add	r3, r2
 800049e:	603b      	str	r3, [r7, #0]
			calib_value[2] += val;
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <adxl_calibrate+0x108>)
 80004a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	4413      	add	r3, r2
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	b21a      	sxth	r2, r3
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <adxl_calibrate+0x108>)
 80004b4:	809a      	strh	r2, [r3, #4]
			if (count == CALIB_SAMPLES)
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	2b64      	cmp	r3, #100	; 0x64
 80004ba:	d1b7      	bne.n	800042c <adxl_calibrate+0x20>
			{
				adxl_stop();
 80004bc:	f7ff ff79 	bl	80003b2 <adxl_stop>
				calib_value[0] /= CALIB_SAMPLES;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <adxl_calibrate+0x108>)
 80004c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80004c6:	4a15      	ldr	r2, [pc, #84]	; (800051c <adxl_calibrate+0x110>)
 80004c8:	fb82 1203 	smull	r1, r2, r2, r3
 80004cc:	1152      	asrs	r2, r2, #5
 80004ce:	17db      	asrs	r3, r3, #31
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	b21a      	sxth	r2, r3
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <adxl_calibrate+0x108>)
 80004d6:	801a      	strh	r2, [r3, #0]
				calib_value[1] /= CALIB_SAMPLES;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <adxl_calibrate+0x108>)
 80004da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80004de:	4a0f      	ldr	r2, [pc, #60]	; (800051c <adxl_calibrate+0x110>)
 80004e0:	fb82 1203 	smull	r1, r2, r2, r3
 80004e4:	1152      	asrs	r2, r2, #5
 80004e6:	17db      	asrs	r3, r3, #31
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	b21a      	sxth	r2, r3
 80004ec:	4b09      	ldr	r3, [pc, #36]	; (8000514 <adxl_calibrate+0x108>)
 80004ee:	805a      	strh	r2, [r3, #2]
				calib_value[2] /= CALIB_SAMPLES;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <adxl_calibrate+0x108>)
 80004f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <adxl_calibrate+0x110>)
 80004f8:	fb82 1203 	smull	r1, r2, r2, r3
 80004fc:	1152      	asrs	r2, r2, #5
 80004fe:	17db      	asrs	r3, r3, #31
 8000500:	1ad3      	subs	r3, r2, r3
 8000502:	b21a      	sxth	r2, r3
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <adxl_calibrate+0x108>)
 8000506:	809a      	strh	r2, [r3, #4]
				break;
 8000508:	bf00      	nop
			}
		}
	}
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	200000a0 	.word	0x200000a0
 8000518:	20000090 	.word	0x20000090
 800051c:	51eb851f 	.word	0x51eb851f

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fbaf 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f907 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f9a7 	bl	8000880 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000532:	f000 f945 	bl	80007c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f979 	bl	800082c <MX_USART2_UART_Init>
  HAL_UART_Transmit(&huart2, (uint8_t *)BANNER, strlen(BANNER), 100);
 800053a:	2364      	movs	r3, #100	; 0x64
 800053c:	220e      	movs	r2, #14
 800053e:	4974      	ldr	r1, [pc, #464]	; (8000710 <main+0x1f0>)
 8000540:	4874      	ldr	r0, [pc, #464]	; (8000714 <main+0x1f4>)
 8000542:	f002 fa48 	bl	80029d6 <HAL_UART_Transmit>
  /* USER CODE BEGIN 2 */
  adxl345_init();
 8000546:	f7ff feaf 	bl	80002a8 <adxl345_init>

  HAL_Delay(100);
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 fbfe 	bl	8000d4c <HAL_Delay>
  adxl_calibrate();
 8000550:	f7ff ff5c 	bl	800040c <adxl_calibrate>
  adxl_start();
 8000554:	f7ff ff16 	bl	8000384 <adxl_start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if 1
	  entries = poll_adxl_event();
 8000558:	f7ff fe18 	bl	800018c <poll_adxl_event>
 800055c:	4603      	mov	r3, r0
 800055e:	75fb      	strb	r3, [r7, #23]
	if (entries)
 8000560:	7dfb      	ldrb	r3, [r7, #23]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d0f8      	beq.n	8000558 <main+0x38>
	{
		if (!entries)
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <main+0x52>
			entries++;
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	3301      	adds	r3, #1
 8000570:	75fb      	strb	r3, [r7, #23]
		adxl_get_accl_val(adxl_xyzval, entries);
 8000572:	7dfb      	ldrb	r3, [r7, #23]
 8000574:	4619      	mov	r1, r3
 8000576:	4868      	ldr	r0, [pc, #416]	; (8000718 <main+0x1f8>)
 8000578:	f7ff ff32 	bl	80003e0 <adxl_get_accl_val>
		adxl_curr_values[0] = ((short)(adxl_xyzval[0] + adxl_xyzval[1] * 256) - calib_value[0]);
 800057c:	4b66      	ldr	r3, [pc, #408]	; (8000718 <main+0x1f8>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b29a      	uxth	r2, r3
 8000582:	4b65      	ldr	r3, [pc, #404]	; (8000718 <main+0x1f8>)
 8000584:	785b      	ldrb	r3, [r3, #1]
 8000586:	b29b      	uxth	r3, r3
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b29b      	uxth	r3, r3
 800058c:	4413      	add	r3, r2
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b62      	ldr	r3, [pc, #392]	; (800071c <main+0x1fc>)
 8000592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000596:	b29b      	uxth	r3, r3
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	b29b      	uxth	r3, r3
 800059c:	b21a      	sxth	r2, r3
 800059e:	4b60      	ldr	r3, [pc, #384]	; (8000720 <main+0x200>)
 80005a0:	801a      	strh	r2, [r3, #0]
		adxl_curr_values[1] = ((short)(adxl_xyzval[2] + adxl_xyzval[3] * 256) - calib_value[1]);
 80005a2:	4b5d      	ldr	r3, [pc, #372]	; (8000718 <main+0x1f8>)
 80005a4:	789b      	ldrb	r3, [r3, #2]
 80005a6:	b29a      	uxth	r2, r3
 80005a8:	4b5b      	ldr	r3, [pc, #364]	; (8000718 <main+0x1f8>)
 80005aa:	78db      	ldrb	r3, [r3, #3]
 80005ac:	b29b      	uxth	r3, r3
 80005ae:	021b      	lsls	r3, r3, #8
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4413      	add	r3, r2
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	4b59      	ldr	r3, [pc, #356]	; (800071c <main+0x1fc>)
 80005b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80005bc:	b29b      	uxth	r3, r3
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	b21a      	sxth	r2, r3
 80005c4:	4b56      	ldr	r3, [pc, #344]	; (8000720 <main+0x200>)
 80005c6:	805a      	strh	r2, [r3, #2]
		adxl_curr_values[2] = ((short)(adxl_xyzval[4] + adxl_xyzval[5] * 256) - calib_value[2]);
 80005c8:	4b53      	ldr	r3, [pc, #332]	; (8000718 <main+0x1f8>)
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	4b52      	ldr	r3, [pc, #328]	; (8000718 <main+0x1f8>)
 80005d0:	795b      	ldrb	r3, [r3, #5]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	021b      	lsls	r3, r3, #8
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	4413      	add	r3, r2
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b4f      	ldr	r3, [pc, #316]	; (800071c <main+0x1fc>)
 80005de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	b21a      	sxth	r2, r3
 80005ea:	4b4d      	ldr	r3, [pc, #308]	; (8000720 <main+0x200>)
 80005ec:	809a      	strh	r2, [r3, #4]
		if (!init_pending)
 80005ee:	4b4d      	ldr	r3, [pc, #308]	; (8000724 <main+0x204>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d112      	bne.n	800061c <main+0xfc>
		{
			init_pending = 1;
 80005f6:	4b4b      	ldr	r3, [pc, #300]	; (8000724 <main+0x204>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
			adxl_saved_values[0] = adxl_curr_values[0];
 80005fc:	4b48      	ldr	r3, [pc, #288]	; (8000720 <main+0x200>)
 80005fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000602:	4b49      	ldr	r3, [pc, #292]	; (8000728 <main+0x208>)
 8000604:	801a      	strh	r2, [r3, #0]
			adxl_saved_values[1] = adxl_curr_values[1];
 8000606:	4b46      	ldr	r3, [pc, #280]	; (8000720 <main+0x200>)
 8000608:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800060c:	4b46      	ldr	r3, [pc, #280]	; (8000728 <main+0x208>)
 800060e:	805a      	strh	r2, [r3, #2]
			adxl_saved_values[2] = adxl_curr_values[2];
 8000610:	4b43      	ldr	r3, [pc, #268]	; (8000720 <main+0x200>)
 8000612:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000616:	4b44      	ldr	r3, [pc, #272]	; (8000728 <main+0x208>)
 8000618:	809a      	strh	r2, [r3, #4]
 800061a:	e79d      	b.n	8000558 <main+0x38>
		} else {
			int diffx, diffy,diffz;

			diffx = (adxl_curr_values[0] - adxl_saved_values[0]);
 800061c:	4b40      	ldr	r3, [pc, #256]	; (8000720 <main+0x200>)
 800061e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000622:	461a      	mov	r2, r3
 8000624:	4b40      	ldr	r3, [pc, #256]	; (8000728 <main+0x208>)
 8000626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	613b      	str	r3, [r7, #16]
			diffy = (adxl_curr_values[1] - adxl_saved_values[1]);
 800062e:	4b3c      	ldr	r3, [pc, #240]	; (8000720 <main+0x200>)
 8000630:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000634:	461a      	mov	r2, r3
 8000636:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <main+0x208>)
 8000638:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	60fb      	str	r3, [r7, #12]
			diffz = (adxl_curr_values[2] - adxl_saved_values[2]);
 8000640:	4b37      	ldr	r3, [pc, #220]	; (8000720 <main+0x200>)
 8000642:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000646:	461a      	mov	r2, r3
 8000648:	4b37      	ldr	r3, [pc, #220]	; (8000728 <main+0x208>)
 800064a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800064e:	1ad3      	subs	r3, r2, r3
 8000650:	60bb      	str	r3, [r7, #8]
			adxl_diff_values[0] = diffx;
 8000652:	693b      	ldr	r3, [r7, #16]
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b35      	ldr	r3, [pc, #212]	; (800072c <main+0x20c>)
 8000658:	801a      	strh	r2, [r3, #0]
			adxl_diff_values[1] = diffy;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	b21a      	sxth	r2, r3
 800065e:	4b33      	ldr	r3, [pc, #204]	; (800072c <main+0x20c>)
 8000660:	805a      	strh	r2, [r3, #2]
			if (abs(diffx) < 10)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	f113 0f09 	cmn.w	r3, #9
 8000668:	db04      	blt.n	8000674 <main+0x154>
 800066a:	693b      	ldr	r3, [r7, #16]
 800066c:	2b09      	cmp	r3, #9
 800066e:	dc01      	bgt.n	8000674 <main+0x154>
				diffx = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
			if (abs(diffy) < 10)
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f113 0f09 	cmn.w	r3, #9
 800067a:	db04      	blt.n	8000686 <main+0x166>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b09      	cmp	r3, #9
 8000680:	dc01      	bgt.n	8000686 <main+0x166>
				diffy = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
			if (abs(diffz) < 10)
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	f113 0f09 	cmn.w	r3, #9
 800068c:	db04      	blt.n	8000698 <main+0x178>
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	2b09      	cmp	r3, #9
 8000692:	dc01      	bgt.n	8000698 <main+0x178>
							diffz = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
			//compare and report
			if ((diffx != 0) || (diffy != 0) || (diffz != 0))
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d105      	bne.n	80006aa <main+0x18a>
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d102      	bne.n	80006aa <main+0x18a>
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d028      	beq.n	80006fc <main+0x1dc>
			{
				len = sprintf ((char *)uart_data, "x:%d,y:%d,z:%d\r\n",
					//diffy, diffx, diffz);
						adxl_curr_values[0], adxl_curr_values[1], adxl_curr_values[2]);
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <main+0x200>)
 80006ac:	f9b3 3000 	ldrsh.w	r3, [r3]
				len = sprintf ((char *)uart_data, "x:%d,y:%d,z:%d\r\n",
 80006b0:	461a      	mov	r2, r3
						adxl_curr_values[0], adxl_curr_values[1], adxl_curr_values[2]);
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <main+0x200>)
 80006b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
				len = sprintf ((char *)uart_data, "x:%d,y:%d,z:%d\r\n",
 80006b8:	4619      	mov	r1, r3
						adxl_curr_values[0], adxl_curr_values[1], adxl_curr_values[2]);
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <main+0x200>)
 80006bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
				len = sprintf ((char *)uart_data, "x:%d,y:%d,z:%d\r\n",
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	460b      	mov	r3, r1
 80006c4:	491a      	ldr	r1, [pc, #104]	; (8000730 <main+0x210>)
 80006c6:	481b      	ldr	r0, [pc, #108]	; (8000734 <main+0x214>)
 80006c8:	f002 fd56 	bl	8003178 <siprintf>
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
				HAL_UART_Transmit(&huart2, uart_data, len, 100);
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	2364      	movs	r3, #100	; 0x64
 80006d6:	4917      	ldr	r1, [pc, #92]	; (8000734 <main+0x214>)
 80006d8:	480e      	ldr	r0, [pc, #56]	; (8000714 <main+0x1f4>)
 80006da:	f002 f97c 	bl	80029d6 <HAL_UART_Transmit>
				adxl_saved_values[0] = adxl_curr_values[0];
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <main+0x200>)
 80006e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80006e4:	4b10      	ldr	r3, [pc, #64]	; (8000728 <main+0x208>)
 80006e6:	801a      	strh	r2, [r3, #0]
				adxl_saved_values[1] = adxl_curr_values[1];
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <main+0x200>)
 80006ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <main+0x208>)
 80006f0:	805a      	strh	r2, [r3, #2]
				adxl_saved_values[2] = adxl_curr_values[2];
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <main+0x200>)
 80006f4:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <main+0x208>)
 80006fa:	809a      	strh	r2, [r3, #4]
			}
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <main+0x218>)
 8000702:	f000 fe5f 	bl	80013c4 <HAL_GPIO_TogglePin>
			HAL_Delay(20);
 8000706:	2014      	movs	r0, #20
 8000708:	f000 fb20 	bl	8000d4c <HAL_Delay>
	  entries = poll_adxl_event();
 800070c:	e724      	b.n	8000558 <main+0x38>
 800070e:	bf00      	nop
 8000710:	08003a84 	.word	0x08003a84
 8000714:	20000114 	.word	0x20000114
 8000718:	20000090 	.word	0x20000090
 800071c:	200000a0 	.word	0x200000a0
 8000720:	200001dc 	.word	0x200001dc
 8000724:	200001ea 	.word	0x200001ea
 8000728:	200001d4 	.word	0x200001d4
 800072c:	200001e4 	.word	0x200001e4
 8000730:	08003a94 	.word	0x08003a94
 8000734:	20000154 	.word	0x20000154
 8000738:	40011000 	.word	0x40011000

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b090      	sub	sp, #64	; 0x40
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	2228      	movs	r2, #40	; 0x28
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fd0c 	bl	8003168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	2302      	movs	r3, #2
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000762:	2301      	movs	r3, #1
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2310      	movs	r3, #16
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800076e:	2300      	movs	r3, #0
 8000770:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000772:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000778:	f107 0318 	add.w	r3, r7, #24
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fe53 	bl	8001428 <HAL_RCC_OscConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000788:	f000 f8fe 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	230f      	movs	r3, #15
 800078e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000798:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800079c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800079e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2102      	movs	r1, #2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 f8bf 	bl	800192c <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f8e8 	bl	8000988 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	3740      	adds	r7, #64	; 0x40
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <MX_SPI1_Init+0x64>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <MX_SPI1_Init+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_SPI1_Init+0x64>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_SPI1_Init+0x64>)
 800080c:	220a      	movs	r2, #10
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_SPI1_Init+0x64>)
 8000812:	f001 fa23 	bl	8001c5c <HAL_SPI_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800081c:	f000 f8b4 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000bc 	.word	0x200000bc
 8000828:	40013000 	.word	0x40013000

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <MX_USART2_UART_Init+0x50>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000838:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x4c>)
 8000864:	f002 f86a 	bl	800293c <HAL_UART_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086e:	f000 f88b 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000114 	.word	0x20000114
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0310 	add.w	r3, r7, #16
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_GPIO_Init+0xf4>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a36      	ldr	r2, [pc, #216]	; (8000974 <MX_GPIO_Init+0xf4>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_GPIO_Init+0xf4>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0310 	and.w	r3, r3, #16
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_GPIO_Init+0xf4>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a30      	ldr	r2, [pc, #192]	; (8000974 <MX_GPIO_Init+0xf4>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b2e      	ldr	r3, [pc, #184]	; (8000974 <MX_GPIO_Init+0xf4>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_GPIO_Init+0xf4>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <MX_GPIO_Init+0xf4>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0xf4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008e2:	4825      	ldr	r0, [pc, #148]	; (8000978 <MX_GPIO_Init+0xf8>)
 80008e4:	f000 fd56 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2110      	movs	r1, #16
 80008ec:	4823      	ldr	r0, [pc, #140]	; (800097c <MX_GPIO_Init+0xfc>)
 80008ee:	f000 fd51 	bl	8001394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2302      	movs	r3, #2
 8000902:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	4619      	mov	r1, r3
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <MX_GPIO_Init+0xf8>)
 800090c:	f000 fbc6 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000910:	2302      	movs	r3, #2
 8000912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000918:	2302      	movs	r3, #2
 800091a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4816      	ldr	r0, [pc, #88]	; (800097c <MX_GPIO_Init+0xfc>)
 8000924:	f000 fbba 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000928:	2310      	movs	r3, #16
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	4619      	mov	r1, r3
 800093e:	480f      	ldr	r0, [pc, #60]	; (800097c <MX_GPIO_Init+0xfc>)
 8000940:	f000 fbac 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000944:	2301      	movs	r3, #1
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000948:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_GPIO_Init+0x100>)
 800094a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0x104>)
 8000958:	f000 fba0 	bl	800109c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2006      	movs	r0, #6
 8000962:	f000 faee 	bl	8000f42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000966:	2006      	movs	r0, #6
 8000968:	f000 fb07 	bl	8000f7a <HAL_NVIC_EnableIRQ>

}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	40011000 	.word	0x40011000
 800097c:	40010800 	.word	0x40010800
 8000980:	10110000 	.word	0x10110000
 8000984:	40010c00 	.word	0x40010c00

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_MspInit+0x5c>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a14      	ldr	r2, [pc, #80]	; (80009f0 <HAL_MspInit+0x5c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <HAL_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_MspInit+0x5c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <HAL_MspInit+0x5c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <HAL_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <HAL_MspInit+0x60>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <HAL_MspInit+0x60>)
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40010000 	.word	0x40010000

080009f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1f      	ldr	r2, [pc, #124]	; (8000a90 <HAL_SPI_MspInit+0x98>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d137      	bne.n	8000a88 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a18:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <HAL_SPI_MspInit+0x9c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_SPI_MspInit+0x9c>)
 8000a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <HAL_SPI_MspInit+0x9c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_SPI_MspInit+0x9c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_SPI_MspInit+0x9c>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_SPI_MspInit+0x9c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a48:	23a0      	movs	r3, #160	; 0xa0
 8000a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480f      	ldr	r0, [pc, #60]	; (8000a98 <HAL_SPI_MspInit+0xa0>)
 8000a5c:	f000 fb1e 	bl	800109c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a60:	2340      	movs	r3, #64	; 0x40
 8000a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <HAL_SPI_MspInit+0xa0>)
 8000a74:	f000 fb12 	bl	800109c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2023      	movs	r0, #35	; 0x23
 8000a7e:	f000 fa60 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000a82:	2023      	movs	r0, #35	; 0x23
 8000a84:	f000 fa79 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40013000 	.word	0x40013000
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010800 	.word	0x40010800

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_UART_MspInit+0x98>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d137      	bne.n	8000b2c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abc:	4b1e      	ldr	r3, [pc, #120]	; (8000b38 <HAL_UART_MspInit+0x9c>)
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_UART_MspInit+0x9c>)
 8000ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac6:	61d3      	str	r3, [r2, #28]
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <HAL_UART_MspInit+0x9c>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x9c>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x9c>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x9c>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aec:	2304      	movs	r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	4619      	mov	r1, r3
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <HAL_UART_MspInit+0xa0>)
 8000b00:	f000 facc 	bl	800109c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b04:	2308      	movs	r3, #8
 8000b06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4619      	mov	r1, r3
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <HAL_UART_MspInit+0xa0>)
 8000b18:	f000 fac0 	bl	800109c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	2026      	movs	r0, #38	; 0x26
 8000b22:	f000 fa0e 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b26:	2026      	movs	r0, #38	; 0x26
 8000b28:	f000 fa27 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010800 	.word	0x40010800

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b86:	f000 f8c5 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fc30 	bl	80013f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <SPI1_IRQHandler+0x10>)
 8000ba2:	f001 fccf 	bl	8002544 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000bc 	.word	0x200000bc

08000bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <USART2_IRQHandler+0x10>)
 8000bb6:	f001 ffa1 	bl	8002afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000114 	.word	0x20000114

08000bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <_sbrk+0x5c>)
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <_sbrk+0x60>)
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <_sbrk+0x64>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <_sbrk+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d207      	bcs.n	8000c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf4:	f002 fa8e 	bl	8003114 <__errno>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e009      	b.n	8000c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <_sbrk+0x64>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <_sbrk+0x64>)
 8000c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20002800 	.word	0x20002800
 8000c24:	00000400 	.word	0x00000400
 8000c28:	200001ec 	.word	0x200001ec
 8000c2c:	20000208 	.word	0x20000208

08000c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr

08000c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c3e:	e003      	b.n	8000c48 <LoopCopyDataInit>

08000c40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c46:	3104      	adds	r1, #4

08000c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c50:	d3f6      	bcc.n	8000c40 <CopyDataInit>
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c54:	e002      	b.n	8000c5c <LoopFillZerobss>

08000c56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c58:	f842 3b04 	str.w	r3, [r2], #4

08000c5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c60:	d3f9      	bcc.n	8000c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c62:	f7ff ffe5 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 fa5b 	bl	8003120 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6a:	f7ff fc59 	bl	8000520 <main>
  bx lr
 8000c6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c70:	08003b0c 	.word	0x08003b0c
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c78:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000c7c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000c80:	20000204 	.word	0x20000204

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_Init+0x28>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <HAL_Init+0x28>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 f947 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe76 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40022000 	.word	0x40022000

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f95f 	bl	8000f96 <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 f927 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	; (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_IncTick+0x20>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a03      	ldr	r2, [pc, #12]	; (8000d34 <HAL_IncTick+0x20>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200001f0 	.word	0x200001f0

08000d38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	; (8000d48 <HAL_GetTick+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	200001f0 	.word	0x200001f0

08000d4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d54:	f7ff fff0 	bl	8000d38 <HAL_GetTick>
 8000d58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d64:	d005      	beq.n	8000d72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <HAL_Delay+0x44>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	4413      	add	r3, r2
 8000d70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d72:	bf00      	nop
 8000d74:	f7ff ffe0 	bl	8000d38 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8f7      	bhi.n	8000d74 <HAL_Delay+0x28>
  {
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4906      	ldr	r1, [pc, #24]	; (8000e2c <__NVIC_EnableIRQ+0x34>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff2d 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff42 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff35 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d005      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e051      	b.n	8001076 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 020e 	bic.w	r2, r2, #14
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a22      	ldr	r2, [pc, #136]	; (8001080 <HAL_DMA_Abort_IT+0xd0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d029      	beq.n	8001050 <HAL_DMA_Abort_IT+0xa0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a20      	ldr	r2, [pc, #128]	; (8001084 <HAL_DMA_Abort_IT+0xd4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d022      	beq.n	800104c <HAL_DMA_Abort_IT+0x9c>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <HAL_DMA_Abort_IT+0xd8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d01a      	beq.n	8001046 <HAL_DMA_Abort_IT+0x96>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_DMA_Abort_IT+0xdc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d012      	beq.n	8001040 <HAL_DMA_Abort_IT+0x90>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <HAL_DMA_Abort_IT+0xe0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d00a      	beq.n	800103a <HAL_DMA_Abort_IT+0x8a>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1a      	ldr	r2, [pc, #104]	; (8001094 <HAL_DMA_Abort_IT+0xe4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d102      	bne.n	8001034 <HAL_DMA_Abort_IT+0x84>
 800102e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001032:	e00e      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001038:	e00b      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 800103a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103e:	e008      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	e005      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104a:	e002      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 800104c:	2310      	movs	r3, #16
 800104e:	e000      	b.n	8001052 <HAL_DMA_Abort_IT+0xa2>
 8001050:	2301      	movs	r3, #1
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <HAL_DMA_Abort_IT+0xe8>)
 8001054:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
    } 
  }
  return status;
 8001076:	7bfb      	ldrb	r3, [r7, #15]
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020008 	.word	0x40020008
 8001084:	4002001c 	.word	0x4002001c
 8001088:	40020030 	.word	0x40020030
 800108c:	40020044 	.word	0x40020044
 8001090:	40020058 	.word	0x40020058
 8001094:	4002006c 	.word	0x4002006c
 8001098:	40020000 	.word	0x40020000

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b08b      	sub	sp, #44	; 0x2c
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ae:	e161      	b.n	8001374 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b0:	2201      	movs	r2, #1
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	f040 8150 	bne.w	800136e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a97      	ldr	r2, [pc, #604]	; (8001330 <HAL_GPIO_Init+0x294>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d05e      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010d8:	4a95      	ldr	r2, [pc, #596]	; (8001330 <HAL_GPIO_Init+0x294>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d875      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010de:	4a95      	ldr	r2, [pc, #596]	; (8001334 <HAL_GPIO_Init+0x298>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d058      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010e4:	4a93      	ldr	r2, [pc, #588]	; (8001334 <HAL_GPIO_Init+0x298>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d86f      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010ea:	4a93      	ldr	r2, [pc, #588]	; (8001338 <HAL_GPIO_Init+0x29c>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d052      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010f0:	4a91      	ldr	r2, [pc, #580]	; (8001338 <HAL_GPIO_Init+0x29c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d869      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 80010f6:	4a91      	ldr	r2, [pc, #580]	; (800133c <HAL_GPIO_Init+0x2a0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d04c      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 80010fc:	4a8f      	ldr	r2, [pc, #572]	; (800133c <HAL_GPIO_Init+0x2a0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d863      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001102:	4a8f      	ldr	r2, [pc, #572]	; (8001340 <HAL_GPIO_Init+0x2a4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d046      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
 8001108:	4a8d      	ldr	r2, [pc, #564]	; (8001340 <HAL_GPIO_Init+0x2a4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d85d      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 800110e:	2b12      	cmp	r3, #18
 8001110:	d82a      	bhi.n	8001168 <HAL_GPIO_Init+0xcc>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d859      	bhi.n	80011ca <HAL_GPIO_Init+0x12e>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <HAL_GPIO_Init+0x80>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001197 	.word	0x08001197
 8001120:	08001171 	.word	0x08001171
 8001124:	08001183 	.word	0x08001183
 8001128:	080011c5 	.word	0x080011c5
 800112c:	080011cb 	.word	0x080011cb
 8001130:	080011cb 	.word	0x080011cb
 8001134:	080011cb 	.word	0x080011cb
 8001138:	080011cb 	.word	0x080011cb
 800113c:	080011cb 	.word	0x080011cb
 8001140:	080011cb 	.word	0x080011cb
 8001144:	080011cb 	.word	0x080011cb
 8001148:	080011cb 	.word	0x080011cb
 800114c:	080011cb 	.word	0x080011cb
 8001150:	080011cb 	.word	0x080011cb
 8001154:	080011cb 	.word	0x080011cb
 8001158:	080011cb 	.word	0x080011cb
 800115c:	080011cb 	.word	0x080011cb
 8001160:	08001179 	.word	0x08001179
 8001164:	0800118d 	.word	0x0800118d
 8001168:	4a76      	ldr	r2, [pc, #472]	; (8001344 <HAL_GPIO_Init+0x2a8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800116e:	e02c      	b.n	80011ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	623b      	str	r3, [r7, #32]
          break;
 8001176:	e029      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	3304      	adds	r3, #4
 800117e:	623b      	str	r3, [r7, #32]
          break;
 8001180:	e024      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	3308      	adds	r3, #8
 8001188:	623b      	str	r3, [r7, #32]
          break;
 800118a:	e01f      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	330c      	adds	r3, #12
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e01a      	b.n	80011cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800119e:	2304      	movs	r3, #4
 80011a0:	623b      	str	r3, [r7, #32]
          break;
 80011a2:	e013      	b.n	80011cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d105      	bne.n	80011b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ac:	2308      	movs	r3, #8
 80011ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	611a      	str	r2, [r3, #16]
          break;
 80011b6:	e009      	b.n	80011cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b8:	2308      	movs	r3, #8
 80011ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	615a      	str	r2, [r3, #20]
          break;
 80011c2:	e003      	b.n	80011cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e000      	b.n	80011cc <HAL_GPIO_Init+0x130>
          break;
 80011ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2bff      	cmp	r3, #255	; 0xff
 80011d0:	d801      	bhi.n	80011d6 <HAL_GPIO_Init+0x13a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e001      	b.n	80011da <HAL_GPIO_Init+0x13e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3304      	adds	r3, #4
 80011da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	2bff      	cmp	r3, #255	; 0xff
 80011e0:	d802      	bhi.n	80011e8 <HAL_GPIO_Init+0x14c>
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x152>
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	3b08      	subs	r3, #8
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	210f      	movs	r1, #15
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	6a39      	ldr	r1, [r7, #32]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	431a      	orrs	r2, r3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80a9 	beq.w	800136e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800121c:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a49      	ldr	r2, [pc, #292]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_GPIO_Init+0x2ac>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001234:	4a45      	ldr	r2, [pc, #276]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a3d      	ldr	r2, [pc, #244]	; (8001350 <HAL_GPIO_Init+0x2b4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1e0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a3c      	ldr	r2, [pc, #240]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1dc>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a3b      	ldr	r2, [pc, #236]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1d8>
 8001270:	2302      	movs	r3, #2
 8001272:	e004      	b.n	800127e <HAL_GPIO_Init+0x1e2>
 8001274:	2303      	movs	r3, #3
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x1e2>
 8001278:	2301      	movs	r3, #1
 800127a:	e000      	b.n	800127e <HAL_GPIO_Init+0x1e2>
 800127c:	2300      	movs	r3, #0
 800127e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001280:	f002 0203 	and.w	r2, r2, #3
 8001284:	0092      	lsls	r2, r2, #2
 8001286:	4093      	lsls	r3, r2
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800128e:	492f      	ldr	r1, [pc, #188]	; (800134c <HAL_GPIO_Init+0x2b0>)
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	492b      	ldr	r1, [pc, #172]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	43db      	mvns	r3, r3
 80012be:	4927      	ldr	r1, [pc, #156]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012d0:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4921      	ldr	r1, [pc, #132]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	491d      	ldr	r1, [pc, #116]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012fa:	689a      	ldr	r2, [r3, #8]
 80012fc:	4917      	ldr	r1, [pc, #92]	; (800135c <HAL_GPIO_Init+0x2c0>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	608b      	str	r3, [r1, #8]
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <HAL_GPIO_Init+0x2c0>)
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	43db      	mvns	r3, r3
 800130e:	4913      	ldr	r1, [pc, #76]	; (800135c <HAL_GPIO_Init+0x2c0>)
 8001310:	4013      	ands	r3, r2
 8001312:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01f      	beq.n	8001360 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_GPIO_Init+0x2c0>)
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	490d      	ldr	r1, [pc, #52]	; (800135c <HAL_GPIO_Init+0x2c0>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	60cb      	str	r3, [r1, #12]
 800132c:	e01f      	b.n	800136e <HAL_GPIO_Init+0x2d2>
 800132e:	bf00      	nop
 8001330:	10320000 	.word	0x10320000
 8001334:	10310000 	.word	0x10310000
 8001338:	10220000 	.word	0x10220000
 800133c:	10210000 	.word	0x10210000
 8001340:	10120000 	.word	0x10120000
 8001344:	10110000 	.word	0x10110000
 8001348:	40021000 	.word	0x40021000
 800134c:	40010000 	.word	0x40010000
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00
 8001358:	40011000 	.word	0x40011000
 800135c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_GPIO_Init+0x2f4>)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	43db      	mvns	r3, r3
 8001368:	4909      	ldr	r1, [pc, #36]	; (8001390 <HAL_GPIO_Init+0x2f4>)
 800136a:	4013      	ands	r3, r2
 800136c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	3301      	adds	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	fa22 f303 	lsr.w	r3, r2, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	f47f ae96 	bne.w	80010b0 <HAL_GPIO_Init+0x14>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	372c      	adds	r7, #44	; 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	611a      	str	r2, [r3, #16]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr

080013c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4013      	ands	r3, r2
 80013dc:	041a      	lsls	r2, r3, #16
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43d9      	mvns	r1, r3
 80013e2:	887b      	ldrh	r3, [r7, #2]
 80013e4:	400b      	ands	r3, r1
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bc80      	pop	{r7}
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fe98 	bl	800014c <HAL_GPIO_EXTI_Callback>
  }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e272      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 8087 	beq.w	8001556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001448:	4b92      	ldr	r3, [pc, #584]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 030c 	and.w	r3, r3, #12
 8001450:	2b04      	cmp	r3, #4
 8001452:	d00c      	beq.n	800146e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001454:	4b8f      	ldr	r3, [pc, #572]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 030c 	and.w	r3, r3, #12
 800145c:	2b08      	cmp	r3, #8
 800145e:	d112      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
 8001460:	4b8c      	ldr	r3, [pc, #560]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d10b      	bne.n	8001486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146e:	4b89      	ldr	r3, [pc, #548]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d06c      	beq.n	8001554 <HAL_RCC_OscConfig+0x12c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d168      	bne.n	8001554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e24c      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148e:	d106      	bne.n	800149e <HAL_RCC_OscConfig+0x76>
 8001490:	4b80      	ldr	r3, [pc, #512]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a7f      	ldr	r2, [pc, #508]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e02e      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b7b      	ldr	r3, [pc, #492]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a7a      	ldr	r2, [pc, #488]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b78      	ldr	r3, [pc, #480]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a77      	ldr	r2, [pc, #476]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0xbc>
 80014ca:	4b72      	ldr	r3, [pc, #456]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a71      	ldr	r2, [pc, #452]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b6f      	ldr	r3, [pc, #444]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6e      	ldr	r2, [pc, #440]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xd4>
 80014e4:	4b6b      	ldr	r3, [pc, #428]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a6a      	ldr	r2, [pc, #424]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a67      	ldr	r2, [pc, #412]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc18 	bl	8000d38 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fc14 	bl	8000d38 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e200      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b5d      	ldr	r3, [pc, #372]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xe4>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc04 	bl	8000d38 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc00 	bl	8000d38 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e1ec      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	4b53      	ldr	r3, [pc, #332]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x10c>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d063      	beq.n	800162a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001562:	4b4c      	ldr	r3, [pc, #304]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800156e:	4b49      	ldr	r3, [pc, #292]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b08      	cmp	r3, #8
 8001578:	d11c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x18c>
 800157a:	4b46      	ldr	r3, [pc, #280]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	4b43      	ldr	r3, [pc, #268]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d005      	beq.n	800159e <HAL_RCC_OscConfig+0x176>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d001      	beq.n	800159e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e1c0      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	4939      	ldr	r1, [pc, #228]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e03a      	b.n	800162a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b36      	ldr	r3, [pc, #216]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fbb9 	bl	8000d38 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ca:	f7ff fbb5 	bl	8000d38 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1a1      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4927      	ldr	r1, [pc, #156]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	600b      	str	r3, [r1, #0]
 80015fc:	e015      	b.n	800162a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x270>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb98 	bl	8000d38 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800160c:	f7ff fb94 	bl	8000d38 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e180      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03a      	beq.n	80016ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d019      	beq.n	8001672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <HAL_RCC_OscConfig+0x274>)
 8001640:	2201      	movs	r2, #1
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001644:	f7ff fb78 	bl	8000d38 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164c:	f7ff fb74 	bl	8000d38 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e160      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_RCC_OscConfig+0x26c>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f000 fad8 	bl	8001c20 <RCC_Delay>
 8001670:	e01c      	b.n	80016ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_RCC_OscConfig+0x274>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff fb5e 	bl	8000d38 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167e:	e00f      	b.n	80016a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fb5a 	bl	8000d38 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d908      	bls.n	80016a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e146      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000
 8001698:	42420000 	.word	0x42420000
 800169c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b92      	ldr	r3, [pc, #584]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1e9      	bne.n	8001680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80a6 	beq.w	8001806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b8b      	ldr	r3, [pc, #556]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10d      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	4a87      	ldr	r2, [pc, #540]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	61d3      	str	r3, [r2, #28]
 80016d6:	4b85      	ldr	r3, [pc, #532]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e2:	2301      	movs	r3, #1
 80016e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e6:	4b82      	ldr	r3, [pc, #520]	; (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d118      	bne.n	8001724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f2:	4b7f      	ldr	r3, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a7e      	ldr	r2, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fb1b 	bl	8000d38 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001706:	f7ff fb17 	bl	8000d38 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b64      	cmp	r3, #100	; 0x64
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e103      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	4b75      	ldr	r3, [pc, #468]	; (80018f0 <HAL_RCC_OscConfig+0x4c8>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x312>
 800172c:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	e02d      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x334>
 8001742:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a69      	ldr	r2, [pc, #420]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b67      	ldr	r3, [pc, #412]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a66      	ldr	r2, [pc, #408]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	e01c      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x356>
 8001764:	4b61      	ldr	r3, [pc, #388]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a60      	ldr	r2, [pc, #384]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	4b5e      	ldr	r3, [pc, #376]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	4a5d      	ldr	r2, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6213      	str	r3, [r2, #32]
 800177c:	e00b      	b.n	8001796 <HAL_RCC_OscConfig+0x36e>
 800177e:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	4a5a      	ldr	r2, [pc, #360]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6213      	str	r3, [r2, #32]
 800178a:	4b58      	ldr	r3, [pc, #352]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a57      	ldr	r2, [pc, #348]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d015      	beq.n	80017ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff facb 	bl	8000d38 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fac7 	bl	8000d38 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e0b1      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017bc:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0ee      	beq.n	80017a6 <HAL_RCC_OscConfig+0x37e>
 80017c8:	e014      	b.n	80017f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7ff fab5 	bl	8000d38 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	e00a      	b.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff fab1 	bl	8000d38 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e09b      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ee      	bne.n	80017d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d105      	bne.n	8001806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fa:	4b3c      	ldr	r3, [pc, #240]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a3b      	ldr	r2, [pc, #236]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8087 	beq.w	800191e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001810:	4b36      	ldr	r3, [pc, #216]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b08      	cmp	r3, #8
 800181a:	d061      	beq.n	80018e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	2b02      	cmp	r3, #2
 8001822:	d146      	bne.n	80018b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa85 	bl	8000d38 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fa81 	bl	8000d38 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e06d      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001858:	d108      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4921      	ldr	r1, [pc, #132]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a19      	ldr	r1, [r3, #32]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	430b      	orrs	r3, r1
 800187e:	491b      	ldr	r1, [pc, #108]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188a:	f7ff fa55 	bl	8000d38 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001892:	f7ff fa51 	bl	8000d38 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e03d      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x46a>
 80018b0:	e035      	b.n	800191e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fa3e 	bl	8000d38 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fa3a 	bl	8000d38 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e026      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_RCC_OscConfig+0x4c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x498>
 80018de:	e01e      	b.n	800191e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d107      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e019      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40007000 	.word	0x40007000
 80018f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_RCC_OscConfig+0x500>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	429a      	cmp	r2, r3
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0d0      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d910      	bls.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 0207 	bic.w	r2, r3, #7
 8001956:	4965      	ldr	r1, [pc, #404]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0b8      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001988:	4b59      	ldr	r3, [pc, #356]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001992:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019a0:	4b53      	ldr	r3, [pc, #332]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	494d      	ldr	r1, [pc, #308]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e07f      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b41      	ldr	r3, [pc, #260]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e073      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e06b      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4936      	ldr	r1, [pc, #216]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f98c 	bl	8000d38 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff f988 	bl	8000d38 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e053      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d210      	bcs.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 0207 	bic.w	r2, r3, #7
 8001a62:	4922      	ldr	r1, [pc, #136]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e032      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4916      	ldr	r1, [pc, #88]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	490e      	ldr	r1, [pc, #56]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aba:	f000 f821 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <HAL_RCC_ClockConfig+0x1c8>)
 8001acc:	5ccb      	ldrb	r3, [r1, r3]
 8001ace:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_RCC_ClockConfig+0x1d0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff f8ea 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40021000 	.word	0x40021000
 8001af4:	08003ab8 	.word	0x08003ab8
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b490      	push	{r4, r7}
 8001b02:	b08a      	sub	sp, #40	; 0x28
 8001b04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_RCC_GetSysClockFreq+0xac>)
 8001b08:	1d3c      	adds	r4, r7, #4
 8001b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b10:	f240 2301 	movw	r3, #513	; 0x201
 8001b14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x40>
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d003      	beq.n	8001b46 <HAL_RCC_GetSysClockFreq+0x46>
 8001b3e:	e02b      	b.n	8001b98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b42:	623b      	str	r3, [r7, #32]
      break;
 8001b44:	e02b      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3328      	adds	r3, #40	; 0x28
 8001b50:	443b      	add	r3, r7
 8001b52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	0c5b      	lsrs	r3, r3, #17
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	3328      	adds	r3, #40	; 0x28
 8001b6e:	443b      	add	r3, r7
 8001b70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b7a:	fb03 f202 	mul.w	r2, r3, r2
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	e004      	b.n	8001b92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	623b      	str	r3, [r7, #32]
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9a:	623b      	str	r3, [r7, #32]
      break;
 8001b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc90      	pop	{r4, r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	08003aa8 	.word	0x08003aa8
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	003d0900 	.word	0x003d0900

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08003ac8 	.word	0x08003ac8

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	08003ac8 	.word	0x08003ac8

08001c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <RCC_Delay+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <RCC_Delay+0x38>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c3c:	bf00      	nop
  }
  while (Delay --);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <RCC_Delay+0x1c>
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000000 	.word	0x20000000
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e076      	b.n	8001d5c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d108      	bne.n	8001c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c7e:	d009      	beq.n	8001c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
 8001c86:	e005      	b.n	8001c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fea2 	bl	80009f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	ea42 0103 	orr.w	r1, r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	0c1a      	lsrs	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f002 0204 	and.w	r2, r2, #4
 8001d3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	4613      	mov	r3, r2
 8001d72:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d101      	bne.n	8001d86 <HAL_SPI_Transmit+0x22>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e126      	b.n	8001fd4 <HAL_SPI_Transmit+0x270>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d8e:	f7fe ffd3 	bl	8000d38 <HAL_GetTick>
 8001d92:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d002      	beq.n	8001daa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001da8:	e10b      	b.n	8001fc2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HAL_SPI_Transmit+0x52>
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001dba:	e102      	b.n	8001fc2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	88fa      	ldrh	r2, [r7, #6]
 8001dd4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	88fa      	ldrh	r2, [r7, #6]
 8001dda:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e02:	d10f      	bne.n	8001e24 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d007      	beq.n	8001e42 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e4a:	d14b      	bne.n	8001ee4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_SPI_Transmit+0xf6>
 8001e54:	8afb      	ldrh	r3, [r7, #22]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d13e      	bne.n	8001ed8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	1c9a      	adds	r2, r3, #2
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e7e:	e02b      	b.n	8001ed8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d112      	bne.n	8001eb4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	881a      	ldrh	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	1c9a      	adds	r2, r3, #2
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eb2:	e011      	b.n	8001ed8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eb4:	f7fe ff40 	bl	8000d38 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d803      	bhi.n	8001ecc <HAL_SPI_Transmit+0x168>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eca:	d102      	bne.n	8001ed2 <HAL_SPI_Transmit+0x16e>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ed6:	e074      	b.n	8001fc2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1ce      	bne.n	8001e80 <HAL_SPI_Transmit+0x11c>
 8001ee2:	e04c      	b.n	8001f7e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <HAL_SPI_Transmit+0x18e>
 8001eec:	8afb      	ldrh	r3, [r7, #22]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d140      	bne.n	8001f74 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	330c      	adds	r3, #12
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f18:	e02c      	b.n	8001f74 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d113      	bne.n	8001f50 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	330c      	adds	r3, #12
 8001f32:	7812      	ldrb	r2, [r2, #0]
 8001f34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f4e:	e011      	b.n	8001f74 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f50:	f7fe fef2 	bl	8000d38 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d803      	bhi.n	8001f68 <HAL_SPI_Transmit+0x204>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f66:	d102      	bne.n	8001f6e <HAL_SPI_Transmit+0x20a>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f72:	e026      	b.n	8001fc2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1cd      	bne.n	8001f1a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	6839      	ldr	r1, [r7, #0]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 fcbc 	bl	8002900 <SPI_EndRxTxTransaction>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d10a      	bne.n	8001fb2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	77fb      	strb	r3, [r7, #31]
 8001fbe:	e000      	b.n	8001fc2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001fc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ff8:	d112      	bne.n	8002020 <HAL_SPI_Receive+0x44>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10e      	bne.n	8002020 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2204      	movs	r2, #4
 8002006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 f8f1 	bl	80021fe <HAL_SPI_TransmitReceive>
 800201c:	4603      	mov	r3, r0
 800201e:	e0ea      	b.n	80021f6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_SPI_Receive+0x52>
 800202a:	2302      	movs	r3, #2
 800202c:	e0e3      	b.n	80021f6 <HAL_SPI_Receive+0x21a>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002036:	f7fe fe7f 	bl	8000d38 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b01      	cmp	r3, #1
 8002046:	d002      	beq.n	800204e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002048:	2302      	movs	r3, #2
 800204a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800204c:	e0ca      	b.n	80021e4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_SPI_Receive+0x7e>
 8002054:	88fb      	ldrh	r3, [r7, #6]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d102      	bne.n	8002060 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800205e:	e0c1      	b.n	80021e4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2204      	movs	r2, #4
 8002064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2200      	movs	r2, #0
 800206c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	88fa      	ldrh	r2, [r7, #6]
 8002078:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a6:	d10f      	bne.n	80020c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b40      	cmp	r3, #64	; 0x40
 80020d4:	d007      	beq.n	80020e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d162      	bne.n	80021b4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80020ee:	e02e      	b.n	800214e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d115      	bne.n	800212a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f103 020c 	add.w	r2, r3, #12
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002128:	e011      	b.n	800214e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800212a:	f7fe fe05 	bl	8000d38 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d803      	bhi.n	8002142 <HAL_SPI_Receive+0x166>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d102      	bne.n	8002148 <HAL_SPI_Receive+0x16c>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800214c:	e04a      	b.n	80021e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002152:	b29b      	uxth	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1cb      	bne.n	80020f0 <HAL_SPI_Receive+0x114>
 8002158:	e031      	b.n	80021be <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b01      	cmp	r3, #1
 8002166:	d113      	bne.n	8002190 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002172:	b292      	uxth	r2, r2
 8002174:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	1c9a      	adds	r2, r3, #2
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800218e:	e011      	b.n	80021b4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002190:	f7fe fdd2 	bl	8000d38 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d803      	bhi.n	80021a8 <HAL_SPI_Receive+0x1cc>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a6:	d102      	bne.n	80021ae <HAL_SPI_Receive+0x1d2>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021b2:	e017      	b.n	80021e4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1cd      	bne.n	800215a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	6839      	ldr	r1, [r7, #0]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fb4a 	bl	800285c <SPI_EndRxTransaction>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	75fb      	strb	r3, [r7, #23]
 80021e0:	e000      	b.n	80021e4 <HAL_SPI_Receive+0x208>
  }

error :
 80021e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80021f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b08c      	sub	sp, #48	; 0x30
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800220c:	2301      	movs	r3, #1
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x26>
 8002220:	2302      	movs	r3, #2
 8002222:	e18a      	b.n	800253a <HAL_SPI_TransmitReceive+0x33c>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800222c:	f7fe fd84 	bl	8000d38 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002246:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800224a:	2b01      	cmp	r3, #1
 800224c:	d00f      	beq.n	800226e <HAL_SPI_TransmitReceive+0x70>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002254:	d107      	bne.n	8002266 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d103      	bne.n	8002266 <HAL_SPI_TransmitReceive+0x68>
 800225e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002262:	2b04      	cmp	r3, #4
 8002264:	d003      	beq.n	800226e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002266:	2302      	movs	r3, #2
 8002268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800226c:	e15b      	b.n	8002526 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x82>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x82>
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d103      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002286:	e14e      	b.n	8002526 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b04      	cmp	r3, #4
 8002292:	d003      	beq.n	800229c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2205      	movs	r2, #5
 8002298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	887a      	ldrh	r2, [r7, #2]
 80022b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	887a      	ldrh	r2, [r7, #2]
 80022be:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	887a      	ldrh	r2, [r7, #2]
 80022c4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d007      	beq.n	80022f0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022f8:	d178      	bne.n	80023ec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x10a>
 8002302:	8b7b      	ldrh	r3, [r7, #26]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d166      	bne.n	80023d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	881a      	ldrh	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	1c9a      	adds	r2, r3, #2
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800232c:	e053      	b.n	80023d6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d11b      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x176>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002340:	b29b      	uxth	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d016      	beq.n	8002374 <HAL_SPI_TransmitReceive+0x176>
 8002346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d113      	bne.n	8002374 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	881a      	ldrh	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	1c9a      	adds	r2, r3, #2
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002366:	b29b      	uxth	r3, r3
 8002368:	3b01      	subs	r3, #1
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d119      	bne.n	80023b6 <HAL_SPI_TransmitReceive+0x1b8>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002386:	b29b      	uxth	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d014      	beq.n	80023b6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	b292      	uxth	r2, r2
 8002398:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	1c9a      	adds	r2, r3, #2
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023b2:	2301      	movs	r3, #1
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023b6:	f7fe fcbf 	bl	8000d38 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d807      	bhi.n	80023d6 <HAL_SPI_TransmitReceive+0x1d8>
 80023c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d003      	beq.n	80023d6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023d4:	e0a7      	b.n	8002526 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1a6      	bne.n	800232e <HAL_SPI_TransmitReceive+0x130>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1a1      	bne.n	800232e <HAL_SPI_TransmitReceive+0x130>
 80023ea:	e07c      	b.n	80024e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x1fc>
 80023f4:	8b7b      	ldrh	r3, [r7, #26]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d16b      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	330c      	adds	r3, #12
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002420:	e057      	b.n	80024d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b02      	cmp	r3, #2
 800242e:	d11c      	bne.n	800246a <HAL_SPI_TransmitReceive+0x26c>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d017      	beq.n	800246a <HAL_SPI_TransmitReceive+0x26c>
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d114      	bne.n	800246a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	7812      	ldrb	r2, [r2, #0]
 800244c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002466:	2300      	movs	r3, #0
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b01      	cmp	r3, #1
 8002476:	d119      	bne.n	80024ac <HAL_SPI_TransmitReceive+0x2ae>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247c:	b29b      	uxth	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d014      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024ac:	f7fe fc44 	bl	8000d38 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d803      	bhi.n	80024c4 <HAL_SPI_TransmitReceive+0x2c6>
 80024bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c2:	d102      	bne.n	80024ca <HAL_SPI_TransmitReceive+0x2cc>
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024d0:	e029      	b.n	8002526 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1a2      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x224>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d19d      	bne.n	8002422 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa08 	bl	8002900 <SPI_EndRxTxTransaction>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002502:	e010      	b.n	8002526 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10b      	bne.n	8002524 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	e000      	b.n	8002526 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002524:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002536:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800253a:	4618      	mov	r0, r3
 800253c:	3730      	adds	r7, #48	; 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10f      	bne.n	8002588 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00a      	beq.n	8002588 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4798      	blx	r3
    return;
 8002586:	e0be      	b.n	8002706 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00a      	beq.n	80025aa <HAL_SPI_IRQHandler+0x66>
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	09db      	lsrs	r3, r3, #7
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
    return;
 80025a8:	e0ad      	b.n	8002706 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_SPI_IRQHandler+0x80>
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80a1 	beq.w	8002706 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 809a 	beq.w	8002706 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d023      	beq.n	8002626 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d011      	beq.n	800260e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	e00b      	b.n	8002626 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	693b      	ldr	r3, [r7, #16]
        return;
 8002624:	e06f      	b.n	8002706 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d014      	beq.n	800265c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	2b00      	cmp	r3, #0
 8002662:	d04f      	beq.n	8002704 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002672:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <HAL_SPI_IRQHandler+0x14c>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d034      	beq.n	80026fa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0203 	bic.w	r2, r2, #3
 800269e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d011      	beq.n	80026cc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_SPI_IRQHandler+0x1c8>)
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fc7b 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d016      	beq.n	8002702 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	4a0c      	ldr	r2, [pc, #48]	; (800270c <HAL_SPI_IRQHandler+0x1c8>)
 80026da:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe fc65 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80026f8:	e003      	b.n	8002702 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 f808 	bl	8002710 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002700:	e000      	b.n	8002704 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002702:	bf00      	nop
    return;
 8002704:	bf00      	nop
  }
}
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	08002723 	.word	0x08002723

08002710 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr

08002722 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f7ff ffe7 	bl	8002710 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800275c:	f7fe faec 	bl	8000d38 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4413      	add	r3, r2
 800276a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800276c:	f7fe fae4 	bl	8000d38 <HAL_GetTick>
 8002770:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002772:	4b39      	ldr	r3, [pc, #228]	; (8002858 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	015b      	lsls	r3, r3, #5
 8002778:	0d1b      	lsrs	r3, r3, #20
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	fb02 f303 	mul.w	r3, r2, r3
 8002780:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002782:	e054      	b.n	800282e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278a:	d050      	beq.n	800282e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800278c:	f7fe fad4 	bl	8000d38 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	429a      	cmp	r2, r3
 800279a:	d902      	bls.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d13d      	bne.n	800281e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ba:	d111      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027c4:	d004      	beq.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ce:	d107      	bne.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027e8:	d10f      	bne.n	800280a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002808:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e017      	b.n	800284e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	3b01      	subs	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	429a      	cmp	r2, r3
 800284a:	d19b      	bne.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000

0800285c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002870:	d111      	bne.n	8002896 <SPI_EndRxTransaction+0x3a>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287a:	d004      	beq.n	8002886 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002884:	d107      	bne.n	8002896 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002894:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800289e:	d117      	bne.n	80028d0 <SPI_EndRxTransaction+0x74>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a8:	d112      	bne.n	80028d0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2200      	movs	r2, #0
 80028b2:	2101      	movs	r1, #1
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff ff49 	bl	800274c <SPI_WaitFlagStateUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01a      	beq.n	80028f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e013      	b.n	80028f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff ff36 	bl	800274c <SPI_WaitFlagStateUntilTimeout>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e000      	b.n	80028f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff ff18 	bl	800274c <SPI_WaitFlagStateUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e000      	b.n	8002934 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e03f      	b.n	80029ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe f89a 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800297e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fb39 	bl	8002ff8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002994:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af02      	add	r7, sp, #8
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	60b9      	str	r1, [r7, #8]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b20      	cmp	r3, #32
 80029f4:	d17c      	bne.n	8002af0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x2c>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e075      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x3e>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e06e      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2221      	movs	r2, #33	; 0x21
 8002a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe f985 	bl	8000d38 <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d108      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d104      	bne.n	8002a58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e003      	b.n	8002a60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002a68:	e02a      	b.n	8002ac0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2200      	movs	r2, #0
 8002a72:	2180      	movs	r1, #128	; 0x80
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 f95c 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e036      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	61bb      	str	r3, [r7, #24]
 8002aa0:	e007      	b.n	8002ab2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1cf      	bne.n	8002a6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 f92c 	bl	8002d32 <UART_WaitOnFlagUntilTimeout>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e006      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10d      	bne.n	8002b4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_UART_IRQHandler+0x52>
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f9d5 	bl	8002ef6 <UART_Receive_IT>
      return;
 8002b4c:	e0d0      	b.n	8002cf0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80b0 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x1ba>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_UART_IRQHandler+0x70>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80a5 	beq.w	8002cb6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_UART_IRQHandler+0x90>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_UART_IRQHandler+0xb0>
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba4:	f043 0202 	orr.w	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_UART_IRQHandler+0xd0>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	f043 0204 	orr.w	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00f      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xfa>
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_UART_IRQHandler+0xee>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d005      	beq.n	8002bf6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	f043 0208 	orr.w	r2, r3, #8
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d077      	beq.n	8002cee <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_UART_IRQHandler+0x11c>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f96f 	bl	8002ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_UART_IRQHandler+0x144>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d031      	beq.n	8002ca4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8c0 	bl	8002dc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d023      	beq.n	8002c9c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c62:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c70:	4a21      	ldr	r2, [pc, #132]	; (8002cf8 <HAL_UART_IRQHandler+0x1fc>)
 8002c72:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe f999 	bl	8000fb0 <HAL_DMA_Abort_IT>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d016      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c92:	e00e      	b.n	8002cb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f843 	bl	8002d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f83f 	bl	8002d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca2:	e006      	b.n	8002cb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f83b 	bl	8002d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cb0:	e01d      	b.n	8002cee <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb2:	bf00      	nop
    return;
 8002cb4:	e01b      	b.n	8002cee <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x1d6>
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8ac 	bl	8002e28 <UART_Transmit_IT>
    return;
 8002cd0:	e00e      	b.n	8002cf0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d009      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x1f4>
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f8ed 	bl	8002ec6 <UART_EndTransmit_IT>
    return;
 8002cec:	e000      	b.n	8002cf0 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002cee:	bf00      	nop
  }
}
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	08002e01 	.word	0x08002e01

08002cfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d42:	e02c      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d028      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d007      	beq.n	8002d62 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d52:	f7fd fff1 	bl	8000d38 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d21d      	bcs.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695a      	ldr	r2, [r3, #20]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2220      	movs	r2, #32
 8002d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e00f      	b.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4013      	ands	r3, r2
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d0c3      	beq.n	8002d44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ddc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff ff80 	bl	8002d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b21      	cmp	r3, #33	; 0x21
 8002e3a:	d13e      	bne.n	8002eba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e44:	d114      	bne.n	8002e70 <UART_Transmit_IT+0x48>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d110      	bne.n	8002e70 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	621a      	str	r2, [r3, #32]
 8002e6e:	e008      	b.n	8002e82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	1c59      	adds	r1, r3, #1
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6211      	str	r1, [r2, #32]
 8002e7a:	781a      	ldrb	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4619      	mov	r1, r3
 8002e90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2302      	movs	r3, #2
  }
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7ff ff08 	bl	8002cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b22      	cmp	r3, #34	; 0x22
 8002f08:	d170      	bne.n	8002fec <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f12:	d117      	bne.n	8002f44 <UART_Receive_IT+0x4e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d113      	bne.n	8002f44 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
 8002f42:	e026      	b.n	8002f92 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f56:	d007      	beq.n	8002f68 <UART_Receive_IT+0x72>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <UART_Receive_IT+0x80>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	701a      	strb	r2, [r3, #0]
 8002f74:	e008      	b.n	8002f88 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d120      	bne.n	8002fe8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0220 	bic.w	r2, r2, #32
 8002fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fe95 	bl	8002d0e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e002      	b.n	8002fee <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003032:	f023 030c 	bic.w	r3, r3, #12
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6812      	ldr	r2, [r2, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	430b      	orrs	r3, r1
 800303e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <UART_SetConfig+0x114>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d103      	bne.n	8003068 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003060:	f7fe fdca 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	e002      	b.n	800306e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7fe fdb2 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 800306c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	009a      	lsls	r2, r3, #2
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	4a22      	ldr	r2, [pc, #136]	; (8003110 <UART_SetConfig+0x118>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	0119      	lsls	r1, r3, #4
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009a      	lsls	r2, r3, #2
 8003098:	441a      	add	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <UART_SetConfig+0x118>)
 80030a6:	fba3 0302 	umull	r0, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2064      	movs	r0, #100	; 0x64
 80030ae:	fb00 f303 	mul.w	r3, r0, r3
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	3332      	adds	r3, #50	; 0x32
 80030b8:	4a15      	ldr	r2, [pc, #84]	; (8003110 <UART_SetConfig+0x118>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c4:	4419      	add	r1, r3
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009a      	lsls	r2, r3, #2
 80030d0:	441a      	add	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <UART_SetConfig+0x118>)
 80030de:	fba3 0302 	umull	r0, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2064      	movs	r0, #100	; 0x64
 80030e6:	fb00 f303 	mul.w	r3, r0, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	3332      	adds	r3, #50	; 0x32
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <UART_SetConfig+0x118>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	440a      	add	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003104:	bf00      	nop
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40013800 	.word	0x40013800
 8003110:	51eb851f 	.word	0x51eb851f

08003114 <__errno>:
 8003114:	4b01      	ldr	r3, [pc, #4]	; (800311c <__errno+0x8>)
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c

08003120 <__libc_init_array>:
 8003120:	b570      	push	{r4, r5, r6, lr}
 8003122:	2600      	movs	r6, #0
 8003124:	4d0c      	ldr	r5, [pc, #48]	; (8003158 <__libc_init_array+0x38>)
 8003126:	4c0d      	ldr	r4, [pc, #52]	; (800315c <__libc_init_array+0x3c>)
 8003128:	1b64      	subs	r4, r4, r5
 800312a:	10a4      	asrs	r4, r4, #2
 800312c:	42a6      	cmp	r6, r4
 800312e:	d109      	bne.n	8003144 <__libc_init_array+0x24>
 8003130:	f000 fc9c 	bl	8003a6c <_init>
 8003134:	2600      	movs	r6, #0
 8003136:	4d0a      	ldr	r5, [pc, #40]	; (8003160 <__libc_init_array+0x40>)
 8003138:	4c0a      	ldr	r4, [pc, #40]	; (8003164 <__libc_init_array+0x44>)
 800313a:	1b64      	subs	r4, r4, r5
 800313c:	10a4      	asrs	r4, r4, #2
 800313e:	42a6      	cmp	r6, r4
 8003140:	d105      	bne.n	800314e <__libc_init_array+0x2e>
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	f855 3b04 	ldr.w	r3, [r5], #4
 8003148:	4798      	blx	r3
 800314a:	3601      	adds	r6, #1
 800314c:	e7ee      	b.n	800312c <__libc_init_array+0xc>
 800314e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003152:	4798      	blx	r3
 8003154:	3601      	adds	r6, #1
 8003156:	e7f2      	b.n	800313e <__libc_init_array+0x1e>
 8003158:	08003b04 	.word	0x08003b04
 800315c:	08003b04 	.word	0x08003b04
 8003160:	08003b04 	.word	0x08003b04
 8003164:	08003b08 	.word	0x08003b08

08003168 <memset>:
 8003168:	4603      	mov	r3, r0
 800316a:	4402      	add	r2, r0
 800316c:	4293      	cmp	r3, r2
 800316e:	d100      	bne.n	8003172 <memset+0xa>
 8003170:	4770      	bx	lr
 8003172:	f803 1b01 	strb.w	r1, [r3], #1
 8003176:	e7f9      	b.n	800316c <memset+0x4>

08003178 <siprintf>:
 8003178:	b40e      	push	{r1, r2, r3}
 800317a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800317e:	b500      	push	{lr}
 8003180:	b09c      	sub	sp, #112	; 0x70
 8003182:	ab1d      	add	r3, sp, #116	; 0x74
 8003184:	9002      	str	r0, [sp, #8]
 8003186:	9006      	str	r0, [sp, #24]
 8003188:	9107      	str	r1, [sp, #28]
 800318a:	9104      	str	r1, [sp, #16]
 800318c:	4808      	ldr	r0, [pc, #32]	; (80031b0 <siprintf+0x38>)
 800318e:	4909      	ldr	r1, [pc, #36]	; (80031b4 <siprintf+0x3c>)
 8003190:	f853 2b04 	ldr.w	r2, [r3], #4
 8003194:	9105      	str	r1, [sp, #20]
 8003196:	6800      	ldr	r0, [r0, #0]
 8003198:	a902      	add	r1, sp, #8
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	f000 f868 	bl	8003270 <_svfiprintf_r>
 80031a0:	2200      	movs	r2, #0
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	b01c      	add	sp, #112	; 0x70
 80031a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80031ac:	b003      	add	sp, #12
 80031ae:	4770      	bx	lr
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	ffff0208 	.word	0xffff0208

080031b8 <__ssputs_r>:
 80031b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031bc:	688e      	ldr	r6, [r1, #8]
 80031be:	4682      	mov	sl, r0
 80031c0:	429e      	cmp	r6, r3
 80031c2:	460c      	mov	r4, r1
 80031c4:	4690      	mov	r8, r2
 80031c6:	461f      	mov	r7, r3
 80031c8:	d838      	bhi.n	800323c <__ssputs_r+0x84>
 80031ca:	898a      	ldrh	r2, [r1, #12]
 80031cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80031d0:	d032      	beq.n	8003238 <__ssputs_r+0x80>
 80031d2:	6825      	ldr	r5, [r4, #0]
 80031d4:	6909      	ldr	r1, [r1, #16]
 80031d6:	3301      	adds	r3, #1
 80031d8:	eba5 0901 	sub.w	r9, r5, r1
 80031dc:	6965      	ldr	r5, [r4, #20]
 80031de:	444b      	add	r3, r9
 80031e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031e8:	106d      	asrs	r5, r5, #1
 80031ea:	429d      	cmp	r5, r3
 80031ec:	bf38      	it	cc
 80031ee:	461d      	movcc	r5, r3
 80031f0:	0553      	lsls	r3, r2, #21
 80031f2:	d531      	bpl.n	8003258 <__ssputs_r+0xa0>
 80031f4:	4629      	mov	r1, r5
 80031f6:	f000 fb6f 	bl	80038d8 <_malloc_r>
 80031fa:	4606      	mov	r6, r0
 80031fc:	b950      	cbnz	r0, 8003214 <__ssputs_r+0x5c>
 80031fe:	230c      	movs	r3, #12
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	f8ca 3000 	str.w	r3, [sl]
 8003208:	89a3      	ldrh	r3, [r4, #12]
 800320a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320e:	81a3      	strh	r3, [r4, #12]
 8003210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003214:	464a      	mov	r2, r9
 8003216:	6921      	ldr	r1, [r4, #16]
 8003218:	f000 face 	bl	80037b8 <memcpy>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	6126      	str	r6, [r4, #16]
 800322a:	444e      	add	r6, r9
 800322c:	6026      	str	r6, [r4, #0]
 800322e:	463e      	mov	r6, r7
 8003230:	6165      	str	r5, [r4, #20]
 8003232:	eba5 0509 	sub.w	r5, r5, r9
 8003236:	60a5      	str	r5, [r4, #8]
 8003238:	42be      	cmp	r6, r7
 800323a:	d900      	bls.n	800323e <__ssputs_r+0x86>
 800323c:	463e      	mov	r6, r7
 800323e:	4632      	mov	r2, r6
 8003240:	4641      	mov	r1, r8
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	f000 fac6 	bl	80037d4 <memmove>
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	2000      	movs	r0, #0
 800324c:	1b9b      	subs	r3, r3, r6
 800324e:	60a3      	str	r3, [r4, #8]
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	4433      	add	r3, r6
 8003254:	6023      	str	r3, [r4, #0]
 8003256:	e7db      	b.n	8003210 <__ssputs_r+0x58>
 8003258:	462a      	mov	r2, r5
 800325a:	f000 fbb1 	bl	80039c0 <_realloc_r>
 800325e:	4606      	mov	r6, r0
 8003260:	2800      	cmp	r0, #0
 8003262:	d1e1      	bne.n	8003228 <__ssputs_r+0x70>
 8003264:	4650      	mov	r0, sl
 8003266:	6921      	ldr	r1, [r4, #16]
 8003268:	f000 face 	bl	8003808 <_free_r>
 800326c:	e7c7      	b.n	80031fe <__ssputs_r+0x46>
	...

08003270 <_svfiprintf_r>:
 8003270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003274:	4698      	mov	r8, r3
 8003276:	898b      	ldrh	r3, [r1, #12]
 8003278:	4607      	mov	r7, r0
 800327a:	061b      	lsls	r3, r3, #24
 800327c:	460d      	mov	r5, r1
 800327e:	4614      	mov	r4, r2
 8003280:	b09d      	sub	sp, #116	; 0x74
 8003282:	d50e      	bpl.n	80032a2 <_svfiprintf_r+0x32>
 8003284:	690b      	ldr	r3, [r1, #16]
 8003286:	b963      	cbnz	r3, 80032a2 <_svfiprintf_r+0x32>
 8003288:	2140      	movs	r1, #64	; 0x40
 800328a:	f000 fb25 	bl	80038d8 <_malloc_r>
 800328e:	6028      	str	r0, [r5, #0]
 8003290:	6128      	str	r0, [r5, #16]
 8003292:	b920      	cbnz	r0, 800329e <_svfiprintf_r+0x2e>
 8003294:	230c      	movs	r3, #12
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	f04f 30ff 	mov.w	r0, #4294967295
 800329c:	e0d1      	b.n	8003442 <_svfiprintf_r+0x1d2>
 800329e:	2340      	movs	r3, #64	; 0x40
 80032a0:	616b      	str	r3, [r5, #20]
 80032a2:	2300      	movs	r3, #0
 80032a4:	9309      	str	r3, [sp, #36]	; 0x24
 80032a6:	2320      	movs	r3, #32
 80032a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ac:	2330      	movs	r3, #48	; 0x30
 80032ae:	f04f 0901 	mov.w	r9, #1
 80032b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80032b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800345c <_svfiprintf_r+0x1ec>
 80032ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032be:	4623      	mov	r3, r4
 80032c0:	469a      	mov	sl, r3
 80032c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032c6:	b10a      	cbz	r2, 80032cc <_svfiprintf_r+0x5c>
 80032c8:	2a25      	cmp	r2, #37	; 0x25
 80032ca:	d1f9      	bne.n	80032c0 <_svfiprintf_r+0x50>
 80032cc:	ebba 0b04 	subs.w	fp, sl, r4
 80032d0:	d00b      	beq.n	80032ea <_svfiprintf_r+0x7a>
 80032d2:	465b      	mov	r3, fp
 80032d4:	4622      	mov	r2, r4
 80032d6:	4629      	mov	r1, r5
 80032d8:	4638      	mov	r0, r7
 80032da:	f7ff ff6d 	bl	80031b8 <__ssputs_r>
 80032de:	3001      	adds	r0, #1
 80032e0:	f000 80aa 	beq.w	8003438 <_svfiprintf_r+0x1c8>
 80032e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032e6:	445a      	add	r2, fp
 80032e8:	9209      	str	r2, [sp, #36]	; 0x24
 80032ea:	f89a 3000 	ldrb.w	r3, [sl]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80a2 	beq.w	8003438 <_svfiprintf_r+0x1c8>
 80032f4:	2300      	movs	r3, #0
 80032f6:	f04f 32ff 	mov.w	r2, #4294967295
 80032fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032fe:	f10a 0a01 	add.w	sl, sl, #1
 8003302:	9304      	str	r3, [sp, #16]
 8003304:	9307      	str	r3, [sp, #28]
 8003306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800330a:	931a      	str	r3, [sp, #104]	; 0x68
 800330c:	4654      	mov	r4, sl
 800330e:	2205      	movs	r2, #5
 8003310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003314:	4851      	ldr	r0, [pc, #324]	; (800345c <_svfiprintf_r+0x1ec>)
 8003316:	f000 fa41 	bl	800379c <memchr>
 800331a:	9a04      	ldr	r2, [sp, #16]
 800331c:	b9d8      	cbnz	r0, 8003356 <_svfiprintf_r+0xe6>
 800331e:	06d0      	lsls	r0, r2, #27
 8003320:	bf44      	itt	mi
 8003322:	2320      	movmi	r3, #32
 8003324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003328:	0711      	lsls	r1, r2, #28
 800332a:	bf44      	itt	mi
 800332c:	232b      	movmi	r3, #43	; 0x2b
 800332e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003332:	f89a 3000 	ldrb.w	r3, [sl]
 8003336:	2b2a      	cmp	r3, #42	; 0x2a
 8003338:	d015      	beq.n	8003366 <_svfiprintf_r+0xf6>
 800333a:	4654      	mov	r4, sl
 800333c:	2000      	movs	r0, #0
 800333e:	f04f 0c0a 	mov.w	ip, #10
 8003342:	9a07      	ldr	r2, [sp, #28]
 8003344:	4621      	mov	r1, r4
 8003346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800334a:	3b30      	subs	r3, #48	; 0x30
 800334c:	2b09      	cmp	r3, #9
 800334e:	d94e      	bls.n	80033ee <_svfiprintf_r+0x17e>
 8003350:	b1b0      	cbz	r0, 8003380 <_svfiprintf_r+0x110>
 8003352:	9207      	str	r2, [sp, #28]
 8003354:	e014      	b.n	8003380 <_svfiprintf_r+0x110>
 8003356:	eba0 0308 	sub.w	r3, r0, r8
 800335a:	fa09 f303 	lsl.w	r3, r9, r3
 800335e:	4313      	orrs	r3, r2
 8003360:	46a2      	mov	sl, r4
 8003362:	9304      	str	r3, [sp, #16]
 8003364:	e7d2      	b.n	800330c <_svfiprintf_r+0x9c>
 8003366:	9b03      	ldr	r3, [sp, #12]
 8003368:	1d19      	adds	r1, r3, #4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	9103      	str	r1, [sp, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfbb      	ittet	lt
 8003372:	425b      	neglt	r3, r3
 8003374:	f042 0202 	orrlt.w	r2, r2, #2
 8003378:	9307      	strge	r3, [sp, #28]
 800337a:	9307      	strlt	r3, [sp, #28]
 800337c:	bfb8      	it	lt
 800337e:	9204      	strlt	r2, [sp, #16]
 8003380:	7823      	ldrb	r3, [r4, #0]
 8003382:	2b2e      	cmp	r3, #46	; 0x2e
 8003384:	d10c      	bne.n	80033a0 <_svfiprintf_r+0x130>
 8003386:	7863      	ldrb	r3, [r4, #1]
 8003388:	2b2a      	cmp	r3, #42	; 0x2a
 800338a:	d135      	bne.n	80033f8 <_svfiprintf_r+0x188>
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	3402      	adds	r4, #2
 8003390:	1d1a      	adds	r2, r3, #4
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	9203      	str	r2, [sp, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	bfb8      	it	lt
 800339a:	f04f 33ff 	movlt.w	r3, #4294967295
 800339e:	9305      	str	r3, [sp, #20]
 80033a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003460 <_svfiprintf_r+0x1f0>
 80033a4:	2203      	movs	r2, #3
 80033a6:	4650      	mov	r0, sl
 80033a8:	7821      	ldrb	r1, [r4, #0]
 80033aa:	f000 f9f7 	bl	800379c <memchr>
 80033ae:	b140      	cbz	r0, 80033c2 <_svfiprintf_r+0x152>
 80033b0:	2340      	movs	r3, #64	; 0x40
 80033b2:	eba0 000a 	sub.w	r0, r0, sl
 80033b6:	fa03 f000 	lsl.w	r0, r3, r0
 80033ba:	9b04      	ldr	r3, [sp, #16]
 80033bc:	3401      	adds	r4, #1
 80033be:	4303      	orrs	r3, r0
 80033c0:	9304      	str	r3, [sp, #16]
 80033c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c6:	2206      	movs	r2, #6
 80033c8:	4826      	ldr	r0, [pc, #152]	; (8003464 <_svfiprintf_r+0x1f4>)
 80033ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033ce:	f000 f9e5 	bl	800379c <memchr>
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d038      	beq.n	8003448 <_svfiprintf_r+0x1d8>
 80033d6:	4b24      	ldr	r3, [pc, #144]	; (8003468 <_svfiprintf_r+0x1f8>)
 80033d8:	bb1b      	cbnz	r3, 8003422 <_svfiprintf_r+0x1b2>
 80033da:	9b03      	ldr	r3, [sp, #12]
 80033dc:	3307      	adds	r3, #7
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	3308      	adds	r3, #8
 80033e4:	9303      	str	r3, [sp, #12]
 80033e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033e8:	4433      	add	r3, r6
 80033ea:	9309      	str	r3, [sp, #36]	; 0x24
 80033ec:	e767      	b.n	80032be <_svfiprintf_r+0x4e>
 80033ee:	460c      	mov	r4, r1
 80033f0:	2001      	movs	r0, #1
 80033f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80033f6:	e7a5      	b.n	8003344 <_svfiprintf_r+0xd4>
 80033f8:	2300      	movs	r3, #0
 80033fa:	f04f 0c0a 	mov.w	ip, #10
 80033fe:	4619      	mov	r1, r3
 8003400:	3401      	adds	r4, #1
 8003402:	9305      	str	r3, [sp, #20]
 8003404:	4620      	mov	r0, r4
 8003406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800340a:	3a30      	subs	r2, #48	; 0x30
 800340c:	2a09      	cmp	r2, #9
 800340e:	d903      	bls.n	8003418 <_svfiprintf_r+0x1a8>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0c5      	beq.n	80033a0 <_svfiprintf_r+0x130>
 8003414:	9105      	str	r1, [sp, #20]
 8003416:	e7c3      	b.n	80033a0 <_svfiprintf_r+0x130>
 8003418:	4604      	mov	r4, r0
 800341a:	2301      	movs	r3, #1
 800341c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003420:	e7f0      	b.n	8003404 <_svfiprintf_r+0x194>
 8003422:	ab03      	add	r3, sp, #12
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	462a      	mov	r2, r5
 8003428:	4638      	mov	r0, r7
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <_svfiprintf_r+0x1fc>)
 800342c:	a904      	add	r1, sp, #16
 800342e:	f3af 8000 	nop.w
 8003432:	1c42      	adds	r2, r0, #1
 8003434:	4606      	mov	r6, r0
 8003436:	d1d6      	bne.n	80033e6 <_svfiprintf_r+0x176>
 8003438:	89ab      	ldrh	r3, [r5, #12]
 800343a:	065b      	lsls	r3, r3, #25
 800343c:	f53f af2c 	bmi.w	8003298 <_svfiprintf_r+0x28>
 8003440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003442:	b01d      	add	sp, #116	; 0x74
 8003444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003448:	ab03      	add	r3, sp, #12
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	462a      	mov	r2, r5
 800344e:	4638      	mov	r0, r7
 8003450:	4b06      	ldr	r3, [pc, #24]	; (800346c <_svfiprintf_r+0x1fc>)
 8003452:	a904      	add	r1, sp, #16
 8003454:	f000 f87c 	bl	8003550 <_printf_i>
 8003458:	e7eb      	b.n	8003432 <_svfiprintf_r+0x1c2>
 800345a:	bf00      	nop
 800345c:	08003ad0 	.word	0x08003ad0
 8003460:	08003ad6 	.word	0x08003ad6
 8003464:	08003ada 	.word	0x08003ada
 8003468:	00000000 	.word	0x00000000
 800346c:	080031b9 	.word	0x080031b9

08003470 <_printf_common>:
 8003470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003474:	4616      	mov	r6, r2
 8003476:	4699      	mov	r9, r3
 8003478:	688a      	ldr	r2, [r1, #8]
 800347a:	690b      	ldr	r3, [r1, #16]
 800347c:	4607      	mov	r7, r0
 800347e:	4293      	cmp	r3, r2
 8003480:	bfb8      	it	lt
 8003482:	4613      	movlt	r3, r2
 8003484:	6033      	str	r3, [r6, #0]
 8003486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800348a:	460c      	mov	r4, r1
 800348c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003490:	b10a      	cbz	r2, 8003496 <_printf_common+0x26>
 8003492:	3301      	adds	r3, #1
 8003494:	6033      	str	r3, [r6, #0]
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	0699      	lsls	r1, r3, #26
 800349a:	bf42      	ittt	mi
 800349c:	6833      	ldrmi	r3, [r6, #0]
 800349e:	3302      	addmi	r3, #2
 80034a0:	6033      	strmi	r3, [r6, #0]
 80034a2:	6825      	ldr	r5, [r4, #0]
 80034a4:	f015 0506 	ands.w	r5, r5, #6
 80034a8:	d106      	bne.n	80034b8 <_printf_common+0x48>
 80034aa:	f104 0a19 	add.w	sl, r4, #25
 80034ae:	68e3      	ldr	r3, [r4, #12]
 80034b0:	6832      	ldr	r2, [r6, #0]
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	42ab      	cmp	r3, r5
 80034b6:	dc28      	bgt.n	800350a <_printf_common+0x9a>
 80034b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80034bc:	1e13      	subs	r3, r2, #0
 80034be:	6822      	ldr	r2, [r4, #0]
 80034c0:	bf18      	it	ne
 80034c2:	2301      	movne	r3, #1
 80034c4:	0692      	lsls	r2, r2, #26
 80034c6:	d42d      	bmi.n	8003524 <_printf_common+0xb4>
 80034c8:	4649      	mov	r1, r9
 80034ca:	4638      	mov	r0, r7
 80034cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034d0:	47c0      	blx	r8
 80034d2:	3001      	adds	r0, #1
 80034d4:	d020      	beq.n	8003518 <_printf_common+0xa8>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	68e5      	ldr	r5, [r4, #12]
 80034da:	f003 0306 	and.w	r3, r3, #6
 80034de:	2b04      	cmp	r3, #4
 80034e0:	bf18      	it	ne
 80034e2:	2500      	movne	r5, #0
 80034e4:	6832      	ldr	r2, [r6, #0]
 80034e6:	f04f 0600 	mov.w	r6, #0
 80034ea:	68a3      	ldr	r3, [r4, #8]
 80034ec:	bf08      	it	eq
 80034ee:	1aad      	subeq	r5, r5, r2
 80034f0:	6922      	ldr	r2, [r4, #16]
 80034f2:	bf08      	it	eq
 80034f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034f8:	4293      	cmp	r3, r2
 80034fa:	bfc4      	itt	gt
 80034fc:	1a9b      	subgt	r3, r3, r2
 80034fe:	18ed      	addgt	r5, r5, r3
 8003500:	341a      	adds	r4, #26
 8003502:	42b5      	cmp	r5, r6
 8003504:	d11a      	bne.n	800353c <_printf_common+0xcc>
 8003506:	2000      	movs	r0, #0
 8003508:	e008      	b.n	800351c <_printf_common+0xac>
 800350a:	2301      	movs	r3, #1
 800350c:	4652      	mov	r2, sl
 800350e:	4649      	mov	r1, r9
 8003510:	4638      	mov	r0, r7
 8003512:	47c0      	blx	r8
 8003514:	3001      	adds	r0, #1
 8003516:	d103      	bne.n	8003520 <_printf_common+0xb0>
 8003518:	f04f 30ff 	mov.w	r0, #4294967295
 800351c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003520:	3501      	adds	r5, #1
 8003522:	e7c4      	b.n	80034ae <_printf_common+0x3e>
 8003524:	2030      	movs	r0, #48	; 0x30
 8003526:	18e1      	adds	r1, r4, r3
 8003528:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003532:	4422      	add	r2, r4
 8003534:	3302      	adds	r3, #2
 8003536:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800353a:	e7c5      	b.n	80034c8 <_printf_common+0x58>
 800353c:	2301      	movs	r3, #1
 800353e:	4622      	mov	r2, r4
 8003540:	4649      	mov	r1, r9
 8003542:	4638      	mov	r0, r7
 8003544:	47c0      	blx	r8
 8003546:	3001      	adds	r0, #1
 8003548:	d0e6      	beq.n	8003518 <_printf_common+0xa8>
 800354a:	3601      	adds	r6, #1
 800354c:	e7d9      	b.n	8003502 <_printf_common+0x92>
	...

08003550 <_printf_i>:
 8003550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003554:	7e0f      	ldrb	r7, [r1, #24]
 8003556:	4691      	mov	r9, r2
 8003558:	2f78      	cmp	r7, #120	; 0x78
 800355a:	4680      	mov	r8, r0
 800355c:	460c      	mov	r4, r1
 800355e:	469a      	mov	sl, r3
 8003560:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003566:	d807      	bhi.n	8003578 <_printf_i+0x28>
 8003568:	2f62      	cmp	r7, #98	; 0x62
 800356a:	d80a      	bhi.n	8003582 <_printf_i+0x32>
 800356c:	2f00      	cmp	r7, #0
 800356e:	f000 80d9 	beq.w	8003724 <_printf_i+0x1d4>
 8003572:	2f58      	cmp	r7, #88	; 0x58
 8003574:	f000 80a4 	beq.w	80036c0 <_printf_i+0x170>
 8003578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800357c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003580:	e03a      	b.n	80035f8 <_printf_i+0xa8>
 8003582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003586:	2b15      	cmp	r3, #21
 8003588:	d8f6      	bhi.n	8003578 <_printf_i+0x28>
 800358a:	a101      	add	r1, pc, #4	; (adr r1, 8003590 <_printf_i+0x40>)
 800358c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003590:	080035e9 	.word	0x080035e9
 8003594:	080035fd 	.word	0x080035fd
 8003598:	08003579 	.word	0x08003579
 800359c:	08003579 	.word	0x08003579
 80035a0:	08003579 	.word	0x08003579
 80035a4:	08003579 	.word	0x08003579
 80035a8:	080035fd 	.word	0x080035fd
 80035ac:	08003579 	.word	0x08003579
 80035b0:	08003579 	.word	0x08003579
 80035b4:	08003579 	.word	0x08003579
 80035b8:	08003579 	.word	0x08003579
 80035bc:	0800370b 	.word	0x0800370b
 80035c0:	0800362d 	.word	0x0800362d
 80035c4:	080036ed 	.word	0x080036ed
 80035c8:	08003579 	.word	0x08003579
 80035cc:	08003579 	.word	0x08003579
 80035d0:	0800372d 	.word	0x0800372d
 80035d4:	08003579 	.word	0x08003579
 80035d8:	0800362d 	.word	0x0800362d
 80035dc:	08003579 	.word	0x08003579
 80035e0:	08003579 	.word	0x08003579
 80035e4:	080036f5 	.word	0x080036f5
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	1d1a      	adds	r2, r3, #4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	602a      	str	r2, [r5, #0]
 80035f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0a4      	b.n	8003746 <_printf_i+0x1f6>
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	6829      	ldr	r1, [r5, #0]
 8003600:	0606      	lsls	r6, r0, #24
 8003602:	f101 0304 	add.w	r3, r1, #4
 8003606:	d50a      	bpl.n	800361e <_printf_i+0xce>
 8003608:	680e      	ldr	r6, [r1, #0]
 800360a:	602b      	str	r3, [r5, #0]
 800360c:	2e00      	cmp	r6, #0
 800360e:	da03      	bge.n	8003618 <_printf_i+0xc8>
 8003610:	232d      	movs	r3, #45	; 0x2d
 8003612:	4276      	negs	r6, r6
 8003614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003618:	230a      	movs	r3, #10
 800361a:	485e      	ldr	r0, [pc, #376]	; (8003794 <_printf_i+0x244>)
 800361c:	e019      	b.n	8003652 <_printf_i+0x102>
 800361e:	680e      	ldr	r6, [r1, #0]
 8003620:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	bf18      	it	ne
 8003628:	b236      	sxthne	r6, r6
 800362a:	e7ef      	b.n	800360c <_printf_i+0xbc>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	6820      	ldr	r0, [r4, #0]
 8003630:	1d19      	adds	r1, r3, #4
 8003632:	6029      	str	r1, [r5, #0]
 8003634:	0601      	lsls	r1, r0, #24
 8003636:	d501      	bpl.n	800363c <_printf_i+0xec>
 8003638:	681e      	ldr	r6, [r3, #0]
 800363a:	e002      	b.n	8003642 <_printf_i+0xf2>
 800363c:	0646      	lsls	r6, r0, #25
 800363e:	d5fb      	bpl.n	8003638 <_printf_i+0xe8>
 8003640:	881e      	ldrh	r6, [r3, #0]
 8003642:	2f6f      	cmp	r7, #111	; 0x6f
 8003644:	bf0c      	ite	eq
 8003646:	2308      	moveq	r3, #8
 8003648:	230a      	movne	r3, #10
 800364a:	4852      	ldr	r0, [pc, #328]	; (8003794 <_printf_i+0x244>)
 800364c:	2100      	movs	r1, #0
 800364e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003652:	6865      	ldr	r5, [r4, #4]
 8003654:	2d00      	cmp	r5, #0
 8003656:	bfa8      	it	ge
 8003658:	6821      	ldrge	r1, [r4, #0]
 800365a:	60a5      	str	r5, [r4, #8]
 800365c:	bfa4      	itt	ge
 800365e:	f021 0104 	bicge.w	r1, r1, #4
 8003662:	6021      	strge	r1, [r4, #0]
 8003664:	b90e      	cbnz	r6, 800366a <_printf_i+0x11a>
 8003666:	2d00      	cmp	r5, #0
 8003668:	d04d      	beq.n	8003706 <_printf_i+0x1b6>
 800366a:	4615      	mov	r5, r2
 800366c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003670:	fb03 6711 	mls	r7, r3, r1, r6
 8003674:	5dc7      	ldrb	r7, [r0, r7]
 8003676:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800367a:	4637      	mov	r7, r6
 800367c:	42bb      	cmp	r3, r7
 800367e:	460e      	mov	r6, r1
 8003680:	d9f4      	bls.n	800366c <_printf_i+0x11c>
 8003682:	2b08      	cmp	r3, #8
 8003684:	d10b      	bne.n	800369e <_printf_i+0x14e>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	07de      	lsls	r6, r3, #31
 800368a:	d508      	bpl.n	800369e <_printf_i+0x14e>
 800368c:	6923      	ldr	r3, [r4, #16]
 800368e:	6861      	ldr	r1, [r4, #4]
 8003690:	4299      	cmp	r1, r3
 8003692:	bfde      	ittt	le
 8003694:	2330      	movle	r3, #48	; 0x30
 8003696:	f805 3c01 	strble.w	r3, [r5, #-1]
 800369a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800369e:	1b52      	subs	r2, r2, r5
 80036a0:	6122      	str	r2, [r4, #16]
 80036a2:	464b      	mov	r3, r9
 80036a4:	4621      	mov	r1, r4
 80036a6:	4640      	mov	r0, r8
 80036a8:	f8cd a000 	str.w	sl, [sp]
 80036ac:	aa03      	add	r2, sp, #12
 80036ae:	f7ff fedf 	bl	8003470 <_printf_common>
 80036b2:	3001      	adds	r0, #1
 80036b4:	d14c      	bne.n	8003750 <_printf_i+0x200>
 80036b6:	f04f 30ff 	mov.w	r0, #4294967295
 80036ba:	b004      	add	sp, #16
 80036bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c0:	4834      	ldr	r0, [pc, #208]	; (8003794 <_printf_i+0x244>)
 80036c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80036c6:	6829      	ldr	r1, [r5, #0]
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80036ce:	6029      	str	r1, [r5, #0]
 80036d0:	061d      	lsls	r5, r3, #24
 80036d2:	d514      	bpl.n	80036fe <_printf_i+0x1ae>
 80036d4:	07df      	lsls	r7, r3, #31
 80036d6:	bf44      	itt	mi
 80036d8:	f043 0320 	orrmi.w	r3, r3, #32
 80036dc:	6023      	strmi	r3, [r4, #0]
 80036de:	b91e      	cbnz	r6, 80036e8 <_printf_i+0x198>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	f023 0320 	bic.w	r3, r3, #32
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	2310      	movs	r3, #16
 80036ea:	e7af      	b.n	800364c <_printf_i+0xfc>
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	f043 0320 	orr.w	r3, r3, #32
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	2378      	movs	r3, #120	; 0x78
 80036f6:	4828      	ldr	r0, [pc, #160]	; (8003798 <_printf_i+0x248>)
 80036f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036fc:	e7e3      	b.n	80036c6 <_printf_i+0x176>
 80036fe:	0659      	lsls	r1, r3, #25
 8003700:	bf48      	it	mi
 8003702:	b2b6      	uxthmi	r6, r6
 8003704:	e7e6      	b.n	80036d4 <_printf_i+0x184>
 8003706:	4615      	mov	r5, r2
 8003708:	e7bb      	b.n	8003682 <_printf_i+0x132>
 800370a:	682b      	ldr	r3, [r5, #0]
 800370c:	6826      	ldr	r6, [r4, #0]
 800370e:	1d18      	adds	r0, r3, #4
 8003710:	6961      	ldr	r1, [r4, #20]
 8003712:	6028      	str	r0, [r5, #0]
 8003714:	0635      	lsls	r5, r6, #24
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	d501      	bpl.n	800371e <_printf_i+0x1ce>
 800371a:	6019      	str	r1, [r3, #0]
 800371c:	e002      	b.n	8003724 <_printf_i+0x1d4>
 800371e:	0670      	lsls	r0, r6, #25
 8003720:	d5fb      	bpl.n	800371a <_printf_i+0x1ca>
 8003722:	8019      	strh	r1, [r3, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	4615      	mov	r5, r2
 8003728:	6123      	str	r3, [r4, #16]
 800372a:	e7ba      	b.n	80036a2 <_printf_i+0x152>
 800372c:	682b      	ldr	r3, [r5, #0]
 800372e:	2100      	movs	r1, #0
 8003730:	1d1a      	adds	r2, r3, #4
 8003732:	602a      	str	r2, [r5, #0]
 8003734:	681d      	ldr	r5, [r3, #0]
 8003736:	6862      	ldr	r2, [r4, #4]
 8003738:	4628      	mov	r0, r5
 800373a:	f000 f82f 	bl	800379c <memchr>
 800373e:	b108      	cbz	r0, 8003744 <_printf_i+0x1f4>
 8003740:	1b40      	subs	r0, r0, r5
 8003742:	6060      	str	r0, [r4, #4]
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	6123      	str	r3, [r4, #16]
 8003748:	2300      	movs	r3, #0
 800374a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800374e:	e7a8      	b.n	80036a2 <_printf_i+0x152>
 8003750:	462a      	mov	r2, r5
 8003752:	4649      	mov	r1, r9
 8003754:	4640      	mov	r0, r8
 8003756:	6923      	ldr	r3, [r4, #16]
 8003758:	47d0      	blx	sl
 800375a:	3001      	adds	r0, #1
 800375c:	d0ab      	beq.n	80036b6 <_printf_i+0x166>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	079b      	lsls	r3, r3, #30
 8003762:	d413      	bmi.n	800378c <_printf_i+0x23c>
 8003764:	68e0      	ldr	r0, [r4, #12]
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	4298      	cmp	r0, r3
 800376a:	bfb8      	it	lt
 800376c:	4618      	movlt	r0, r3
 800376e:	e7a4      	b.n	80036ba <_printf_i+0x16a>
 8003770:	2301      	movs	r3, #1
 8003772:	4632      	mov	r2, r6
 8003774:	4649      	mov	r1, r9
 8003776:	4640      	mov	r0, r8
 8003778:	47d0      	blx	sl
 800377a:	3001      	adds	r0, #1
 800377c:	d09b      	beq.n	80036b6 <_printf_i+0x166>
 800377e:	3501      	adds	r5, #1
 8003780:	68e3      	ldr	r3, [r4, #12]
 8003782:	9903      	ldr	r1, [sp, #12]
 8003784:	1a5b      	subs	r3, r3, r1
 8003786:	42ab      	cmp	r3, r5
 8003788:	dcf2      	bgt.n	8003770 <_printf_i+0x220>
 800378a:	e7eb      	b.n	8003764 <_printf_i+0x214>
 800378c:	2500      	movs	r5, #0
 800378e:	f104 0619 	add.w	r6, r4, #25
 8003792:	e7f5      	b.n	8003780 <_printf_i+0x230>
 8003794:	08003ae1 	.word	0x08003ae1
 8003798:	08003af2 	.word	0x08003af2

0800379c <memchr>:
 800379c:	4603      	mov	r3, r0
 800379e:	b510      	push	{r4, lr}
 80037a0:	b2c9      	uxtb	r1, r1
 80037a2:	4402      	add	r2, r0
 80037a4:	4293      	cmp	r3, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	d101      	bne.n	80037ae <memchr+0x12>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e003      	b.n	80037b6 <memchr+0x1a>
 80037ae:	7804      	ldrb	r4, [r0, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	428c      	cmp	r4, r1
 80037b4:	d1f6      	bne.n	80037a4 <memchr+0x8>
 80037b6:	bd10      	pop	{r4, pc}

080037b8 <memcpy>:
 80037b8:	440a      	add	r2, r1
 80037ba:	4291      	cmp	r1, r2
 80037bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c0:	d100      	bne.n	80037c4 <memcpy+0xc>
 80037c2:	4770      	bx	lr
 80037c4:	b510      	push	{r4, lr}
 80037c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ca:	4291      	cmp	r1, r2
 80037cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d0:	d1f9      	bne.n	80037c6 <memcpy+0xe>
 80037d2:	bd10      	pop	{r4, pc}

080037d4 <memmove>:
 80037d4:	4288      	cmp	r0, r1
 80037d6:	b510      	push	{r4, lr}
 80037d8:	eb01 0402 	add.w	r4, r1, r2
 80037dc:	d902      	bls.n	80037e4 <memmove+0x10>
 80037de:	4284      	cmp	r4, r0
 80037e0:	4623      	mov	r3, r4
 80037e2:	d807      	bhi.n	80037f4 <memmove+0x20>
 80037e4:	1e43      	subs	r3, r0, #1
 80037e6:	42a1      	cmp	r1, r4
 80037e8:	d008      	beq.n	80037fc <memmove+0x28>
 80037ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037f2:	e7f8      	b.n	80037e6 <memmove+0x12>
 80037f4:	4601      	mov	r1, r0
 80037f6:	4402      	add	r2, r0
 80037f8:	428a      	cmp	r2, r1
 80037fa:	d100      	bne.n	80037fe <memmove+0x2a>
 80037fc:	bd10      	pop	{r4, pc}
 80037fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003806:	e7f7      	b.n	80037f8 <memmove+0x24>

08003808 <_free_r>:
 8003808:	b538      	push	{r3, r4, r5, lr}
 800380a:	4605      	mov	r5, r0
 800380c:	2900      	cmp	r1, #0
 800380e:	d040      	beq.n	8003892 <_free_r+0x8a>
 8003810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003814:	1f0c      	subs	r4, r1, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfb8      	it	lt
 800381a:	18e4      	addlt	r4, r4, r3
 800381c:	f000 f910 	bl	8003a40 <__malloc_lock>
 8003820:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <_free_r+0x8c>)
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	b933      	cbnz	r3, 8003834 <_free_r+0x2c>
 8003826:	6063      	str	r3, [r4, #4]
 8003828:	6014      	str	r4, [r2, #0]
 800382a:	4628      	mov	r0, r5
 800382c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003830:	f000 b90c 	b.w	8003a4c <__malloc_unlock>
 8003834:	42a3      	cmp	r3, r4
 8003836:	d908      	bls.n	800384a <_free_r+0x42>
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	1821      	adds	r1, r4, r0
 800383c:	428b      	cmp	r3, r1
 800383e:	bf01      	itttt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	1809      	addeq	r1, r1, r0
 8003846:	6021      	streq	r1, [r4, #0]
 8003848:	e7ed      	b.n	8003826 <_free_r+0x1e>
 800384a:	461a      	mov	r2, r3
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	b10b      	cbz	r3, 8003854 <_free_r+0x4c>
 8003850:	42a3      	cmp	r3, r4
 8003852:	d9fa      	bls.n	800384a <_free_r+0x42>
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	1850      	adds	r0, r2, r1
 8003858:	42a0      	cmp	r0, r4
 800385a:	d10b      	bne.n	8003874 <_free_r+0x6c>
 800385c:	6820      	ldr	r0, [r4, #0]
 800385e:	4401      	add	r1, r0
 8003860:	1850      	adds	r0, r2, r1
 8003862:	4283      	cmp	r3, r0
 8003864:	6011      	str	r1, [r2, #0]
 8003866:	d1e0      	bne.n	800382a <_free_r+0x22>
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4401      	add	r1, r0
 800386e:	6011      	str	r1, [r2, #0]
 8003870:	6053      	str	r3, [r2, #4]
 8003872:	e7da      	b.n	800382a <_free_r+0x22>
 8003874:	d902      	bls.n	800387c <_free_r+0x74>
 8003876:	230c      	movs	r3, #12
 8003878:	602b      	str	r3, [r5, #0]
 800387a:	e7d6      	b.n	800382a <_free_r+0x22>
 800387c:	6820      	ldr	r0, [r4, #0]
 800387e:	1821      	adds	r1, r4, r0
 8003880:	428b      	cmp	r3, r1
 8003882:	bf01      	itttt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	1809      	addeq	r1, r1, r0
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	6063      	str	r3, [r4, #4]
 800388e:	6054      	str	r4, [r2, #4]
 8003890:	e7cb      	b.n	800382a <_free_r+0x22>
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	200001f4 	.word	0x200001f4

08003898 <sbrk_aligned>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4e0e      	ldr	r6, [pc, #56]	; (80038d4 <sbrk_aligned+0x3c>)
 800389c:	460c      	mov	r4, r1
 800389e:	6831      	ldr	r1, [r6, #0]
 80038a0:	4605      	mov	r5, r0
 80038a2:	b911      	cbnz	r1, 80038aa <sbrk_aligned+0x12>
 80038a4:	f000 f8bc 	bl	8003a20 <_sbrk_r>
 80038a8:	6030      	str	r0, [r6, #0]
 80038aa:	4621      	mov	r1, r4
 80038ac:	4628      	mov	r0, r5
 80038ae:	f000 f8b7 	bl	8003a20 <_sbrk_r>
 80038b2:	1c43      	adds	r3, r0, #1
 80038b4:	d00a      	beq.n	80038cc <sbrk_aligned+0x34>
 80038b6:	1cc4      	adds	r4, r0, #3
 80038b8:	f024 0403 	bic.w	r4, r4, #3
 80038bc:	42a0      	cmp	r0, r4
 80038be:	d007      	beq.n	80038d0 <sbrk_aligned+0x38>
 80038c0:	1a21      	subs	r1, r4, r0
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 f8ac 	bl	8003a20 <_sbrk_r>
 80038c8:	3001      	adds	r0, #1
 80038ca:	d101      	bne.n	80038d0 <sbrk_aligned+0x38>
 80038cc:	f04f 34ff 	mov.w	r4, #4294967295
 80038d0:	4620      	mov	r0, r4
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	200001f8 	.word	0x200001f8

080038d8 <_malloc_r>:
 80038d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038dc:	1ccd      	adds	r5, r1, #3
 80038de:	f025 0503 	bic.w	r5, r5, #3
 80038e2:	3508      	adds	r5, #8
 80038e4:	2d0c      	cmp	r5, #12
 80038e6:	bf38      	it	cc
 80038e8:	250c      	movcc	r5, #12
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	4607      	mov	r7, r0
 80038ee:	db01      	blt.n	80038f4 <_malloc_r+0x1c>
 80038f0:	42a9      	cmp	r1, r5
 80038f2:	d905      	bls.n	8003900 <_malloc_r+0x28>
 80038f4:	230c      	movs	r3, #12
 80038f6:	2600      	movs	r6, #0
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4630      	mov	r0, r6
 80038fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003900:	4e2e      	ldr	r6, [pc, #184]	; (80039bc <_malloc_r+0xe4>)
 8003902:	f000 f89d 	bl	8003a40 <__malloc_lock>
 8003906:	6833      	ldr	r3, [r6, #0]
 8003908:	461c      	mov	r4, r3
 800390a:	bb34      	cbnz	r4, 800395a <_malloc_r+0x82>
 800390c:	4629      	mov	r1, r5
 800390e:	4638      	mov	r0, r7
 8003910:	f7ff ffc2 	bl	8003898 <sbrk_aligned>
 8003914:	1c43      	adds	r3, r0, #1
 8003916:	4604      	mov	r4, r0
 8003918:	d14d      	bne.n	80039b6 <_malloc_r+0xde>
 800391a:	6834      	ldr	r4, [r6, #0]
 800391c:	4626      	mov	r6, r4
 800391e:	2e00      	cmp	r6, #0
 8003920:	d140      	bne.n	80039a4 <_malloc_r+0xcc>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	4631      	mov	r1, r6
 8003926:	4638      	mov	r0, r7
 8003928:	eb04 0803 	add.w	r8, r4, r3
 800392c:	f000 f878 	bl	8003a20 <_sbrk_r>
 8003930:	4580      	cmp	r8, r0
 8003932:	d13a      	bne.n	80039aa <_malloc_r+0xd2>
 8003934:	6821      	ldr	r1, [r4, #0]
 8003936:	3503      	adds	r5, #3
 8003938:	1a6d      	subs	r5, r5, r1
 800393a:	f025 0503 	bic.w	r5, r5, #3
 800393e:	3508      	adds	r5, #8
 8003940:	2d0c      	cmp	r5, #12
 8003942:	bf38      	it	cc
 8003944:	250c      	movcc	r5, #12
 8003946:	4638      	mov	r0, r7
 8003948:	4629      	mov	r1, r5
 800394a:	f7ff ffa5 	bl	8003898 <sbrk_aligned>
 800394e:	3001      	adds	r0, #1
 8003950:	d02b      	beq.n	80039aa <_malloc_r+0xd2>
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	442b      	add	r3, r5
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	e00e      	b.n	8003978 <_malloc_r+0xa0>
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	1b52      	subs	r2, r2, r5
 800395e:	d41e      	bmi.n	800399e <_malloc_r+0xc6>
 8003960:	2a0b      	cmp	r2, #11
 8003962:	d916      	bls.n	8003992 <_malloc_r+0xba>
 8003964:	1961      	adds	r1, r4, r5
 8003966:	42a3      	cmp	r3, r4
 8003968:	6025      	str	r5, [r4, #0]
 800396a:	bf18      	it	ne
 800396c:	6059      	strne	r1, [r3, #4]
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	bf08      	it	eq
 8003972:	6031      	streq	r1, [r6, #0]
 8003974:	5162      	str	r2, [r4, r5]
 8003976:	604b      	str	r3, [r1, #4]
 8003978:	4638      	mov	r0, r7
 800397a:	f104 060b 	add.w	r6, r4, #11
 800397e:	f000 f865 	bl	8003a4c <__malloc_unlock>
 8003982:	f026 0607 	bic.w	r6, r6, #7
 8003986:	1d23      	adds	r3, r4, #4
 8003988:	1af2      	subs	r2, r6, r3
 800398a:	d0b6      	beq.n	80038fa <_malloc_r+0x22>
 800398c:	1b9b      	subs	r3, r3, r6
 800398e:	50a3      	str	r3, [r4, r2]
 8003990:	e7b3      	b.n	80038fa <_malloc_r+0x22>
 8003992:	6862      	ldr	r2, [r4, #4]
 8003994:	42a3      	cmp	r3, r4
 8003996:	bf0c      	ite	eq
 8003998:	6032      	streq	r2, [r6, #0]
 800399a:	605a      	strne	r2, [r3, #4]
 800399c:	e7ec      	b.n	8003978 <_malloc_r+0xa0>
 800399e:	4623      	mov	r3, r4
 80039a0:	6864      	ldr	r4, [r4, #4]
 80039a2:	e7b2      	b.n	800390a <_malloc_r+0x32>
 80039a4:	4634      	mov	r4, r6
 80039a6:	6876      	ldr	r6, [r6, #4]
 80039a8:	e7b9      	b.n	800391e <_malloc_r+0x46>
 80039aa:	230c      	movs	r3, #12
 80039ac:	4638      	mov	r0, r7
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	f000 f84c 	bl	8003a4c <__malloc_unlock>
 80039b4:	e7a1      	b.n	80038fa <_malloc_r+0x22>
 80039b6:	6025      	str	r5, [r4, #0]
 80039b8:	e7de      	b.n	8003978 <_malloc_r+0xa0>
 80039ba:	bf00      	nop
 80039bc:	200001f4 	.word	0x200001f4

080039c0 <_realloc_r>:
 80039c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c4:	4680      	mov	r8, r0
 80039c6:	4614      	mov	r4, r2
 80039c8:	460e      	mov	r6, r1
 80039ca:	b921      	cbnz	r1, 80039d6 <_realloc_r+0x16>
 80039cc:	4611      	mov	r1, r2
 80039ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039d2:	f7ff bf81 	b.w	80038d8 <_malloc_r>
 80039d6:	b92a      	cbnz	r2, 80039e4 <_realloc_r+0x24>
 80039d8:	f7ff ff16 	bl	8003808 <_free_r>
 80039dc:	4625      	mov	r5, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039e4:	f000 f838 	bl	8003a58 <_malloc_usable_size_r>
 80039e8:	4284      	cmp	r4, r0
 80039ea:	4607      	mov	r7, r0
 80039ec:	d802      	bhi.n	80039f4 <_realloc_r+0x34>
 80039ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039f2:	d812      	bhi.n	8003a1a <_realloc_r+0x5a>
 80039f4:	4621      	mov	r1, r4
 80039f6:	4640      	mov	r0, r8
 80039f8:	f7ff ff6e 	bl	80038d8 <_malloc_r>
 80039fc:	4605      	mov	r5, r0
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d0ed      	beq.n	80039de <_realloc_r+0x1e>
 8003a02:	42bc      	cmp	r4, r7
 8003a04:	4622      	mov	r2, r4
 8003a06:	4631      	mov	r1, r6
 8003a08:	bf28      	it	cs
 8003a0a:	463a      	movcs	r2, r7
 8003a0c:	f7ff fed4 	bl	80037b8 <memcpy>
 8003a10:	4631      	mov	r1, r6
 8003a12:	4640      	mov	r0, r8
 8003a14:	f7ff fef8 	bl	8003808 <_free_r>
 8003a18:	e7e1      	b.n	80039de <_realloc_r+0x1e>
 8003a1a:	4635      	mov	r5, r6
 8003a1c:	e7df      	b.n	80039de <_realloc_r+0x1e>
	...

08003a20 <_sbrk_r>:
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	2300      	movs	r3, #0
 8003a24:	4d05      	ldr	r5, [pc, #20]	; (8003a3c <_sbrk_r+0x1c>)
 8003a26:	4604      	mov	r4, r0
 8003a28:	4608      	mov	r0, r1
 8003a2a:	602b      	str	r3, [r5, #0]
 8003a2c:	f7fd f8ca 	bl	8000bc4 <_sbrk>
 8003a30:	1c43      	adds	r3, r0, #1
 8003a32:	d102      	bne.n	8003a3a <_sbrk_r+0x1a>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	b103      	cbz	r3, 8003a3a <_sbrk_r+0x1a>
 8003a38:	6023      	str	r3, [r4, #0]
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
 8003a3c:	200001fc 	.word	0x200001fc

08003a40 <__malloc_lock>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__malloc_lock+0x8>)
 8003a42:	f000 b811 	b.w	8003a68 <__retarget_lock_acquire_recursive>
 8003a46:	bf00      	nop
 8003a48:	20000200 	.word	0x20000200

08003a4c <__malloc_unlock>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__malloc_unlock+0x8>)
 8003a4e:	f000 b80c 	b.w	8003a6a <__retarget_lock_release_recursive>
 8003a52:	bf00      	nop
 8003a54:	20000200 	.word	0x20000200

08003a58 <_malloc_usable_size_r>:
 8003a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5c:	1f18      	subs	r0, r3, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bfbc      	itt	lt
 8003a62:	580b      	ldrlt	r3, [r1, r0]
 8003a64:	18c0      	addlt	r0, r0, r3
 8003a66:	4770      	bx	lr

08003a68 <__retarget_lock_acquire_recursive>:
 8003a68:	4770      	bx	lr

08003a6a <__retarget_lock_release_recursive>:
 8003a6a:	4770      	bx	lr

08003a6c <_init>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	bf00      	nop
 8003a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a72:	bc08      	pop	{r3}
 8003a74:	469e      	mov	lr, r3
 8003a76:	4770      	bx	lr

08003a78 <_fini>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr
